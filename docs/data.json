{
    "project": {
        "name": "ACT.js",
        "description": "ACT.js Library",
        "version": "1.1.1",
        "url": "",
        "logo": "https://s.yimg.com/cv/ae/global/ACTJS/logo/ACT.js.logo.png",
        "type": "doc"
    },
    "files": {
        "src/capabilities/ACT_capability-skeleton.js": {
            "name": "src/capabilities/ACT_capability-skeleton.js",
            "modules": {
                "CapabilitySkeleton": 1
            },
            "classes": {
                "CapabilitySkeleton": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/capabilities/ACT_contentAdobeEdge.js": {
            "name": "src/capabilities/ACT_contentAdobeEdge.js",
            "modules": {
                "ContentAdobeEdge": 1
            },
            "classes": {
                "ContentAdobeEdge": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/capabilities/ACT_contentCarousel.js": {
            "name": "src/capabilities/ACT_contentCarousel.js",
            "modules": {
                "ContentCarousel": 1
            },
            "classes": {
                "ContentCarousel": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/capabilities/ACT_contentContainer.js": {
            "name": "src/capabilities/ACT_contentContainer.js",
            "modules": {
                "ContentContainer": 1
            },
            "classes": {
                "ContentContainer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/capabilities/ACT_contentHtml5.js": {
            "name": "src/capabilities/ACT_contentHtml5.js",
            "modules": {
                "ContentHtml5": 1
            },
            "classes": {
                "ContentHtml5": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/capabilities/ACT_contentImage.js": {
            "name": "src/capabilities/ACT_contentImage.js",
            "modules": {
                "ContentImage": 1
            },
            "classes": {
                "ContentImage": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/capabilities/ACT_contentProgressBar.js": {
            "name": "src/capabilities/ACT_contentProgressBar.js",
            "modules": {
                "ContentProgressBar": 1
            },
            "classes": {
                "ContentProgressBar": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/capabilities/ACT_contentSwf.js": {
            "name": "src/capabilities/ACT_contentSwf.js",
            "modules": {
                "ContentSwf": 1
            },
            "classes": {
                "ContentSwf": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/capabilities/ACT_contentThirdParty.js": {
            "name": "src/capabilities/ACT_contentThirdParty.js",
            "modules": {
                "ContentThirdParty": 1
            },
            "classes": {
                "ContentThirdParty": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/capabilities/ACT_contentVideoFlash.js": {
            "name": "src/capabilities/ACT_contentVideoFlash.js",
            "modules": {
                "ContentVideoFlash": 1
            },
            "classes": {
                "ContentVideoFlash": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/capabilities/ACT_contentVideoHtml.js": {
            "name": "src/capabilities/ACT_contentVideoHtml.js",
            "modules": {
                "ContentVideoHtml": 1
            },
            "classes": {
                "ContentVideoHtml": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/capabilities/ACT_contentYoutube.js": {
            "name": "src/capabilities/ACT_contentYoutube.js",
            "modules": {
                "ContentYoutube": 1
            },
            "classes": {
                "ContentYoutube": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/core/ACT.js": {
            "name": "src/core/ACT.js",
            "modules": {
                "ACT": 1
            },
            "classes": {
                "ACT": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/core/ACT_Layerslist.js": {
            "name": "src/core/ACT_Layerslist.js",
            "modules": {
                "LayersList": 1
            },
            "classes": {
                "LayersList": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/core/ACT_Screen.js": {
            "name": "src/core/ACT_Screen.js",
            "modules": {
                "Screen": 1
            },
            "classes": {
                "Screen": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/core/ACT_StandardAd.js": {
            "name": "src/core/ACT_StandardAd.js",
            "modules": {
                "StandardAd": 1
            },
            "classes": {
                "StandardAd": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/core/ACT_TrackingFacade.js": {
            "name": "src/core/ACT_TrackingFacade.js",
            "modules": {
                "Tracking": 1
            },
            "classes": {
                "Tracking": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/core/ACT_actionsQueue.js": {
            "name": "src/core/ACT_actionsQueue.js",
            "modules": {
                "actionsQueue": 1
            },
            "classes": {
                "ActionsQueue": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/core/ACT_base.js": {
            "name": "src/core/ACT_base.js",
            "modules": {
                "Base": 1
            },
            "classes": {
                "Base": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/core/ACT_cookie.js": {
            "name": "src/core/ACT_cookie.js",
            "modules": {
                "Cookie": 1
            },
            "classes": {
                "Cookie": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/core/ACT_environment.js": {
            "name": "src/core/ACT_environment.js",
            "modules": {
                "environment": 1
            },
            "classes": {
                "Environment": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/core/ACT_layerStandard.js": {
            "name": "src/core/ACT_layerStandard.js",
            "modules": {
                "LayerStandard": 1
            },
            "classes": {
                "LayerStandard": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/core/ACT_scaffolding.js": {
            "name": "src/core/ACT_scaffolding.js",
            "modules": {
                "Scaffolding": 1
            },
            "classes": {
                "Scaffolding": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/core/ACT_secureDarla.js": {
            "name": "src/core/ACT_secureDarla.js",
            "modules": {
                "SecureDarla": 1
            },
            "classes": {
                "SecureDarla": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/library/ACT_AdobeEdgeBridge.js": {
            "name": "src/library/ACT_AdobeEdgeBridge.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/library/ACT_DwellTime.js": {
            "name": "src/library/ACT_DwellTime.js",
            "modules": {
                "DwellTime": 1
            },
            "classes": {
                "DwellTime": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/library/ACT_Enabler.js": {
            "name": "src/library/ACT_Enabler.js",
            "modules": {
                "EnablerADTECH": 1,
                "Enabler": 1
            },
            "classes": {
                "EnablerADTECH": 1,
                "Enabler": 1,
                "EnablerConfig": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/library/ACT_IO.js": {
            "name": "src/library/ACT_IO.js",
            "modules": {
                "IO": 1
            },
            "classes": {
                "IO": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/library/ACT_SWFBridge.js": {
            "name": "src/library/ACT_SWFBridge.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/library/ACT_UA.js": {
            "name": "src/library/ACT_UA.js",
            "modules": {},
            "classes": {
                "UA": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/library/ACT_VideoEvents.js": {
            "name": "src/library/ACT_VideoEvents.js",
            "modules": {},
            "classes": {
                "VideoEvents": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/library/ACT_animation.js": {
            "name": "src/library/ACT_animation.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/library/ACT_capability.js": {
            "name": "src/library/ACT_capability.js",
            "modules": {},
            "classes": {
                "Capability": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/library/ACT_class.js": {
            "name": "src/library/ACT_class.js",
            "modules": {},
            "classes": {
                "Class": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/library/ACT_customData.js": {
            "name": "src/library/ACT_customData.js",
            "modules": {},
            "classes": {
                "CustomData": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/library/ACT_debug.js": {
            "name": "src/library/ACT_debug.js",
            "modules": {},
            "classes": {
                "Debug": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/library/ACT_dom.js": {
            "name": "src/library/ACT_dom.js",
            "modules": {},
            "classes": {
                "Dom": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/library/ACT_event.js": {
            "name": "src/library/ACT_event.js",
            "modules": {},
            "classes": {
                "Event": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/library/ACT_flash.js": {
            "name": "src/library/ACT_flash.js",
            "modules": {},
            "classes": {
                "Flash": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/library/ACT_json.js": {
            "name": "src/library/ACT_json.js",
            "modules": {},
            "classes": {
                "Json": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/library/ACT_lang.js": {
            "name": "src/library/ACT_lang.js",
            "modules": {},
            "classes": {
                "Lang": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/library/ACT_util.js": {
            "name": "src/library/ACT_util.js",
            "modules": {},
            "classes": {
                "Util": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "CapabilitySkeleton": {
            "name": "CapabilitySkeleton",
            "submodules": {},
            "classes": {
                "CapabilitySkeleton": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "src/capabilities/ACT_capability-skeleton.js",
            "line": 93,
            "itemtype": "main"
        },
        "ContentAdobeEdge": {
            "name": "ContentAdobeEdge",
            "submodules": {},
            "classes": {
                "ContentAdobeEdge": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "src/capabilities/ACT_contentAdobeEdge.js",
            "line": 67,
            "description": "This capability will get the config for AdobeBride, rendering content and provide helper functions\nFeature including:\n- create AdobeBride composition\n-",
            "itemtype": "main"
        },
        "ContentCarousel": {
            "name": "ContentCarousel",
            "submodules": {},
            "classes": {
                "ContentCarousel": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "src/capabilities/ACT_contentCarousel.js",
            "line": 178,
            "description": "The 'ContentCarousel' is a capability made to render its contents into a carousel slideshow with actions available to move the slides\n\nAvailable 'actions':\n- carouselNextSlide\n- carouselPreviousSlide\n- carouselJumpToSlide\n\nAvailable 'triggers':\n- carouselAnimationStart\n- carouselAnimationComplete\n- carouselAnimationPanel[X]Play\n\nExample of 'SuperConf' use case:\n\n    {\n        id: 'carousel_one',\n        type: 'content-carousel',\n        classNode: 'mpu_container_class',\n        env: ['html','flash','backup'],\n        css: {\n          width: 300\n        },\n        ContentCarouselConfig: {\n           transitionTime: 500,\n           currentSlideId: 2\n         },\n        eventConfig: [],\n        content: []\n     }",
            "itemtype": "main"
        },
        "ContentContainer": {
            "name": "ContentContainer",
            "submodules": {},
            "classes": {
                "ContentContainer": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "src/capabilities/ACT_contentContainer.js",
            "line": 326,
            "description": "The 'ContentContainer' is a capability made to generate a 'DIV' tag use as a container.\n\nAvailable 'actions':\n- openURL\n- showContainer\n- hideContainer\n- changeStyles\n\nAvailable 'triggers':\n- click\n- mouseenter\n- mouseleave\n\nExample of 'SuperConf' use case:\n```\n   {\n       id: 'mpu_container',\n       type: 'content-container',\n       classNode: 'mpu_container_class',\n       env: ['html','flash','backup'],\n       css: {\n           width:'350'\n       },\n       eventConfig: [{\n           eventType: 'click',\n           actions: [\n               {\n                   type: 'openURL',\n                   URLpath: 'https://www.yahoo.com',\n                   URLname: 'mpu_click_clicktag_open'\n               }\n           ],\n           timeTo: 2\n       }],\n       content: []\n   }\n```",
            "itemtype": "main"
        },
        "ContentHtml5": {
            "name": "ContentHtml5",
            "submodules": {},
            "classes": {
                "ContentHtml5": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "src/capabilities/ACT_contentHtml5.js",
            "line": 9,
            "description": "The 'ContentHtml5' is a capability made to generate a 'DIV' or an 'IFRAME' tag use for htlm5 assets.",
            "itemtype": "main"
        },
        "ContentImage": {
            "name": "ContentImage",
            "submodules": {},
            "classes": {
                "ContentImage": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "src/capabilities/ACT_contentImage.js",
            "line": 8,
            "description": "The 'ContentImage' is a capability made to generate a 'IMG' tag.\n\nExample of 'SuperConf' use case:\n\n     {\n         id: 'mpu_image',\n         type: 'content-image',\n         classNode: 'mpu_image_class',\n         env: ['html','flash','backup'],\n         css: {\n             width: 300,\n             height: 250\n         },\n         imageConfig: {\n             src: '',\n             alt: '',\n             title: ''\n         }\n     }",
            "itemtype": "main"
        },
        "ContentProgressBar": {
            "name": "ContentProgressBar",
            "submodules": {},
            "classes": {
                "ContentProgressBar": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "src/capabilities/ACT_contentProgressBar.js",
            "line": 8,
            "description": "The 'ContentProgressBar' is a capability made to generate a progress bar and sync it with a targeted element.\n\nExample of 'SuperConf' use case:\n\n     {\n         id: 'video_progressbar',\n         type: 'content-progressbar',\n         env: ['html', 'backup'],\n         css: {\n             width: '900px',\n         },\n         progressBarConfig: {\n             value: 0, // initial value of progress bar\n             sourceId: 'videoPlayer' // id of video element\n         }\n     }",
            "itemtype": "main"
        },
        "ContentSwf": {
            "name": "ContentSwf",
            "submodules": {},
            "classes": {
                "ContentSwf": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "src/capabilities/ACT_contentSwf.js",
            "line": 8,
            "description": "The 'ContentSwf' is a capability made to generate a 'EMBED' or 'OBJECT' tag.\n\nExample of 'SuperConf' use case:\n\n\t{\n\t\tid: 'mpu_swf',\n\t\ttype: 'content-swf',\n\t\tclassNode: 'mpu_swf_class',\n\t\tenv: ['flash'],\n\t\tcss: {},\n\t\tswfConfig: {\n\t\t\tsrc: '',\n\t\t\twidth: 300,\n\t\t\theight: 250,\n\t\t\tflashvars: {\n\t\t\t\tclickTAG: 'https://www.yahoo.com'\n\t\t\t}\n\t\t}\n\t}",
            "itemtype": "main"
        },
        "ContentThirdParty": {
            "name": "ContentThirdParty",
            "submodules": {},
            "classes": {
                "ContentThirdParty": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "src/capabilities/ACT_contentThirdParty.js",
            "line": 8,
            "description": "The 'ContentThirdParty' is a capability made to generate a 'DIV' or an 'IFRAME' tag use as a container for a third party element.\n\nAvailable 'actions':\n- thirdpartyStart\n- thirdpartyStop\n- thirdpartyBroadcast\n\nAvailable 'triggers' for thirdparty tag:\n- expandEvent\n- contractEvent\n- closeEvent\n- openEvent\n\n\nExample of 'SuperConf' use case:\n\n     {\n         id: 'thirdparty_container',\n         type: 'content-thirdparty',\n         classNode: 'thirdparty_class',\n         env: ['html','flash'],\n         css: {\n             width:'970px',\n             height:'250px'\n         },\n         thirdPartyConfig:{\n             id: 'thirparty-id',\n             iframe: true\n         },\n         eventActions: [{\n             eventType: 'expandEvent',\n             actions: [\n                 {\n                     type: 'thirdpartyStart',\n                     to: 'thirdparty_container'\n                 },\n                 {\n                     type: 'thirdpartyBroadcast',\n                     to: 'thirdparty_container',\n                     name: 'expandedEvent'\n                 }\n             ]\n         }, {\n             eventType: 'contractEvent',\n             actions: [\n                 {\n                     type: 'thirdpartyStop',\n                     id: 'thirdparty_container'\n                 },\n                 {\n                     type: 'thirdpartyBroadcast',\n                     to: 'thirdparty_container',\n                     name: 'contractedEvent'\n                 }\n             ]\n         }]\n     }",
            "itemtype": "main"
        },
        "ContentVideoFlash": {
            "name": "ContentVideoFlash",
            "submodules": {},
            "classes": {
                "ContentVideoFlash": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "src/capabilities/ACT_contentVideoFlash.js",
            "line": 202,
            "itemtype": "main"
        },
        "ContentVideoHtml": {
            "name": "ContentVideoHtml",
            "submodules": {},
            "classes": {
                "ContentVideoHtml": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "src/capabilities/ACT_contentVideoHtml.js",
            "line": 305,
            "description": "Capability for rendering html5 video content.\nFeatures:\n     - rendering video tag with video source insides\n     - Broadcasting video progress and states\n\nExample for config object:\n\n    {\n        type: 'content-video-html',\n         id: 'video_id',\n         env: ['html'],\n         css: {\n             width: '400px',\n             height: '300px'\n           },\n         videoHtmlConfig:{\n             controls: true | false, // enable/disable video native control - default is true - optional\n             autoPlay: true | false, // enable/disable video auto play - default is false - optional\n             videoMuted: true | false, // disable/enable video sound - default is false - optional\n             posterImage: 'link_to_poster_image', // image to be show when video is loaded or before playing video - optional\n             videoMP4: 'link_to_mp4_video',\n             videoWebM: 'link_to_webm_video',\n             videoOGG: 'link_to_ogg_video',\n             videoOGV: 'link_to_ogv_video'\n         },\n         eventConfig: [{\n             eventType: 'start' | '25percent' | '50percent' | '75percent' | 'complete' | 'pause' | 'pausePlay'  | 'soundon' | 'soundoff' | 'replay',\n             actions: [{\n                 // ...\n             }]\n         }]\n     }\n\n     // Available actions for the actions queue:\n     {\n         type: 'video:start | video:stop | video:play | video:pause | video:soundOn | video:soundOff ',\n         videoId: 'video_id' // id of target video\n     }",
            "itemtype": "main"
        },
        "ContentYoutube": {
            "name": "ContentYoutube",
            "submodules": {},
            "classes": {
                "ContentYoutube": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "src/capabilities/ACT_contentYoutube.js",
            "line": 8,
            "description": "The 'ContentYoutube' is a capability made to generate a 'DIV' tag use as a container for the Youtube player.\n\nAvailable 'actions':\n- youtubeStart\n- youtubeStop\n- youtubePlay\n- youtubePause\n- youtubeMute\n- youtubeUnmute\n\nAvailable 'triggers':\n- pause\n- play\n- complete\n- error\n- ready\n- start\n- 25percent\n- 50percent\n- 75percent\n\nExample of 'SuperConf' use case:\n\n     {\n         id: 'youtube_player',\n         type: 'content-youtube',\n         classNode: 'youtube_class',\n         env: ['html', 'flash'],\n         css: {\n             width:'352px',\n             height:'198px'\n         },\n         youtubeConfig:{\n             width: '100%',\n             height: '100%',\n             videoId: 'GQQMLE4FuIQ',\n             suggestedQuality: 'default',\n             playerVars: {\n                 autoplay: 1,\n                 controls: 1,\n                 color: 'white',\n                 disablekb: 1,\n                 enablejsapi: 1,\n                 fs: 1,\n                 iv_load_policy: 3,\n                 modestbranding: 0,\n                 rel: 0,\n                 showinfo: 0,\n                 loop: 0\n             }\n         },\n         eventActions: [{\n             eventType: 'start',\n             actions: [\n                 {\n                     type: 'track',\n                     label: 'start'\n                 }\n             ]\n         }]\n     }",
            "itemtype": "main"
        },
        "ACT": {
            "name": "ACT",
            "submodules": {
                "undefined": 1
            },
            "classes": {
                "UA": 1,
                "ACT": 1,
                "VideoEvents": 1,
                "Capability": 1,
                "Class": 1,
                "CustomData": 1,
                "Debug": 1,
                "Dom": 1,
                "Event": 1,
                "Flash": 1,
                "Json": 1,
                "Lang": 1,
                "Util": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "src/library/ACT_util.js",
            "line": 16,
            "description": "The new ACT.js global namespace object. If the `ACT` object is already defined, the existing ACT object will only be overwritten\nIF the new one being loaded has a greater version than the existing one. Usage example is as follows:\n\n        ACT.define('name_of_module', [ 'required', 'sub', 'modules'], function (ACT) {\n            // ACT is the global reference to the ACT instance with all the required modules loaded.\n        });",
            "itemtype": "main",
            "requires": [
                "dom",
                "lang",
                "UA"
            ]
        },
        "LayersList": {
            "name": "LayersList",
            "submodules": {},
            "classes": {
                "LayersList": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "src/core/ACT_Layerslist.js",
            "line": 8,
            "description": "The 'LayersList' is a core module made to manage the layers functionalities.\nThis module is used in 'StandardAd'.",
            "itemtype": "main"
        },
        "Screen": {
            "name": "Screen",
            "submodules": {},
            "classes": {
                "Screen": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "src/core/ACT_Screen.js",
            "line": 8,
            "description": "The 'Screen' is a core module made to detect the screen size/event/orientation.\nThis module is used in 'StandardAd'.",
            "itemtype": "main"
        },
        "StandardAd": {
            "name": "StandardAd",
            "submodules": {},
            "classes": {
                "StandardAd": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/core/ACT_StandardAd.js",
            "line": 77
        },
        "Tracking": {
            "name": "Tracking",
            "submodules": {},
            "classes": {
                "Tracking": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/core/ACT_TrackingFacade.js",
            "line": 112,
            "description": "ACT Generic Tracking functionality. This tracking file is a facade for tracking. It can either be completely overwritten, given that the\noverwritten version supplies similar functionality, or used with a a configuration section that defines appropriate overwrites. By default,\nthis file will attempt to fire the tracking overwrite functions if they exist or simply return the tracking parameter set via the tracking complete event.\nfor interaction tracking. In which case you should listen for ```tracking:track:complete``` event, that will provide the outcome of the tracking event that was fired.\nThe contents of the data payload will be:"
        },
        "actionsQueue": {
            "name": "actionsQueue",
            "submodules": {},
            "classes": {
                "ActionsQueue": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/core/ACT_actionsQueue.js",
            "line": 8,
            "description": "Creates a new queue. A queue is a first-in-first-out (FIFO) data structure -\nitems are added to the end of the queue and removed from the front.\n<br/>\nProvide features:\n- register action definition\n- Add action to queue to be executed\n\nAction definition must be registered first like below example:\n\n    ACT.fire('register:Actions',\n       {\n           type: 'action_name', // must be unique name\n           argument: {\n               // list of argument accepted by this actions\n               arg1: {\n                   test: function(value) {\n                       // function to check the value of arg1\n                       // must return true or false\n                       return true;\n                   }\n               },\n               arg2: {\n                   test: function(value) {\n                       // function to check the value of arg2\n                       // must return true or false\n                       return true;\n                   }\n               }\n            },\n           proccess: function(data) {\n                //function to be executed when action is executed\n               // data is an object with passed arguments, e.g:\n               var arg1 = data.arg1;\n               var arg2 = data.arg2;\n           }\n       }\n    );\n\nAfter registered, action can be execute by adding it to actions queue:\n\n    ACT.fire('add:action',\n       {\n           type: 'unique_action_name',\n           arg1: [value], // value for arg1 must satify arg1's test function in action definition\n           arg2: [value], // value for arg2 must satify arg2's test function in action definition\n        }\n    );\n\nAs the queue work in async order, complete:action event must be fired before the next action can be executed\n\n       ACT.fire('complete:action');",
            "itemtype": "main",
            "requires": [
                "event",
                "lang"
            ],
            "global": ""
        },
        "Base": {
            "name": "Base",
            "submodules": {},
            "classes": {
                "Base": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/core/ACT_base.js",
            "line": 24,
            "description": "Base - starts up the basic ad framework\n\n    var conf = {\n        conf: {\n            tracking: {\n                id: ''\n            },\n            loadType: 'ready', // 'domready' or 'inline' defaults to '(on)load'\n            template: {\n                name: 'name_of_ad',\n                type: 'type_of_ad',\n                format: 'format_of_ad',\n                width: 300,\n                height: 250\n            },\n            inputData:{\n               type:'JSON',\n               id: 'myYT',\n               dataFeed: 'json_feed.js'\n           },\n           customData:{\n                \"layers.mpu.width\" : '500px'\n            }\n        },\n        superConf: 'mazda-ad-20150401',\n        extend:{\n            init: function () { ... },\n            ad_init: function () { ... },\n            happy: function () { ... }\n        }\n    }"
        },
        "Cookie": {
            "name": "Cookie",
            "submodules": {},
            "classes": {
                "Cookie": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/core/ACT_cookie.js",
            "line": 443,
            "description": "ACT Cookie functionality. Enables ads to set and get cookies.\n\n    var conf = {\n        expires: 172800000,\n        default_cookieName: 'CRZY',\n        path: '/',\n        domain: 'yahoo.com',\n        name: 'cookieName'\n        freq_cap : 1,\n        disabled: false\n    };\n    var cookie = new cookie( conf, this);"
        },
        "environment": {
            "name": "environment",
            "submodules": {},
            "classes": {
                "Environment": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/core/ACT_environment.js",
            "line": 86,
            "description": "Force browsers to play specific environments based on their capabilities,\ncurrently environment supported are flash, html, backup.\n<br/>\n__Default__ playing order is: HTML5 => Backup\nIn order to play flash, it must be force it\n<br/>\n\nSteps to follow in order to force an environment:\n<br/>\nAdd browser to be forced into configuration-object:\n\n    forceEnv = {\n        forcedBackupList: {\n            FireFox: \"*\",\n        },\n        forcedFlashList: {\n            Safari: \"*\"\n        },\n            forcedHTML5List: {\n        },\n        forcedMobileList: {\n        },\n        forcedTabletList: {\n        }\n    };\n\nAdd environment into capabilities env array, to associate them.\n\nBrowser can be chosen by using the following options:\n\nAll the browser versions:\n\n    // <browser-name>: '*'\n    Firefox: '*'\n\nSpecific browser version:\n\n    // <browser-name>: '<browser-version>'\n    Firefox: '30'\n\nGreate than a version:\n\n     // <browser-name>: '>=<browser-version>'\n     Firefox: '>=30'\n\nLower than a version:\n\n    // <browser-name>: '<=<browser-version>'\n    Firefox: '<=30'\n\nList of browser versions:\n\n    // <browser-name>: '<browser-version0>,<browser-version1>,<browser-version2>'\n    Firefox: '30,31,33'",
            "itemtype": "main",
            "requires": [
                "Event",
                "Lang",
                "Class",
                "UA"
            ],
            "global": ""
        },
        "LayerStandard": {
            "name": "LayerStandard",
            "submodules": {},
            "classes": {
                "LayerStandard": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "src/core/ACT_layerStandard.js",
            "line": 8,
            "description": "The 'LayerStandard' is a core module made to generate a parent 'DIV' tag container with a specific position/configuration.\nThis module is used in 'Layerslist'.",
            "itemtype": "main"
        },
        "Scaffolding": {
            "name": "Scaffolding",
            "submodules": {},
            "classes": {
                "Scaffolding": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "src/core/ACT_scaffolding.js",
            "line": 9,
            "description": "The 'Scaffolding' is a core module made to parse the object layer to html.\nThis module is used in 'layerStandard'.",
            "itemtype": "main"
        },
        "SecureDarla": {
            "name": "SecureDarla",
            "submodules": {},
            "classes": {
                "SecureDarla": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/core/ACT_secureDarla.js",
            "line": 215,
            "description": "ACT Wrapper for SecureDarla communication layer and ad registration methods.\n\n\tvar config = {\n\t\tname: 'name_of_ad',\n\t\ttype: 'type_of_ad',\n\t\tformat: 'format_of_ad',\n\t\twidth: 300,\n\t\theight: 250\n\t};\n\tvar ref = this; // optional\n\tvar SD = new ACT.SecureDarla(config, ref);"
        },
        "DwellTime": {
            "name": "DwellTime",
            "submodules": {},
            "classes": {
                "DwellTime": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "src/library/ACT_DwellTime.js",
            "line": 7,
            "description": "This module is helping tracking dwelltime for seletect dome element.\nFollowing IAB definition, dwelltime for desktop will be tracked as describe below\n- Start counting when mouse in target element\n- Stop counting when mouse leave target element\n- If mouse leave and come back within 2 seconds, continues counting\n- If mouse leave for more than 2 seconds, stop counting and send tracking label\n- If mouse leave after 10 minutes, the track will count as 10 minutes\n- Maximum counting time is 10 minutes\n\n```\n    // This example will start track dwelltime for ACT_mpu element\n    var target = document.getElementById('ACT_mpu');\n    var mpuDwellTimeTracker = new ACT.DwellTime({\n          'targetElement': target,\n          'targetName': 'mpu'\n       // some other custom config\n    });\n\n    // To stop tracking dwelltime\n    mpuDwellTimeTracker.destroy();\n```",
            "itemtype": "main"
        },
        "EnablerADTECH": {
            "name": "EnablerADTECH",
            "submodules": {},
            "classes": {},
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "src/library/ACT_Enabler.js",
            "line": 13,
            "description": "ACT EnablerADTECH\n\nEnabler Wrapper for AOL 1 ADTECH API.\n\n```\n    // Providing exposeADTECH `true` will create a reference in window.ADTECH = ACT.EnablerADTECH;\n    var conf = {\n        exposeADTECH: true\n    };\n    Enabler.setConfig( conf );\n```",
            "itemtype": "main"
        },
        "Enabler": {
            "name": "Enabler",
            "submodules": {},
            "classes": {
                "EnablerADTECH": 1,
                "Enabler": 1,
                "EnablerConfig": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "src/library/ACT_Enabler.js",
            "line": 2005,
            "description": "ACT Enabler\n\nEnabler takes a configuration object to initialize. Of-course it'll run in default mode if no config is provided.\nBelow, is a basic example of such a configuration Object.",
            "example": [
                "\n```\n    var conf = {\n        tracking: {\n            trackUnique: true\n        },\n        exitUrls: {\n            clickTAG: 'https://www.yahoo.com/?clickTAG=true',\n            clickTAG1: 'https://www.yahoo.com/?clickTAG=true',\n            clickTAG2: 'https://www.yahoo.com/?clickTAG=true'\n        },\n        trackingLabels: {\n            video1:25 : 'billboard_view_video1_25percent',\n            video1:50 : 'billboard_view_video1_50percent',\n            video1:75 : 'billboard_view_video1_75percent'\n        },\n        enablerInteractionTracking : false,\n        enablerTarget: 'http://cdn.path.here.com/ACT_Enabler.js',\n        eventPropagation: true || 'tracking' || 'redirect',\n        htmlRoot : 'http://cdn.path.here.com/'\n    };\n    Enabler.setConfig( conf );\n```"
            ],
            "itemtype": "main"
        },
        "IO": {
            "name": "IO",
            "submodules": {},
            "classes": {
                "IO": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "src/library/ACT_IO.js",
            "line": 10,
            "description": "The \"IO\" helper class to dynamically load files.",
            "itemtype": "main"
        }
    },
    "classes": {
        "CapabilitySkeleton": {
            "name": "CapabilitySkeleton",
            "shortname": "CapabilitySkeleton",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "CapabilitySkeleton",
            "namespace": "",
            "file": "src/capabilities/ACT_capability-skeleton.js",
            "line": 93,
            "mainName": "CapabilitySkeleton",
            "tag": "main",
            "itemtype": "main",
            "_main": true,
            "is_constructor": 1
        },
        "ContentAdobeEdge": {
            "name": "ContentAdobeEdge",
            "shortname": "ContentAdobeEdge",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ContentAdobeEdge",
            "namespace": "",
            "file": "src/capabilities/ACT_contentAdobeEdge.js",
            "line": 67,
            "description": "This capability will get the config for AdobeBride, rendering content and provide helper functions\nFeature including:\n- create AdobeBride composition\n-",
            "mainName": "ContentAdobeEdge",
            "tag": "main",
            "itemtype": "main",
            "_main": true,
            "is_constructor": 1
        },
        "ContentCarousel": {
            "name": "ContentCarousel",
            "shortname": "ContentCarousel",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ContentCarousel",
            "namespace": "",
            "file": "src/capabilities/ACT_contentCarousel.js",
            "line": 178,
            "description": "The 'ContentCarousel' is a capability made to render its contents into a carousel slideshow with actions available to move the slides\n\nAvailable 'actions':\n- carouselNextSlide\n- carouselPreviousSlide\n- carouselJumpToSlide\n\nAvailable 'triggers':\n- carouselAnimationStart\n- carouselAnimationComplete\n- carouselAnimationPanel[X]Play\n\nExample of 'SuperConf' use case:\n\n    {\n        id: 'carousel_one',\n        type: 'content-carousel',\n        classNode: 'mpu_container_class',\n        env: ['html','flash','backup'],\n        css: {\n          width: 300\n        },\n        ContentCarouselConfig: {\n           transitionTime: 500,\n           currentSlideId: 2\n         },\n        eventConfig: [],\n        content: []\n     }",
            "mainName": "ContentCarousel",
            "tag": "main",
            "itemtype": "main",
            "_main": true,
            "is_constructor": 1
        },
        "ContentContainer": {
            "name": "ContentContainer",
            "shortname": "ContentContainer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ContentContainer",
            "namespace": "",
            "file": "src/capabilities/ACT_contentContainer.js",
            "line": 326,
            "description": "The 'ContentContainer' is a capability made to generate a 'DIV' tag use as a container.\n\nAvailable 'actions':\n- openURL\n- showContainer\n- hideContainer\n- changeStyles\n\nAvailable 'triggers':\n- click\n- mouseenter\n- mouseleave\n\nExample of 'SuperConf' use case:\n```\n   {\n       id: 'mpu_container',\n       type: 'content-container',\n       classNode: 'mpu_container_class',\n       env: ['html','flash','backup'],\n       css: {\n           width:'350'\n       },\n       eventConfig: [{\n           eventType: 'click',\n           actions: [\n               {\n                   type: 'openURL',\n                   URLpath: 'https://www.yahoo.com',\n                   URLname: 'mpu_click_clicktag_open'\n               }\n           ],\n           timeTo: 2\n       }],\n       content: []\n   }\n```",
            "mainName": "ContentContainer",
            "tag": "main",
            "itemtype": "main",
            "_main": true,
            "is_constructor": 1
        },
        "ContentHtml5": {
            "name": "ContentHtml5",
            "shortname": "ContentHtml5",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ContentHtml5",
            "namespace": "",
            "file": "src/capabilities/ACT_contentHtml5.js",
            "line": 9,
            "description": "The 'ContentHtml5' is a capability made to generate a 'DIV' or an 'IFRAME' tag use for htlm5 assets.",
            "mainName": "ContentHtml5",
            "tag": "main",
            "itemtype": "main",
            "_main": true
        },
        "ContentImage": {
            "name": "ContentImage",
            "shortname": "ContentImage",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ContentImage",
            "namespace": "",
            "file": "src/capabilities/ACT_contentImage.js",
            "line": 8,
            "description": "The 'ContentImage' is a capability made to generate a 'IMG' tag.\n\nExample of 'SuperConf' use case:\n\n     {\n         id: 'mpu_image',\n         type: 'content-image',\n         classNode: 'mpu_image_class',\n         env: ['html','flash','backup'],\n         css: {\n             width: 300,\n             height: 250\n         },\n         imageConfig: {\n             src: '',\n             alt: '',\n             title: ''\n         }\n     }",
            "mainName": "ContentImage",
            "tag": "main",
            "itemtype": "main",
            "_main": true
        },
        "ContentProgressBar": {
            "name": "ContentProgressBar",
            "shortname": "ContentProgressBar",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ContentProgressBar",
            "namespace": "",
            "file": "src/capabilities/ACT_contentProgressBar.js",
            "line": 8,
            "description": "The 'ContentProgressBar' is a capability made to generate a progress bar and sync it with a targeted element.\n\nExample of 'SuperConf' use case:\n\n     {\n         id: 'video_progressbar',\n         type: 'content-progressbar',\n         env: ['html', 'backup'],\n         css: {\n             width: '900px',\n         },\n         progressBarConfig: {\n             value: 0, // initial value of progress bar\n             sourceId: 'videoPlayer' // id of video element\n         }\n     }",
            "mainName": "ContentProgressBar",
            "tag": "main",
            "itemtype": "main",
            "_main": true
        },
        "ContentSwf": {
            "name": "ContentSwf",
            "shortname": "ContentSwf",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ContentSwf",
            "namespace": "",
            "file": "src/capabilities/ACT_contentSwf.js",
            "line": 8,
            "description": "The 'ContentSwf' is a capability made to generate a 'EMBED' or 'OBJECT' tag.\n\nExample of 'SuperConf' use case:\n\n\t{\n\t\tid: 'mpu_swf',\n\t\ttype: 'content-swf',\n\t\tclassNode: 'mpu_swf_class',\n\t\tenv: ['flash'],\n\t\tcss: {},\n\t\tswfConfig: {\n\t\t\tsrc: '',\n\t\t\twidth: 300,\n\t\t\theight: 250,\n\t\t\tflashvars: {\n\t\t\t\tclickTAG: 'https://www.yahoo.com'\n\t\t\t}\n\t\t}\n\t}",
            "mainName": "ContentSwf",
            "tag": "main",
            "itemtype": "main",
            "_main": true
        },
        "ContentThirdParty": {
            "name": "ContentThirdParty",
            "shortname": "ContentThirdParty",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ContentThirdParty",
            "namespace": "",
            "file": "src/capabilities/ACT_contentThirdParty.js",
            "line": 8,
            "description": "The 'ContentThirdParty' is a capability made to generate a 'DIV' or an 'IFRAME' tag use as a container for a third party element.\n\nAvailable 'actions':\n- thirdpartyStart\n- thirdpartyStop\n- thirdpartyBroadcast\n\nAvailable 'triggers' for thirdparty tag:\n- expandEvent\n- contractEvent\n- closeEvent\n- openEvent\n\n\nExample of 'SuperConf' use case:\n\n     {\n         id: 'thirdparty_container',\n         type: 'content-thirdparty',\n         classNode: 'thirdparty_class',\n         env: ['html','flash'],\n         css: {\n             width:'970px',\n             height:'250px'\n         },\n         thirdPartyConfig:{\n             id: 'thirparty-id',\n             iframe: true\n         },\n         eventActions: [{\n             eventType: 'expandEvent',\n             actions: [\n                 {\n                     type: 'thirdpartyStart',\n                     to: 'thirdparty_container'\n                 },\n                 {\n                     type: 'thirdpartyBroadcast',\n                     to: 'thirdparty_container',\n                     name: 'expandedEvent'\n                 }\n             ]\n         }, {\n             eventType: 'contractEvent',\n             actions: [\n                 {\n                     type: 'thirdpartyStop',\n                     id: 'thirdparty_container'\n                 },\n                 {\n                     type: 'thirdpartyBroadcast',\n                     to: 'thirdparty_container',\n                     name: 'contractedEvent'\n                 }\n             ]\n         }]\n     }",
            "mainName": "ContentThirdParty",
            "tag": "main",
            "itemtype": "main",
            "_main": true
        },
        "ContentVideoFlash": {
            "name": "ContentVideoFlash",
            "shortname": "ContentVideoFlash",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ContentVideoFlash",
            "namespace": "",
            "file": "src/capabilities/ACT_contentVideoFlash.js",
            "line": 202,
            "mainName": "ContentVideoFlash",
            "tag": "main",
            "itemtype": "main",
            "_main": true,
            "extends": "Base",
            "is_constructor": 1
        },
        "ContentVideoHtml": {
            "name": "ContentVideoHtml",
            "shortname": "ContentVideoHtml",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ContentVideoHtml",
            "namespace": "",
            "file": "src/capabilities/ACT_contentVideoHtml.js",
            "line": 305,
            "description": "Capability for rendering html5 video content.\nFeatures:\n     - rendering video tag with video source insides\n     - Broadcasting video progress and states\n\nExample for config object:\n\n    {\n        type: 'content-video-html',\n         id: 'video_id',\n         env: ['html'],\n         css: {\n             width: '400px',\n             height: '300px'\n           },\n         videoHtmlConfig:{\n             controls: true | false, // enable/disable video native control - default is true - optional\n             autoPlay: true | false, // enable/disable video auto play - default is false - optional\n             videoMuted: true | false, // disable/enable video sound - default is false - optional\n             posterImage: 'link_to_poster_image', // image to be show when video is loaded or before playing video - optional\n             videoMP4: 'link_to_mp4_video',\n             videoWebM: 'link_to_webm_video',\n             videoOGG: 'link_to_ogg_video',\n             videoOGV: 'link_to_ogv_video'\n         },\n         eventConfig: [{\n             eventType: 'start' | '25percent' | '50percent' | '75percent' | 'complete' | 'pause' | 'pausePlay'  | 'soundon' | 'soundoff' | 'replay',\n             actions: [{\n                 // ...\n             }]\n         }]\n     }\n\n     // Available actions for the actions queue:\n     {\n         type: 'video:start | video:stop | video:play | video:pause | video:soundOn | video:soundOff ',\n         videoId: 'video_id' // id of target video\n     }",
            "mainName": "ContentVideoHtml",
            "tag": "main",
            "itemtype": "main",
            "_main": true,
            "is_constructor": 1
        },
        "ContentYoutube": {
            "name": "ContentYoutube",
            "shortname": "ContentYoutube",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ContentYoutube",
            "namespace": "",
            "file": "src/capabilities/ACT_contentYoutube.js",
            "line": 8,
            "description": "The 'ContentYoutube' is a capability made to generate a 'DIV' tag use as a container for the Youtube player.\n\nAvailable 'actions':\n- youtubeStart\n- youtubeStop\n- youtubePlay\n- youtubePause\n- youtubeMute\n- youtubeUnmute\n\nAvailable 'triggers':\n- pause\n- play\n- complete\n- error\n- ready\n- start\n- 25percent\n- 50percent\n- 75percent\n\nExample of 'SuperConf' use case:\n\n     {\n         id: 'youtube_player',\n         type: 'content-youtube',\n         classNode: 'youtube_class',\n         env: ['html', 'flash'],\n         css: {\n             width:'352px',\n             height:'198px'\n         },\n         youtubeConfig:{\n             width: '100%',\n             height: '100%',\n             videoId: 'GQQMLE4FuIQ',\n             suggestedQuality: 'default',\n             playerVars: {\n                 autoplay: 1,\n                 controls: 1,\n                 color: 'white',\n                 disablekb: 1,\n                 enablejsapi: 1,\n                 fs: 1,\n                 iv_load_policy: 3,\n                 modestbranding: 0,\n                 rel: 0,\n                 showinfo: 0,\n                 loop: 0\n             }\n         },\n         eventActions: [{\n             eventType: 'start',\n             actions: [\n                 {\n                     type: 'track',\n                     label: 'start'\n                 }\n             ]\n         }]\n     }",
            "mainName": "ContentYoutube",
            "tag": "main",
            "itemtype": "main",
            "_main": true
        },
        "ACT": {
            "name": "ACT",
            "shortname": "ACT",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ACT",
            "namespace": "",
            "file": "src/core/ACT.js",
            "line": 9,
            "description": "The new ACT.js global namespace object. If the `ACT` object is already defined, the existing ACT object will only be overwritten\nIF the new one being loaded has a greater version than the existing one. Usage example is as follows:\n\n        ACT.define('name_of_module', [ 'required', 'sub', 'modules'], function (ACT) {\n            // ACT is the global reference to the ACT instance with all the required modules loaded.\n        });",
            "mainName": "ACT",
            "tag": "main",
            "itemtype": "main",
            "_main": true
        },
        "LayersList": {
            "name": "LayersList",
            "shortname": "LayersList",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "LayersList",
            "namespace": "",
            "file": "src/core/ACT_Layerslist.js",
            "line": 8,
            "description": "The 'LayersList' is a core module made to manage the layers functionalities.\nThis module is used in 'StandardAd'.",
            "mainName": "LayersList",
            "tag": "main",
            "itemtype": "main",
            "_main": true
        },
        "Screen": {
            "name": "Screen",
            "shortname": "Screen",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Screen",
            "namespace": "",
            "file": "src/core/ACT_Screen.js",
            "line": 8,
            "description": "The 'Screen' is a core module made to detect the screen size/event/orientation.\nThis module is used in 'StandardAd'.",
            "mainName": "Screen",
            "tag": "main",
            "itemtype": "main",
            "_main": true
        },
        "StandardAd": {
            "name": "StandardAd",
            "shortname": "StandardAd",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "StandardAd",
            "namespace": "",
            "file": "src/core/ACT_StandardAd.js",
            "line": 77,
            "params": [
                {
                    "name": "config",
                    "description": "",
                    "type": "Object"
                }
            ]
        },
        "Tracking": {
            "name": "Tracking",
            "shortname": "Tracking",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Tracking",
            "namespace": "",
            "file": "src/core/ACT_TrackingFacade.js",
            "line": 112,
            "description": "ACT Generic Tracking functionality. This tracking file is a facade for tracking. It can either be completely overwritten, given that the\noverwritten version supplies similar functionality, or used with a a configuration section that defines appropriate overwrites. By default,\nthis file will attempt to fire the tracking overwrite functions if they exist or simply return the tracking parameter set via the tracking complete event.\nfor interaction tracking. In which case you should listen for ```tracking:track:complete``` event, that will provide the outcome of the tracking event that was fired.\nThe contents of the data payload will be:",
            "example": [
                "\n    // Interaction Track :\n    returns: {Object} {\n            overwriteFired: false, // Did overwrite function get fired true if yes, false otherwise\n            trackingString: trackingString, // Tracking String provided\n            trackingID: trackingID, // Tracking ID provided or generated\n         result: {Mixed} // Result of calling the provided interaction tracking function.\n    };\n\n    // Redirect Track:\n    returns: {String} The generated redirect string for the provided URL.",
                "\n    // Example of the config that can be passed in\n    var config = {\n        adid: '',\n        unique: 'u_',\n        trackingFunctions: {\n            overwrite: true / false,\n            redirect: function(trackingString, trackingID, redirectURL) { .... }\n            interaction: function(trackingString) { ... }\n        }\n    };"
            ],
            "requires": [
                "Util",
                "Lang",
                "Debug"
            ]
        },
        "ActionsQueue": {
            "name": "ActionsQueue",
            "shortname": "ActionsQueue",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "actionsQueue",
            "namespace": "",
            "file": "src/core/ACT_actionsQueue.js",
            "line": 8,
            "description": "Creates a new queue. A queue is a first-in-first-out (FIFO) data structure -\nitems are added to the end of the queue and removed from the front.\n<br/>\nProvide features:\n- register action definition\n- Add action to queue to be executed\n\nAction definition must be registered first like below example:\n\n    ACT.fire('register:Actions',\n       {\n           type: 'action_name', // must be unique name\n           argument: {\n               // list of argument accepted by this actions\n               arg1: {\n                   test: function(value) {\n                       // function to check the value of arg1\n                       // must return true or false\n                       return true;\n                   }\n               },\n               arg2: {\n                   test: function(value) {\n                       // function to check the value of arg2\n                       // must return true or false\n                       return true;\n                   }\n               }\n            },\n           proccess: function(data) {\n                //function to be executed when action is executed\n               // data is an object with passed arguments, e.g:\n               var arg1 = data.arg1;\n               var arg2 = data.arg2;\n           }\n       }\n    );\n\nAfter registered, action can be execute by adding it to actions queue:\n\n    ACT.fire('add:action',\n       {\n           type: 'unique_action_name',\n           arg1: [value], // value for arg1 must satify arg1's test function in action definition\n           arg2: [value], // value for arg2 must satify arg2's test function in action definition\n        }\n    );\n\nAs the queue work in async order, complete:action event must be fired before the next action can be executed\n\n       ACT.fire('complete:action');",
            "mainName": "ActionsQueue",
            "tag": "main",
            "itemtype": "main",
            "_main": true
        },
        "Base": {
            "name": "Base",
            "shortname": "Base",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Base",
            "namespace": "",
            "file": "src/core/ACT_base.js",
            "line": 24,
            "description": "Base - starts up the basic ad framework\n\n    var conf = {\n        conf: {\n            tracking: {\n                id: ''\n            },\n            loadType: 'ready', // 'domready' or 'inline' defaults to '(on)load'\n            template: {\n                name: 'name_of_ad',\n                type: 'type_of_ad',\n                format: 'format_of_ad',\n                width: 300,\n                height: 250\n            },\n            inputData:{\n               type:'JSON',\n               id: 'myYT',\n               dataFeed: 'json_feed.js'\n           },\n           customData:{\n                \"layers.mpu.width\" : '500px'\n            }\n        },\n        superConf: 'mazda-ad-20150401',\n        extend:{\n            init: function () { ... },\n            ad_init: function () { ... },\n            happy: function () { ... }\n        }\n    }",
            "requires": [
                "event",
                "cookie",
                "lang",
                "tracking",
                "securedarla",
                "standardad",
                "actionsqueue"
            ],
            "params": [
                {
                    "name": "config",
                    "description": "-\n  conf: Basic configuration overwrites/definitions ( tracking, cookie, etc )\n  superConf: A name of the super conf that we need to load in\n  inputData: Inject dynamic data and use it in shortcuts to override configuration object.\n  customData: Shortcuts to overwrite super configuration attributes\n  extend : Set of functions to execute - init, ad_init etc.",
                    "type": "Object"
                }
            ]
        },
        "Cookie": {
            "name": "Cookie",
            "shortname": "Cookie",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Cookie",
            "namespace": "",
            "file": "src/core/ACT_cookie.js",
            "line": 443,
            "description": "ACT Cookie functionality. Enables ads to set and get cookies.\n\n    var conf = {\n        expires: 172800000,\n        default_cookieName: 'CRZY',\n        path: '/',\n        domain: 'yahoo.com',\n        name: 'cookieName'\n        freq_cap : 1,\n        disabled: false\n    };\n    var cookie = new cookie( conf, this);",
            "requires": [
                "json",
                "lang",
                "event",
                "debug"
            ]
        },
        "Environment": {
            "name": "Environment",
            "shortname": "Environment",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "environment",
            "namespace": "",
            "file": "src/core/ACT_environment.js",
            "line": 86,
            "description": "Force browsers to play specific environments based on their capabilities,\ncurrently environment supported are flash, html, backup.\n<br/>\n__Default__ playing order is: HTML5 => Backup\nIn order to play flash, it must be force it\n<br/>\n\nSteps to follow in order to force an environment:\n<br/>\nAdd browser to be forced into configuration-object:\n\n    forceEnv = {\n        forcedBackupList: {\n            FireFox: \"*\",\n        },\n        forcedFlashList: {\n            Safari: \"*\"\n        },\n            forcedHTML5List: {\n        },\n        forcedMobileList: {\n        },\n        forcedTabletList: {\n        }\n    };\n\nAdd environment into capabilities env array, to associate them.\n\nBrowser can be chosen by using the following options:\n\nAll the browser versions:\n\n    // <browser-name>: '*'\n    Firefox: '*'\n\nSpecific browser version:\n\n    // <browser-name>: '<browser-version>'\n    Firefox: '30'\n\nGreate than a version:\n\n     // <browser-name>: '>=<browser-version>'\n     Firefox: '>=30'\n\nLower than a version:\n\n    // <browser-name>: '<=<browser-version>'\n    Firefox: '<=30'\n\nList of browser versions:\n\n    // <browser-name>: '<browser-version0>,<browser-version1>,<browser-version2>'\n    Firefox: '30,31,33'",
            "mainName": "Environment",
            "tag": "main",
            "itemtype": "main",
            "_main": true,
            "params": [
                {
                    "name": "config",
                    "description": "",
                    "type": "Object"
                }
            ]
        },
        "LayerStandard": {
            "name": "LayerStandard",
            "shortname": "LayerStandard",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "LayerStandard",
            "namespace": "",
            "file": "src/core/ACT_layerStandard.js",
            "line": 8,
            "description": "The 'LayerStandard' is a core module made to generate a parent 'DIV' tag container with a specific position/configuration.\nThis module is used in 'Layerslist'.",
            "mainName": "LayerStandard",
            "tag": "main",
            "itemtype": "main",
            "_main": true
        },
        "Scaffolding": {
            "name": "Scaffolding",
            "shortname": "Scaffolding",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Scaffolding",
            "namespace": "",
            "file": "src/core/ACT_scaffolding.js",
            "line": 9,
            "description": "The 'Scaffolding' is a core module made to parse the object layer to html.\nThis module is used in 'layerStandard'.",
            "mainName": "Scaffolding",
            "tag": "main",
            "itemtype": "main",
            "_main": true
        },
        "SecureDarla": {
            "name": "SecureDarla",
            "shortname": "SecureDarla",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "SecureDarla",
            "namespace": "",
            "file": "src/core/ACT_secureDarla.js",
            "line": 215,
            "description": "ACT Wrapper for SecureDarla communication layer and ad registration methods.\n\n\tvar config = {\n\t\tname: 'name_of_ad',\n\t\ttype: 'type_of_ad',\n\t\tformat: 'format_of_ad',\n\t\twidth: 300,\n\t\theight: 250\n\t};\n\tvar ref = this; // optional\n\tvar SD = new ACT.SecureDarla(config, ref);",
            "params": [
                {
                    "name": "config",
                    "description": "Object defining simple minimum data for the ad.",
                    "type": "Object"
                },
                {
                    "name": "ref",
                    "description": "Reference to the parent object that is instantiating secureDarla. Optional.",
                    "type": "Object"
                }
            ],
            "requires": [
                "Lang",
                "Event",
                "Debug"
            ]
        },
        "DwellTime": {
            "name": "DwellTime",
            "shortname": "DwellTime",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "DwellTime",
            "namespace": "",
            "file": "src/library/ACT_DwellTime.js",
            "line": 7,
            "description": "This module is helping tracking dwelltime for seletect dome element.\nFollowing IAB definition, dwelltime for desktop will be tracked as describe below\n- Start counting when mouse in target element\n- Stop counting when mouse leave target element\n- If mouse leave and come back within 2 seconds, continues counting\n- If mouse leave for more than 2 seconds, stop counting and send tracking label\n- If mouse leave after 10 minutes, the track will count as 10 minutes\n- Maximum counting time is 10 minutes\n\n```\n    // This example will start track dwelltime for ACT_mpu element\n    var target = document.getElementById('ACT_mpu');\n    var mpuDwellTimeTracker = new ACT.DwellTime({\n          'targetElement': target,\n          'targetName': 'mpu'\n       // some other custom config\n    });\n\n    // To stop tracking dwelltime\n    mpuDwellTimeTracker.destroy();\n```",
            "mainName": "DwellTime",
            "tag": "main",
            "itemtype": "main",
            "_main": true
        },
        "EnablerADTECH": {
            "name": "EnablerADTECH",
            "shortname": "EnablerADTECH",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Enabler",
            "namespace": "",
            "file": "src/library/ACT_Enabler.js",
            "line": 13,
            "description": "ACT EnablerADTECH\n\nEnabler Wrapper for AOL 1 ADTECH API.\n\n```\n    // Providing exposeADTECH `true` will create a reference in window.ADTECH = ACT.EnablerADTECH;\n    var conf = {\n        exposeADTECH: true\n    };\n    Enabler.setConfig( conf );\n```",
            "mainName": "EnablerADTECH",
            "tag": "main",
            "itemtype": "main",
            "_main": true
        },
        "Enabler": {
            "name": "Enabler",
            "shortname": "Enabler",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Enabler",
            "namespace": "",
            "file": "src/library/ACT_Enabler.js",
            "line": 190,
            "description": "ACT Enabler\n\nEnabler takes a configuration object to initialize. Of-course it'll run in default mode if no config is provided.\nBelow, is a basic example of such a configuration Object.",
            "example": [
                "\n```\n    var conf = {\n        tracking: {\n            trackUnique: true\n        },\n        exitUrls: {\n            clickTAG: 'https://www.yahoo.com/?clickTAG=true',\n            clickTAG1: 'https://www.yahoo.com/?clickTAG=true',\n            clickTAG2: 'https://www.yahoo.com/?clickTAG=true'\n        },\n        trackingLabels: {\n            video1:25 : 'billboard_view_video1_25percent',\n            video1:50 : 'billboard_view_video1_50percent',\n            video1:75 : 'billboard_view_video1_75percent'\n        },\n        enablerInteractionTracking : false,\n        enablerTarget: 'http://cdn.path.here.com/ACT_Enabler.js',\n        eventPropagation: true || 'tracking' || 'redirect',\n        htmlRoot : 'http://cdn.path.here.com/'\n    };\n    Enabler.setConfig( conf );\n```"
            ],
            "mainName": "Enabler",
            "tag": "main",
            "itemtype": "main",
            "_main": true
        },
        "EnablerConfig": {
            "name": "EnablerConfig",
            "shortname": "EnablerConfig",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Enabler",
            "namespace": "",
            "file": "src/library/ACT_Enabler.js",
            "line": 2005,
            "description": "Enabler Config Object contains all of the configuration options for this `Enabler` instance.\nThis object is supplied by the implementer when using ACT Enabler.\nProperties have default values if they are not supplied by the implementer.\n\n```\n    var conf = {\n        enableConsole: false,\n        frameId: '',\n        actTracking: {},\n        trackingLabels: {},\n        enablerInteractionTracking: false,\n        eventPropagation: false,\n        callbacks: [],\n        countersList: {},\n        eventQueue: {},\n        exitUrls: {},\n        htmlRoot: '',\n        initialized: false,\n        pageLoaded: false,\n        timerCollection: {},\n        videoTracking: {},\n        videoListener: null,\n        exposeADTECH: false,\n        currentEnv: 'generic',\n        visible: false,\n        expand: {\n            containerState: '',\n            useCustomClose: false,\n            expandingPixelOffsets: {},\n            floatingPixelDimensions: {},\n            isMultiDirectional: false,\n            startExpanded: false,\n            expandDirection: 'tl',\n            fsExpandWidth: 0,\n            fsExpandHeight: 0\n        }\n    };\n```",
            "static": 1
        },
        "IO": {
            "name": "IO",
            "shortname": "IO",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IO",
            "namespace": "",
            "file": "src/library/ACT_IO.js",
            "line": 10,
            "description": "The \"IO\" helper class to dynamically load files.",
            "mainName": "IO",
            "tag": "main",
            "itemtype": "main",
            "_main": true
        },
        "UA": {
            "name": "UA",
            "shortname": "UA",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ACT",
            "namespace": "",
            "file": "src/library/ACT_UA.js",
            "line": 326,
            "description": "User Agent Detection - UA\n\n    var env = ACT.UA;\n    env.browser;\n    env.os;\n    env.flash;\n    env.isHtml5Supported;\n    env.html;",
            "requires": [
                "lang"
            ]
        },
        "VideoEvents": {
            "name": "VideoEvents",
            "shortname": "VideoEvents",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ACT",
            "namespace": "",
            "file": "src/library/ACT_VideoEvents.js",
            "line": 10,
            "description": "Video Event - A library that fires off events based on video progress / actions taken in an HTML Video Tag.",
            "requires": [
                "event",
                "lang",
                "dom"
            ]
        },
        "Capability": {
            "name": "Capability",
            "shortname": "Capability",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ACT",
            "namespace": "",
            "file": "src/library/ACT_capability.js",
            "line": 15,
            "description": "Capability object."
        },
        "Class": {
            "name": "Class",
            "shortname": "Class",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ACT",
            "namespace": "",
            "file": "src/library/ACT_class.js",
            "line": 18,
            "description": "Class object."
        },
        "CustomData": {
            "name": "CustomData",
            "shortname": "CustomData",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ACT",
            "namespace": "",
            "file": "src/library/ACT_customData.js",
            "line": 245,
            "description": "ACT CustomData Utilities and Helpers",
            "requires": [
                "lang",
                "util"
            ],
            "static": 1
        },
        "Debug": {
            "name": "Debug",
            "shortname": "Debug",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ACT",
            "namespace": "",
            "file": "src/library/ACT_debug.js",
            "line": 13,
            "description": "ACT Debug Module, essentially a wrapper for console: log, warn, error and info.\n\n\tvar debug = ACT.Debug;\n\tdebug.log(\"Log message here\");",
            "is_constructor": 1,
            "static": 1
        },
        "Dom": {
            "name": "Dom",
            "shortname": "Dom",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ACT",
            "namespace": "",
            "file": "src/library/ACT_dom.js",
            "line": 17,
            "description": "ACT DOM Utilities and Helpers",
            "requires": [
                "lang",
                "UA"
            ],
            "static": 1
        },
        "Event": {
            "name": "Event",
            "shortname": "Event",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ACT",
            "namespace": "",
            "file": "src/library/ACT_event.js",
            "line": 45,
            "description": "Event Utilities / Helpers",
            "requires": [
                "lang"
            ]
        },
        "Flash": {
            "name": "Flash",
            "shortname": "Flash",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ACT",
            "namespace": "",
            "file": "src/library/ACT_flash.js",
            "line": 92,
            "description": "Flash Embed Library."
        },
        "Json": {
            "name": "Json",
            "shortname": "Json",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ACT",
            "namespace": "",
            "file": "src/library/ACT_json.js",
            "line": 416,
            "description": "JSON functionality for the ACT Framework. Most of the code in this file uses Public Domain code from https://github.com/douglascrockford/JSON-js/blob/master/json_parse.js"
        },
        "Lang": {
            "name": "Lang",
            "shortname": "Lang",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ACT",
            "namespace": "",
            "file": "src/library/ACT_lang.js",
            "line": 19,
            "description": "ACT Language Additions - A singleton that adds functionality / ease of use.",
            "optional": "debug"
        },
        "Util": {
            "name": "Util",
            "shortname": "Util",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ACT",
            "namespace": "",
            "file": "src/library/ACT_util.js",
            "line": 16,
            "description": "ACT AD Utilities",
            "static": 1
        }
    },
    "classitems": [
        {
            "file": "src/capabilities/ACT_capability-skeleton.js",
            "line": 25,
            "description": "This is a custom event name call by the queue\nwhen the related action has been fired",
            "class": "CapabilitySkeleton",
            "module": "CapabilitySkeleton"
        },
        {
            "file": "src/capabilities/ACT_capability-skeleton.js",
            "line": 31,
            "description": "This is a custom global event name call by the\ncapability when the code has been processed",
            "class": "CapabilitySkeleton",
            "module": "CapabilitySkeleton"
        },
        {
            "file": "src/capabilities/ACT_capability-skeleton.js",
            "line": 44,
            "description": "This test is passed by the queue in order to\ncheck the input data",
            "class": "CapabilitySkeleton",
            "module": "CapabilitySkeleton"
        },
        {
            "file": "src/capabilities/ACT_capability-skeleton.js",
            "line": 54,
            "description": "This test is passed by the queue in order to\ncheck the input data",
            "class": "CapabilitySkeleton",
            "module": "CapabilitySkeleton"
        },
        {
            "file": "src/capabilities/ACT_capability-skeleton.js",
            "line": 64,
            "description": "This test is passed by the queue in order to\ncheck the input data",
            "class": "CapabilitySkeleton",
            "module": "CapabilitySkeleton"
        },
        {
            "file": "src/capabilities/ACT_capability-skeleton.js",
            "line": 77,
            "description": "This is a callback executed at the end of the\nprocess to inform the queue that the next\naction is ready to go",
            "class": "CapabilitySkeleton",
            "module": "CapabilitySkeleton"
        },
        {
            "file": "src/capabilities/ACT_capability-skeleton.js",
            "line": 102,
            "itemtype": "attribute",
            "name": "NAME",
            "type": "String",
            "class": "CapabilitySkeleton",
            "module": "CapabilitySkeleton"
        },
        {
            "file": "src/capabilities/ACT_capability-skeleton.js",
            "line": 122,
            "description": "Function to initialize event listeners for this instance",
            "itemtype": "method",
            "name": "initializeListeners",
            "class": "CapabilitySkeleton",
            "module": "CapabilitySkeleton"
        },
        {
            "file": "src/capabilities/ACT_capability-skeleton.js",
            "line": 129,
            "description": "All the listeners are declared and stored here\nin order to be unsuscribe is the node is\ndestroyed.",
            "class": "CapabilitySkeleton",
            "module": "CapabilitySkeleton"
        },
        {
            "file": "src/capabilities/ACT_capability-skeleton.js",
            "line": 136,
            "description": "This is a custom global event name call by the\nqueue when the Ad has to be stop",
            "class": "CapabilitySkeleton",
            "module": "CapabilitySkeleton"
        },
        {
            "file": "src/capabilities/ACT_capability-skeleton.js",
            "line": 144,
            "description": "This is a custom global event name call by the\nqueue when the Ad has to be resize accordingly\nto the screen if the resize has been set in\nthe config object",
            "class": "CapabilitySkeleton",
            "module": "CapabilitySkeleton"
        },
        {
            "file": "src/capabilities/ACT_capability-skeleton.js",
            "line": 156,
            "description": "Event trigger by the queue in order to execute\nthe logic inside the capability",
            "class": "CapabilitySkeleton",
            "module": "CapabilitySkeleton"
        },
        {
            "file": "src/capabilities/ACT_capability-skeleton.js",
            "line": 168,
            "description": "Render the node from given config object, environment and orientation state",
            "itemtype": "method",
            "name": "renderContent",
            "params": [
                {
                    "name": "configObject",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "env",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "orientation",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "node",
                "type": "HTMLElement"
            },
            "class": "CapabilitySkeleton",
            "module": "CapabilitySkeleton"
        },
        {
            "file": "src/capabilities/ACT_capability-skeleton.js",
            "line": 189,
            "itemtype": "method",
            "name": "getContent",
            "params": [
                {
                    "name": "env",
                    "description": "Environment for rendering content such as html/flash/backup",
                    "type": "String"
                },
                {
                    "name": "orientation",
                    "description": "Orientation of current device such as landscape and portraits for mobile",
                    "type": "String"
                }
            ],
            "return": {
                "description": "node",
                "type": "HTMLElement"
            },
            "class": "CapabilitySkeleton",
            "module": "CapabilitySkeleton"
        },
        {
            "file": "src/capabilities/ACT_capability-skeleton.js",
            "line": 204,
            "description": "Function to be called when the instance is destroyed",
            "itemtype": "method",
            "name": "destructor",
            "class": "CapabilitySkeleton",
            "module": "CapabilitySkeleton"
        },
        {
            "file": "src/capabilities/ACT_capability-skeleton.js",
            "line": 217,
            "itemtype": "method",
            "name": "changeStyles",
            "params": [
                {
                    "name": "styles,",
                    "description": "information of the style to apply to node",
                    "type": "Object"
                },
                {
                    "name": "done",
                    "description": "Optional function executed once the logic is done",
                    "type": "Function"
                }
            ],
            "class": "CapabilitySkeleton",
            "module": "CapabilitySkeleton"
        },
        {
            "file": "src/capabilities/ACT_contentAdobeEdge.js",
            "line": 76,
            "itemtype": "attribute",
            "name": "NAME",
            "type": "String",
            "class": "ContentAdobeEdge",
            "module": "ContentAdobeEdge"
        },
        {
            "file": "src/capabilities/ACT_contentAdobeEdge.js",
            "line": 82,
            "attributes": "instanceId",
            "class": "ContentAdobeEdge",
            "module": "ContentAdobeEdge"
        },
        {
            "file": "src/capabilities/ACT_contentAdobeEdge.js",
            "line": 87,
            "itemtype": "attribute",
            "name": "eventActions",
            "class": "ContentAdobeEdge",
            "module": "ContentAdobeEdge"
        },
        {
            "file": "src/capabilities/ACT_contentAdobeEdge.js",
            "line": 92,
            "description": "Reference to AdobeEdge composition rendered by the instance",
            "itemtype": "attribute",
            "name": "composition",
            "class": "ContentAdobeEdge",
            "module": "ContentAdobeEdge"
        },
        {
            "file": "src/capabilities/ACT_contentAdobeEdge.js",
            "line": 116,
            "description": "Function to initialize event listeners for this instance",
            "itemtype": "method",
            "name": "initializeListeners",
            "class": "ContentAdobeEdge",
            "module": "ContentAdobeEdge"
        },
        {
            "file": "src/capabilities/ACT_contentAdobeEdge.js",
            "line": 143,
            "description": "Function to map eventTriggers keyword with list of associate actions defined in config object",
            "itemtype": "method",
            "name": "initializeEventTriggers",
            "class": "ContentAdobeEdge",
            "module": "ContentAdobeEdge"
        },
        {
            "file": "src/capabilities/ACT_contentAdobeEdge.js",
            "line": 165,
            "description": "Render the node from given config object, environment and orientation state",
            "itemtype": "method",
            "name": "renderContent",
            "params": [
                {
                    "name": "configObject",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "env",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "orientation",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "node",
                "type": "HTMLElement"
            },
            "class": "ContentAdobeEdge",
            "module": "ContentAdobeEdge"
        },
        {
            "file": "src/capabilities/ACT_contentAdobeEdge.js",
            "line": 180,
            "itemtype": "method",
            "name": "getContent",
            "params": [
                {
                    "name": "env",
                    "description": "Environment for rendering content such as html/flash/backup",
                    "type": "String"
                },
                {
                    "name": "orientation",
                    "description": "Orientation of current device such as landscape and portraits for mobile",
                    "type": "String"
                }
            ],
            "return": {
                "description": "node",
                "type": "HTMLElement"
            },
            "class": "ContentAdobeEdge",
            "module": "ContentAdobeEdge"
        },
        {
            "file": "src/capabilities/ACT_contentAdobeEdge.js",
            "line": 197,
            "description": "Function to be called when the instance is destroyed",
            "itemtype": "method",
            "name": "destructor",
            "class": "ContentAdobeEdge",
            "module": "ContentAdobeEdge"
        },
        {
            "file": "src/capabilities/ACT_contentAdobeEdge.js",
            "line": 210,
            "description": "Replay animation of AdobeEdge composition",
            "itemtype": "method",
            "name": "replay",
            "class": "ContentAdobeEdge",
            "module": "ContentAdobeEdge"
        },
        {
            "file": "src/capabilities/ACT_contentAdobeEdge.js",
            "line": 224,
            "description": "function to create AdobeEdge composition",
            "itemtype": "method",
            "name": "createAdobeEdgeComposition",
            "class": "ContentAdobeEdge",
            "module": "ContentAdobeEdge"
        },
        {
            "file": "src/capabilities/ACT_contentCarousel.js",
            "line": 187,
            "itemtype": "attribute",
            "name": "NAME",
            "type": "String",
            "class": "ContentCarousel",
            "module": "ContentCarousel"
        },
        {
            "file": "src/capabilities/ACT_contentCarousel.js",
            "line": 193,
            "itemtype": "attribute",
            "name": "node",
            "type": "HTMLElement",
            "class": "ContentCarousel",
            "module": "ContentCarousel"
        },
        {
            "file": "src/capabilities/ACT_contentCarousel.js",
            "line": 199,
            "itemtype": "attribute",
            "name": "relativeContainer",
            "type": "HTMLElement",
            "class": "ContentCarousel",
            "module": "ContentCarousel"
        },
        {
            "file": "src/capabilities/ACT_contentCarousel.js",
            "line": 205,
            "itemtype": "attribute",
            "name": "holderContainer",
            "type": "HTMLElement",
            "class": "ContentCarousel",
            "module": "ContentCarousel"
        },
        {
            "file": "src/capabilities/ACT_contentCarousel.js",
            "line": 211,
            "description": "Transition time in milliseconds",
            "itemtype": "attribute",
            "name": "transitionTime",
            "type": "Number",
            "default": "1000",
            "class": "ContentCarousel",
            "module": "ContentCarousel"
        },
        {
            "file": "src/capabilities/ACT_contentCarousel.js",
            "line": 219,
            "description": "ID of the current showing slide",
            "itemtype": "attribute",
            "name": "currentSlideId",
            "type": "Number",
            "default": "0",
            "class": "ContentCarousel",
            "module": "ContentCarousel"
        },
        {
            "file": "src/capabilities/ACT_contentCarousel.js",
            "line": 227,
            "itemtype": "attribute",
            "name": "slideContentList",
            "type": "Array",
            "class": "ContentCarousel",
            "module": "ContentCarousel"
        },
        {
            "file": "src/capabilities/ACT_contentCarousel.js",
            "line": 234,
            "description": "Subscribe trigger action to the carousels listeners",
            "itemtype": "method",
            "name": "subscribeTriggerToCarouselEvent",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "action,",
                    "description": "action to fire",
                    "type": "String"
                }
            ],
            "class": "ContentCarousel",
            "module": "ContentCarousel"
        },
        {
            "file": "src/capabilities/ACT_contentCarousel.js",
            "line": 262,
            "description": "Attach action for an event",
            "itemtype": "method",
            "name": "attachCarouselEventActions",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "node,",
                    "description": "node to attach events",
                    "type": "String"
                },
                {
                    "name": "eventConfig,",
                    "description": "list of event",
                    "type": "String"
                }
            ],
            "class": "ContentCarousel",
            "module": "ContentCarousel"
        },
        {
            "file": "src/capabilities/ACT_contentCarousel.js",
            "line": 290,
            "description": "Function auto initiated when the class is instantiated",
            "itemtype": "method",
            "name": "initializer",
            "params": [
                {
                    "name": "config",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "ContentCarousel",
            "module": "ContentCarousel"
        },
        {
            "file": "src/capabilities/ACT_contentCarousel.js",
            "line": 310,
            "description": "Function to initialize event listeners for this instance",
            "itemtype": "method",
            "name": "initializeListeners",
            "class": "ContentCarousel",
            "module": "ContentCarousel"
        },
        {
            "file": "src/capabilities/ACT_contentCarousel.js",
            "line": 337,
            "description": "Render the node from given config object, environment and orientation state",
            "itemtype": "method",
            "name": "renderContent",
            "params": [
                {
                    "name": "configObject",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "env",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "orientation",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "node",
                "type": "HTMLElement"
            },
            "class": "ContentCarousel",
            "module": "ContentCarousel"
        },
        {
            "file": "src/capabilities/ACT_contentCarousel.js",
            "line": 353,
            "description": "Function to return the generated node for ACT Scaffolding",
            "itemtype": "method",
            "name": "getContent",
            "params": [
                {
                    "name": "env",
                    "description": "Environment for rendering content such as html/flash/backup",
                    "type": "String"
                },
                {
                    "name": "orientation",
                    "description": "Orientation of current device such as landscape and portraits for mobile",
                    "type": "String"
                }
            ],
            "return": {
                "description": "node",
                "type": "HTMLElement"
            },
            "class": "ContentCarousel",
            "module": "ContentCarousel"
        },
        {
            "file": "src/capabilities/ACT_contentCarousel.js",
            "line": 370,
            "description": "Function to create a relative container to ensure carousel position is correct on page",
            "itemtype": "method",
            "name": "createRelativeContainer",
            "class": "ContentCarousel",
            "module": "ContentCarousel"
        },
        {
            "file": "src/capabilities/ACT_contentCarousel.js",
            "line": 386,
            "description": "Function to create the Carousels main container and append content",
            "itemtype": "method",
            "name": "createHolderContainer",
            "class": "ContentCarousel",
            "module": "ContentCarousel"
        },
        {
            "file": "src/capabilities/ACT_contentCarousel.js",
            "line": 412,
            "description": "Function to append new node content into Carousel",
            "itemtype": "method",
            "name": "appendChildNode",
            "params": [
                {
                    "name": "content",
                    "description": "child Node to be appened",
                    "type": "Node"
                }
            ],
            "class": "ContentCarousel",
            "module": "ContentCarousel"
        },
        {
            "file": "src/capabilities/ACT_contentCarousel.js",
            "line": 423,
            "description": "Function to add new slide content to the slideContentList\nIf new item is not a Node object, we will not add it to the list",
            "itemtype": "method",
            "name": "addSlideContent",
            "params": [
                {
                    "name": "node",
                    "description": "to be add",
                    "type": "Node"
                }
            ],
            "class": "ContentCarousel",
            "module": "ContentCarousel"
        },
        {
            "file": "src/capabilities/ACT_contentCarousel.js",
            "line": 436,
            "description": "Function to get next ID base on direction",
            "itemtype": "method",
            "name": "getNextSlideId",
            "params": [
                {
                    "name": "direction",
                    "description": "of the next slide. Direction = 1 to move right, -1 to move left",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Id of the next slide",
                "type": "Number"
            },
            "class": "ContentCarousel",
            "module": "ContentCarousel"
        },
        {
            "file": "src/capabilities/ACT_contentCarousel.js",
            "line": 456,
            "description": "Function to jump to a new slide without animation",
            "itemtype": "method",
            "name": "jumpToSlide",
            "params": [
                {
                    "name": "slidePositionId",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "done",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "ContentCarousel",
            "module": "ContentCarousel"
        },
        {
            "file": "src/capabilities/ACT_contentCarousel.js",
            "line": 473,
            "description": "Prepare slides for next possible transition",
            "itemtype": "method",
            "name": "preparePosition",
            "params": [
                {
                    "name": "direction",
                    "description": "direction to follow",
                    "type": "Number"
                }
            ],
            "class": "ContentCarousel",
            "module": "ContentCarousel"
        },
        {
            "file": "src/capabilities/ACT_contentCarousel.js",
            "line": 513,
            "description": "sliding to the left behaviour",
            "itemtype": "method",
            "name": "slideLeft",
            "params": [
                {
                    "name": "done",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "ContentCarousel",
            "module": "ContentCarousel"
        },
        {
            "file": "src/capabilities/ACT_contentCarousel.js",
            "line": 527,
            "description": "sliding to the right behaviour",
            "itemtype": "method",
            "name": "slideRight",
            "params": [
                {
                    "name": "done",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "ContentCarousel",
            "module": "ContentCarousel"
        },
        {
            "file": "src/capabilities/ACT_contentCarousel.js",
            "line": 541,
            "description": "Animation for sliding behaviour",
            "itemtype": "method",
            "name": "slideAnimation",
            "params": [
                {
                    "name": "direction",
                    "description": "1 if sliding to the right and -1 if sliding to the left",
                    "type": "1 | -1"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "ContentCarousel",
            "module": "ContentCarousel"
        },
        {
            "file": "src/capabilities/ACT_contentCarousel.js",
            "line": 603,
            "description": "Function to be called when the instance is destroyed",
            "itemtype": "method",
            "name": "destructor",
            "class": "ContentCarousel",
            "module": "ContentCarousel"
        },
        {
            "file": "src/capabilities/ACT_contentContainer.js",
            "line": 336,
            "itemtype": "attribute",
            "name": "NAME",
            "type": "String",
            "class": "ContentContainer",
            "module": "ContentContainer"
        },
        {
            "file": "src/capabilities/ACT_contentContainer.js",
            "line": 345,
            "itemtype": "method",
            "name": "openUrl",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "URLpath",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "URLname",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "done",
                    "description": "Optional function executed once the logic is done",
                    "type": "Function"
                }
            ],
            "class": "ContentContainer",
            "module": "ContentContainer"
        },
        {
            "file": "src/capabilities/ACT_contentContainer.js",
            "line": 373,
            "description": "Listener for openURL event\nthis listen cannot be put inside container instance because it will be fired everytime a new container is created",
            "class": "ContentContainer",
            "module": "ContentContainer"
        },
        {
            "file": "src/capabilities/ACT_contentContainer.js",
            "line": 381,
            "description": "Add action on trigger of setInterval after delay",
            "itemtype": "method",
            "name": "addCounterTrigger",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "actionToAdd",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "ContentContainer",
            "module": "ContentContainer"
        },
        {
            "file": "src/capabilities/ACT_contentContainer.js",
            "line": 400,
            "description": "Subscribe trigger action to the container's listeners",
            "itemtype": "method",
            "name": "subscribeTriggerToContainerEvent",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "node,",
                    "description": "node to attach event",
                    "type": "HTMLElement"
                },
                {
                    "name": "action,",
                    "description": "action to fire",
                    "type": "String"
                }
            ],
            "class": "ContentContainer",
            "module": "ContentContainer"
        },
        {
            "file": "src/capabilities/ACT_contentContainer.js",
            "line": 429,
            "description": "Set the event configuration to the node",
            "itemtype": "method",
            "name": "setButtonConfig",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "node,",
                    "description": "node to attach events",
                    "type": "HTMLElement"
                },
                {
                    "name": "eventConfig,",
                    "description": "Configuration object for node",
                    "type": "String"
                }
            ],
            "class": "ContentContainer",
            "module": "ContentContainer"
        },
        {
            "file": "src/capabilities/ACT_contentContainer.js",
            "line": 457,
            "description": "Function auto initiated when the class is instantiated",
            "itemtype": "method",
            "name": "initializer",
            "params": [
                {
                    "name": "config",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "ContentContainer",
            "module": "ContentContainer"
        },
        {
            "file": "src/capabilities/ACT_contentContainer.js",
            "line": 474,
            "description": "Function to initialize event listeners for this instance",
            "itemtype": "method",
            "name": "initializeListeners",
            "class": "ContentContainer",
            "module": "ContentContainer"
        },
        {
            "file": "src/capabilities/ACT_contentContainer.js",
            "line": 537,
            "description": "Function called when the instance is destroyed",
            "itemtype": "method",
            "name": "destructor",
            "class": "ContentContainer",
            "module": "ContentContainer"
        },
        {
            "file": "src/capabilities/ACT_contentContainer.js",
            "line": 550,
            "description": "Render the node from given config object, environment and orientation state",
            "itemtype": "method",
            "name": "renderContent",
            "params": [
                {
                    "name": "configObject",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "env",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "orientation",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "node",
                "type": "HTMLElement"
            },
            "class": "ContentContainer",
            "module": "ContentContainer"
        },
        {
            "file": "src/capabilities/ACT_contentContainer.js",
            "line": 573,
            "description": "Function generating the node 'DIV'",
            "itemtype": "method",
            "name": "getContent",
            "params": [
                {
                    "name": "env",
                    "description": "Environment for rendering content such as html/flash/backup",
                    "type": "String"
                },
                {
                    "name": "orientation",
                    "description": "Orientation of current device such as landscape and portraits for mobile",
                    "type": "String"
                }
            ],
            "return": {
                "description": "node",
                "type": "HTMLElement"
            },
            "class": "ContentContainer",
            "module": "ContentContainer"
        },
        {
            "file": "src/capabilities/ACT_contentContainer.js",
            "line": 592,
            "description": "for testing purpose only",
            "class": "ContentContainer",
            "module": "ContentContainer"
        },
        {
            "file": "src/capabilities/ACT_contentContainer.js",
            "line": 598,
            "itemtype": "method",
            "name": "showContainer",
            "params": [
                {
                    "name": "done",
                    "description": "Optional function executed once the logic is done",
                    "type": "Function"
                }
            ],
            "class": "ContentContainer",
            "module": "ContentContainer"
        },
        {
            "file": "src/capabilities/ACT_contentContainer.js",
            "line": 609,
            "itemtype": "method",
            "name": "hideContainer",
            "params": [
                {
                    "name": "done",
                    "description": "Optional function executed once the logic is done",
                    "type": "Function"
                }
            ],
            "class": "ContentContainer",
            "module": "ContentContainer"
        },
        {
            "file": "src/capabilities/ACT_contentContainer.js",
            "line": 620,
            "itemtype": "method",
            "name": "changeStyles",
            "params": [
                {
                    "name": "styles,",
                    "description": "information of the style to apply to node",
                    "type": "Object"
                },
                {
                    "name": "done",
                    "description": "Optional function executed once the logic is done",
                    "type": "Function"
                }
            ],
            "class": "ContentContainer",
            "module": "ContentContainer"
        },
        {
            "file": "src/capabilities/ACT_contentContainer.js",
            "line": 668,
            "itemtype": "method",
            "name": "animateContainer",
            "params": [
                {
                    "name": "from",
                    "description": "Initial styles of the container",
                    "type": "Object"
                },
                {
                    "name": "to",
                    "description": "Final styles for the container",
                    "type": "Object"
                },
                {
                    "name": "duration",
                    "description": "Second the animation happen",
                    "type": "Number"
                },
                {
                    "name": "delay",
                    "description": "Delay time before the animation start",
                    "type": "Number"
                },
                {
                    "name": "done",
                    "description": "Optional function executed once the logic is done",
                    "type": "Function"
                }
            ],
            "class": "ContentContainer",
            "module": "ContentContainer"
        },
        {
            "file": "src/capabilities/ACT_contentContainer.js",
            "line": 684,
            "itemtype": "method",
            "name": "stopCounter",
            "class": "ContentContainer",
            "module": "ContentContainer"
        },
        {
            "file": "src/capabilities/ACT_contentHtml5.js",
            "line": 102,
            "description": "Post Message Handler",
            "class": "ContentHtml5",
            "module": "ContentHtml5"
        },
        {
            "file": "src/capabilities/ACT_contentHtml5.js",
            "line": 119,
            "is_constructor": 1,
            "class": "ContentHtml5",
            "module": "ContentHtml5"
        },
        {
            "file": "src/capabilities/ACT_contentHtml5.js",
            "line": 128,
            "itemtype": "attribute",
            "name": "NAME",
            "type": "String",
            "class": "ContentHtml5",
            "module": "ContentHtml5"
        },
        {
            "file": "src/capabilities/ACT_contentHtml5.js",
            "line": 134,
            "itemtype": "attribute",
            "name": "configObject",
            "type": "Object",
            "class": "ContentHtml5",
            "module": "ContentHtml5"
        },
        {
            "file": "src/capabilities/ACT_contentHtml5.js",
            "line": 140,
            "itemtype": "attribute",
            "name": "node",
            "type": "HTMLElement",
            "class": "ContentHtml5",
            "module": "ContentHtml5"
        },
        {
            "file": "src/capabilities/ACT_contentHtml5.js",
            "line": 146,
            "itemtype": "attribute",
            "name": "enablerActions",
            "class": "ContentHtml5",
            "module": "ContentHtml5"
        },
        {
            "file": "src/capabilities/ACT_contentHtml5.js",
            "line": 151,
            "description": "List of keywords related labes for tracking\nFor e.g 'video1:start' : 'billboard_view_video1_start'",
            "itemtype": "attribute",
            "name": "trackingLabels",
            "class": "ContentHtml5",
            "module": "ContentHtml5"
        },
        {
            "file": "src/capabilities/ACT_contentHtml5.js",
            "line": 158,
            "description": "Set to true if you want to track things that are not defined in tracking labels.\nset to False by default.",
            "class": "ContentHtml5",
            "module": "ContentHtml5"
        },
        {
            "file": "src/capabilities/ACT_contentHtml5.js",
            "line": 168,
            "description": "Generate the node div tag with params",
            "itemtype": "method",
            "name": "renderDiv",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "config",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "HTMLElement"
            },
            "class": "ContentHtml5",
            "module": "ContentHtml5"
        },
        {
            "file": "src/capabilities/ACT_contentHtml5.js",
            "line": 188,
            "description": "Generate the node iframe tag with params",
            "itemtype": "method",
            "name": "renderIframe",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "config",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "HTMLElement"
            },
            "class": "ContentHtml5",
            "module": "ContentHtml5"
        },
        {
            "file": "src/capabilities/ACT_contentHtml5.js",
            "line": 248,
            "itemtype": "method",
            "name": "genarateEventActions",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "eventActions",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "ContentHtml5",
            "module": "ContentHtml5"
        },
        {
            "file": "src/capabilities/ACT_contentHtml5.js",
            "line": 271,
            "itemtype": "method",
            "name": "subscribeActionToEvent",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "action",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "ContentHtml5",
            "module": "ContentHtml5"
        },
        {
            "file": "src/capabilities/ACT_contentHtml5.js",
            "line": 285,
            "description": "Function auto initiated when the class is instantiated",
            "itemtype": "method",
            "name": "initializer",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "config",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "ContentHtml5",
            "module": "ContentHtml5"
        },
        {
            "file": "src/capabilities/ACT_contentHtml5.js",
            "line": 319,
            "description": "Function to initialize event listeners for this instance",
            "itemtype": "method",
            "name": "initializeListeners",
            "class": "ContentHtml5",
            "module": "ContentHtml5"
        },
        {
            "file": "src/capabilities/ACT_contentHtml5.js",
            "line": 353,
            "itemtype": "method",
            "name": "wrapActionsList",
            "class": "ContentHtml5",
            "module": "ContentHtml5"
        },
        {
            "file": "src/capabilities/ACT_contentHtml5.js",
            "line": 362,
            "description": "prepare actions definition for enablers actions",
            "itemtype": "method",
            "name": "initializeEnablerActions",
            "class": "ContentHtml5",
            "module": "ContentHtml5"
        },
        {
            "file": "src/capabilities/ACT_contentHtml5.js",
            "line": 398,
            "description": "Handle tracking event sent from Enabler\nWe will check if eventId is defined in trackingLabels list, then fire tracking event with related label",
            "itemtype": "method",
            "name": "fireEnablerTracking",
            "params": [
                {
                    "name": "data",
                    "description": "Data sent by Enabler event action",
                    "type": "Object"
                }
            ],
            "class": "ContentHtml5",
            "module": "ContentHtml5"
        },
        {
            "file": "src/capabilities/ACT_contentHtml5.js",
            "line": 424,
            "description": "Broadcast to the html5 script",
            "itemtype": "method",
            "name": "startHtml5",
            "class": "ContentHtml5",
            "module": "ContentHtml5"
        },
        {
            "file": "src/capabilities/ACT_contentHtml5.js",
            "line": 441,
            "description": "Function called when the instance is destroyed",
            "itemtype": "method",
            "name": "destructor",
            "access": "public",
            "tagname": "",
            "class": "ContentHtml5",
            "module": "ContentHtml5"
        },
        {
            "file": "src/capabilities/ACT_contentHtml5.js",
            "line": 458,
            "description": "Render the node from given config object, environment and orientation state",
            "itemtype": "method",
            "name": "renderContent",
            "params": [
                {
                    "name": "configObject",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "env",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "orientation",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "node",
                "type": "HTMLElement"
            },
            "class": "ContentHtml5",
            "module": "ContentHtml5"
        },
        {
            "file": "src/capabilities/ACT_contentHtml5.js",
            "line": 475,
            "description": "Function generating the node 'IFRAME' or 'DIV'",
            "itemtype": "method",
            "name": "getContent",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "env",
                    "description": "Environment for rendering content such as html/flash/backup",
                    "type": "String"
                },
                {
                    "name": "orientation",
                    "description": "Orientation of current device such as landscape and portraits for mobile",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "ContentHtml5",
            "module": "ContentHtml5"
        },
        {
            "file": "src/capabilities/ACT_contentHtml5.js",
            "line": 500,
            "description": "Function call by the iframe",
            "itemtype": "method",
            "name": "eventHandler",
            "access": "public",
            "tagname": "",
            "class": "ContentHtml5",
            "module": "ContentHtml5"
        },
        {
            "file": "src/capabilities/ACT_contentHtml5.js",
            "line": 529,
            "description": "Handle event data send by Enabler",
            "itemtype": "method",
            "name": "enablerActionHandler",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "ContentHtml5",
            "module": "ContentHtml5"
        },
        {
            "file": "src/capabilities/ACT_contentHtml5.js",
            "line": 561,
            "itemtype": "method",
            "name": "changeStyles",
            "params": [
                {
                    "name": "styles",
                    "description": "New styles to be applied",
                    "type": "Object"
                }
            ],
            "class": "ContentHtml5",
            "module": "ContentHtml5"
        },
        {
            "file": "src/capabilities/ACT_contentImage.js",
            "line": 50,
            "is_constructor": 1,
            "class": "ContentImage",
            "module": "ContentImage"
        },
        {
            "file": "src/capabilities/ACT_contentImage.js",
            "line": 60,
            "itemtype": "attribute",
            "name": "NAME",
            "type": "String",
            "class": "ContentImage",
            "module": "ContentImage"
        },
        {
            "file": "src/capabilities/ACT_contentImage.js",
            "line": 66,
            "itemtype": "attribute",
            "name": "configObject",
            "type": "Object",
            "class": "ContentImage",
            "module": "ContentImage"
        },
        {
            "file": "src/capabilities/ACT_contentImage.js",
            "line": 72,
            "itemtype": "attribute",
            "name": "node",
            "type": "HTMLElement",
            "class": "ContentImage",
            "module": "ContentImage"
        },
        {
            "file": "src/capabilities/ACT_contentImage.js",
            "line": 82,
            "description": "Set attributes to the node",
            "itemtype": "method",
            "name": "setAttributes",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "node",
                    "description": "",
                    "type": "HTMLElement"
                },
                {
                    "name": "attrs",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "ContentImage",
            "module": "ContentImage"
        },
        {
            "file": "src/capabilities/ACT_contentImage.js",
            "line": 103,
            "description": "Function auto initiated when the class is instantiated",
            "itemtype": "method",
            "name": "initializer",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "config",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "ContentImage",
            "module": "ContentImage"
        },
        {
            "file": "src/capabilities/ACT_contentImage.js",
            "line": 117,
            "description": "Function to initialize event listeners for this instance",
            "itemtype": "method",
            "name": "initializeListeners",
            "access": "public",
            "tagname": "",
            "class": "ContentImage",
            "module": "ContentImage"
        },
        {
            "file": "src/capabilities/ACT_contentImage.js",
            "line": 134,
            "description": "Function called when the instance is destroyed",
            "itemtype": "method",
            "name": "destructor",
            "access": "public",
            "tagname": "",
            "class": "ContentImage",
            "module": "ContentImage"
        },
        {
            "file": "src/capabilities/ACT_contentImage.js",
            "line": 149,
            "description": "Render the node from given config object, environment and orientation state",
            "itemtype": "method",
            "name": "renderContent",
            "params": [
                {
                    "name": "configObject",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "env",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "orientation",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "node",
                "type": "HTMLElement"
            },
            "class": "ContentImage",
            "module": "ContentImage"
        },
        {
            "file": "src/capabilities/ACT_contentImage.js",
            "line": 182,
            "description": "Function generating the node 'IMG'",
            "itemtype": "method",
            "name": "getContent",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "env",
                    "description": "Environment for rendering content such as html/flash/backup",
                    "type": "String"
                },
                {
                    "name": "orientation",
                    "description": "Orientation of current device such as landscape and portraits for mobile",
                    "type": "String"
                }
            ],
            "return": {
                "description": "node",
                "type": "HTMLElement"
            },
            "class": "ContentImage",
            "module": "ContentImage"
        },
        {
            "file": "src/capabilities/ACT_contentProgressBar.js",
            "line": 56,
            "is_constructor": 1,
            "class": "ContentProgressBar",
            "module": "ContentProgressBar"
        },
        {
            "file": "src/capabilities/ACT_contentProgressBar.js",
            "line": 65,
            "itemtype": "attribute",
            "name": "NAME",
            "type": "String",
            "class": "ContentProgressBar",
            "module": "ContentProgressBar"
        },
        {
            "file": "src/capabilities/ACT_contentProgressBar.js",
            "line": 71,
            "itemtype": "attribute",
            "name": "configObject",
            "type": "Object",
            "class": "ContentProgressBar",
            "module": "ContentProgressBar"
        },
        {
            "file": "src/capabilities/ACT_contentProgressBar.js",
            "line": 77,
            "itemtype": "attribute",
            "name": "node",
            "type": "HTMLElement",
            "class": "ContentProgressBar",
            "module": "ContentProgressBar"
        },
        {
            "file": "src/capabilities/ACT_contentProgressBar.js",
            "line": 83,
            "description": "Id if source Node",
            "itemtype": "attribute",
            "name": "sourceId",
            "class": "ContentProgressBar",
            "module": "ContentProgressBar"
        },
        {
            "file": "src/capabilities/ACT_contentProgressBar.js",
            "line": 89,
            "description": "Dom Node which is synced with the progressBar",
            "itemtype": "attribute",
            "name": "sourceNode",
            "class": "ContentProgressBar",
            "module": "ContentProgressBar"
        },
        {
            "file": "src/capabilities/ACT_contentProgressBar.js",
            "line": 95,
            "description": "Type of Dom Node which is synced with the progressBar. Video or Audio",
            "itemtype": "attribute",
            "name": "sourceType",
            "class": "ContentProgressBar",
            "module": "ContentProgressBar"
        },
        {
            "file": "src/capabilities/ACT_contentProgressBar.js",
            "line": 101,
            "description": "number of times we have tried to detect source Dom element",
            "itemtype": "attribute",
            "name": "detectTimes",
            "class": "ContentProgressBar",
            "module": "ContentProgressBar"
        },
        {
            "file": "src/capabilities/ACT_contentProgressBar.js",
            "line": 107,
            "description": "flag to make sure this sync only happen once",
            "itemtype": "attribute",
            "name": "isSyncTargetToNode",
            "class": "ContentProgressBar",
            "module": "ContentProgressBar"
        },
        {
            "file": "src/capabilities/ACT_contentProgressBar.js",
            "line": 113,
            "description": "flag to make sure this sync only happen once",
            "itemtype": "attribute",
            "name": "isSyncNodeToTarget",
            "class": "ContentProgressBar",
            "module": "ContentProgressBar"
        },
        {
            "file": "src/capabilities/ACT_contentProgressBar.js",
            "line": 122,
            "description": "Render the node from given config object, environment and orientation state",
            "itemtype": "method",
            "name": "renderContent",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "configObject",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "env",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "orientation",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "node",
                "type": "HTMLElement"
            },
            "class": "ContentProgressBar",
            "module": "ContentProgressBar"
        },
        {
            "file": "src/capabilities/ACT_contentProgressBar.js",
            "line": 166,
            "description": "Function auto initiated when the class is instantiated",
            "itemtype": "method",
            "name": "initializer",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "config",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "ContentProgressBar",
            "module": "ContentProgressBar"
        },
        {
            "file": "src/capabilities/ACT_contentProgressBar.js",
            "line": 186,
            "description": "detech source element and type from its ID",
            "itemtype": "method",
            "name": "detectSource",
            "class": "ContentProgressBar",
            "module": "ContentProgressBar"
        },
        {
            "file": "src/capabilities/ACT_contentProgressBar.js",
            "line": 223,
            "description": "Function called when the instance is destroyed",
            "itemtype": "method",
            "name": "destructor",
            "access": "public",
            "tagname": "",
            "class": "ContentProgressBar",
            "module": "ContentProgressBar"
        },
        {
            "file": "src/capabilities/ACT_contentProgressBar.js",
            "line": 239,
            "description": "Function generating the node 'IMG'",
            "itemtype": "method",
            "name": "getContent",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "env",
                    "description": "Environment for rendering content such as html/flash/backup",
                    "type": "String"
                },
                {
                    "name": "orientation",
                    "description": "Orientation of current device such as landscape and portraits for mobile",
                    "type": "String"
                }
            ],
            "return": {
                "description": "node",
                "type": "HTMLElement"
            },
            "class": "ContentProgressBar",
            "module": "ContentProgressBar"
        },
        {
            "file": "src/capabilities/ACT_contentProgressBar.js",
            "line": 263,
            "description": "Listen to changes from the target element and update progressBar accordingly",
            "itemtype": "method",
            "name": "syncWithTargetNode",
            "class": "ContentProgressBar",
            "module": "ContentProgressBar"
        },
        {
            "file": "src/capabilities/ACT_contentProgressBar.js",
            "line": 294,
            "description": "Update target based on changes in progressBar",
            "itemtype": "method",
            "name": "syncWithTargetNode",
            "class": "ContentProgressBar",
            "module": "ContentProgressBar"
        },
        {
            "file": "src/capabilities/ACT_contentProgressBar.js",
            "line": 331,
            "description": "Update current progress bar value",
            "itemtype": "method",
            "name": "updateProgress",
            "attribte": "{String|Number} new value",
            "class": "ContentProgressBar",
            "module": "ContentProgressBar"
        },
        {
            "file": "src/capabilities/ACT_contentProgressBar.js",
            "line": 340,
            "description": "Get position of the click on progress bar and compare it with progress bar with to get the percentage",
            "itemtype": "method",
            "name": "getClickPosition",
            "return": {
                "description": "percentage",
                "type": "Number"
            },
            "class": "ContentProgressBar",
            "module": "ContentProgressBar"
        },
        {
            "file": "src/capabilities/ACT_contentSwf.js",
            "line": 56,
            "is_constructor": 1,
            "class": "ContentSwf",
            "module": "ContentSwf"
        },
        {
            "file": "src/capabilities/ACT_contentSwf.js",
            "line": 66,
            "itemtype": "attribute",
            "name": "NAME",
            "type": "String",
            "class": "ContentSwf",
            "module": "ContentSwf"
        },
        {
            "file": "src/capabilities/ACT_contentSwf.js",
            "line": 72,
            "itemtype": "attribute",
            "name": "configObject",
            "type": "Object",
            "class": "ContentSwf",
            "module": "ContentSwf"
        },
        {
            "file": "src/capabilities/ACT_contentSwf.js",
            "line": 78,
            "itemtype": "attribute",
            "name": "node",
            "type": "HTMLElement",
            "class": "ContentSwf",
            "module": "ContentSwf"
        },
        {
            "file": "src/capabilities/ACT_contentSwf.js",
            "line": 87,
            "description": "Generate the node embed or object tag with params",
            "itemtype": "method",
            "name": "renderNodeObjectOrEmbed",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "config",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "HTMLElement"
            },
            "class": "ContentSwf",
            "module": "ContentSwf"
        },
        {
            "file": "src/capabilities/ACT_contentSwf.js",
            "line": 113,
            "description": "Function auto initiated when the class is instantiated",
            "itemtype": "method",
            "name": "initializer",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "config",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "ContentSwf",
            "module": "ContentSwf"
        },
        {
            "file": "src/capabilities/ACT_contentSwf.js",
            "line": 128,
            "description": "Function to initialize event listeners for this instance",
            "itemtype": "method",
            "name": "initializeListeners",
            "access": "public",
            "tagname": "",
            "class": "ContentSwf",
            "module": "ContentSwf"
        },
        {
            "file": "src/capabilities/ACT_contentSwf.js",
            "line": 155,
            "description": "Function called when the instance is destroyed",
            "itemtype": "method",
            "name": "destructor",
            "access": "public",
            "tagname": "",
            "class": "ContentSwf",
            "module": "ContentSwf"
        },
        {
            "file": "src/capabilities/ACT_contentSwf.js",
            "line": 173,
            "description": "Render the node from given config object, environment and orientation state",
            "itemtype": "method",
            "name": "renderContent",
            "params": [
                {
                    "name": "configObject",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "env",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "orientation",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "node",
                "type": "HTMLElement"
            },
            "class": "ContentSwf",
            "module": "ContentSwf"
        },
        {
            "file": "src/capabilities/ACT_contentSwf.js",
            "line": 188,
            "description": "Function generating the node 'EMBED' or 'OBJECT'",
            "itemtype": "method",
            "name": "getContent",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "env",
                    "description": "Environment for rendering content such as html/flash/backup",
                    "type": "String"
                },
                {
                    "name": "orientation",
                    "description": "Orientation of current device such as landscape and portraits for mobile",
                    "type": "String"
                }
            ],
            "return": {
                "description": "node",
                "type": "HTMLElement"
            },
            "class": "ContentSwf",
            "module": "ContentSwf"
        },
        {
            "file": "src/capabilities/ACT_contentSwf.js",
            "line": 208,
            "description": "Function call by flash through the bridge",
            "itemtype": "method",
            "name": "eventHandler",
            "access": "public",
            "tagname": "",
            "class": "ContentSwf",
            "module": "ContentSwf"
        },
        {
            "file": "src/capabilities/ACT_contentThirdParty.js",
            "line": 179,
            "is_constructor": 1,
            "class": "ContentThirdParty",
            "module": "ContentThirdParty"
        },
        {
            "file": "src/capabilities/ACT_contentThirdParty.js",
            "line": 188,
            "itemtype": "attribute",
            "name": "NAME",
            "type": "String",
            "class": "ContentThirdParty",
            "module": "ContentThirdParty"
        },
        {
            "file": "src/capabilities/ACT_contentThirdParty.js",
            "line": 194,
            "itemtype": "attribute",
            "name": "configObject",
            "type": "Object",
            "class": "ContentThirdParty",
            "module": "ContentThirdParty"
        },
        {
            "file": "src/capabilities/ACT_contentThirdParty.js",
            "line": 200,
            "itemtype": "attribute",
            "name": "node",
            "type": "HTMLElement",
            "class": "ContentThirdParty",
            "module": "ContentThirdParty"
        },
        {
            "file": "src/capabilities/ACT_contentThirdParty.js",
            "line": 209,
            "description": "Generate the node div tag with params",
            "itemtype": "method",
            "name": "renderDiv",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "config",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "thirdParty",
                    "description": "",
                    "type": "HTMLElement"
                }
            ],
            "return": {
                "description": "",
                "type": "HTMLElement"
            },
            "class": "ContentThirdParty",
            "module": "ContentThirdParty"
        },
        {
            "file": "src/capabilities/ACT_contentThirdParty.js",
            "line": 224,
            "description": "Function to uncomment tags of string format",
            "itemtype": "method",
            "name": "trimAndUncommentTags",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "tag",
                    "description": "",
                    "type": "String"
                }
            ],
            "retun": "{String} trimmed tag",
            "class": "ContentThirdParty",
            "module": "ContentThirdParty"
        },
        {
            "file": "src/capabilities/ACT_contentThirdParty.js",
            "line": 240,
            "description": "Generate the node iframe tag with params",
            "itemtype": "method",
            "name": "renderIframe",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "config",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "thirdParty",
                    "description": "",
                    "type": "HTMLElement"
                }
            ],
            "return": {
                "description": "",
                "type": "HTMLElement"
            },
            "class": "ContentThirdParty",
            "module": "ContentThirdParty"
        },
        {
            "file": "src/capabilities/ACT_contentThirdParty.js",
            "line": 297,
            "itemtype": "method",
            "name": "genarateEventActions",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "eventActions",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "ContentThirdParty",
            "module": "ContentThirdParty"
        },
        {
            "file": "src/capabilities/ACT_contentThirdParty.js",
            "line": 318,
            "description": "Create custom event cross browser",
            "params": [
                {
                    "name": "eventName",
                    "description": "Event to trigger on",
                    "type": "String"
                },
                {
                    "name": "subscriber",
                    "description": "Dom element",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "create",
            "access": "private",
            "tagname": "",
            "class": "ContentThirdParty",
            "module": "ContentThirdParty"
        },
        {
            "file": "src/capabilities/ACT_contentThirdParty.js",
            "line": 338,
            "description": "Listen to event cross browser",
            "params": [
                {
                    "name": "eventName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "listen",
            "access": "private",
            "tagname": "",
            "class": "ContentThirdParty",
            "module": "ContentThirdParty"
        },
        {
            "file": "src/capabilities/ACT_contentThirdParty.js",
            "line": 360,
            "itemtype": "method",
            "name": "subscribeActionToCustomEvent",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "action",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "ContentThirdParty",
            "module": "ContentThirdParty"
        },
        {
            "file": "src/capabilities/ACT_contentThirdParty.js",
            "line": 375,
            "description": "Dispatch event cross browser",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "dispatch",
            "access": "private",
            "tagname": "",
            "class": "ContentThirdParty",
            "module": "ContentThirdParty"
        },
        {
            "file": "src/capabilities/ACT_contentThirdParty.js",
            "line": 394,
            "description": "Function auto initiated when the class is instantiated",
            "itemtype": "method",
            "name": "initializer",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "config",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "ContentThirdParty",
            "module": "ContentThirdParty"
        },
        {
            "file": "src/capabilities/ACT_contentThirdParty.js",
            "line": 414,
            "description": "Function to initialize event listeners for this instance",
            "itemtype": "method",
            "name": "initializeListeners",
            "class": "ContentThirdParty",
            "module": "ContentThirdParty"
        },
        {
            "file": "src/capabilities/ACT_contentThirdParty.js",
            "line": 450,
            "description": "Start the third party",
            "itemtype": "method",
            "name": "startThirdParty",
            "class": "ContentThirdParty",
            "module": "ContentThirdParty"
        },
        {
            "file": "src/capabilities/ACT_contentThirdParty.js",
            "line": 468,
            "description": "Stop the third party",
            "itemtype": "method",
            "name": "stopThirdParty",
            "class": "ContentThirdParty",
            "module": "ContentThirdParty"
        },
        {
            "file": "src/capabilities/ACT_contentThirdParty.js",
            "line": 486,
            "description": "Broadcast to third party",
            "itemtype": "method",
            "name": "broadcastThirdParty",
            "class": "ContentThirdParty",
            "module": "ContentThirdParty"
        },
        {
            "file": "src/capabilities/ACT_contentThirdParty.js",
            "line": 496,
            "description": "Function called when the instance is destroyed",
            "itemtype": "method",
            "name": "destructor",
            "access": "public",
            "tagname": "",
            "class": "ContentThirdParty",
            "module": "ContentThirdParty"
        },
        {
            "file": "src/capabilities/ACT_contentThirdParty.js",
            "line": 510,
            "description": "Render the node from given config object, environment and orientation state",
            "itemtype": "method",
            "name": "renderContent",
            "params": [
                {
                    "name": "configObject",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "env",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "orientation",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "node",
                "type": "HTMLElement"
            },
            "class": "ContentThirdParty",
            "module": "ContentThirdParty"
        },
        {
            "file": "src/capabilities/ACT_contentThirdParty.js",
            "line": 527,
            "description": "Function generating the node 'OBJECT'",
            "itemtype": "method",
            "name": "getContent",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "env",
                    "description": "Environment for rendering content such as html/flash/backup",
                    "type": "String"
                },
                {
                    "name": "orientation",
                    "description": "Orientation of current device such as landscape and portraits for mobile",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "ContentThirdParty",
            "module": "ContentThirdParty"
        },
        {
            "file": "src/capabilities/ACT_contentVideoFlash.js",
            "line": 26,
            "description": "Constant values",
            "class": "ContentVideoFlash",
            "module": "ContentVideoFlash"
        },
        {
            "file": "src/capabilities/ACT_contentVideoFlash.js",
            "line": 213,
            "itemtype": "attribute",
            "name": "NAME",
            "type": "String",
            "class": "ContentVideoFlash",
            "module": "ContentVideoFlash"
        },
        {
            "file": "src/capabilities/ACT_contentVideoFlash.js",
            "line": 219,
            "itemtype": "attribute",
            "name": "configObject",
            "type": "Object",
            "class": "ContentVideoFlash",
            "module": "ContentVideoFlash"
        },
        {
            "file": "src/capabilities/ACT_contentVideoFlash.js",
            "line": 225,
            "itemtype": "attribute",
            "name": "videoId",
            "type": "String",
            "class": "ContentVideoFlash",
            "module": "ContentVideoFlash"
        },
        {
            "file": "src/capabilities/ACT_contentVideoFlash.js",
            "line": 231,
            "itemtype": "attribute",
            "name": "node",
            "type": "HTMLElement",
            "class": "ContentVideoFlash",
            "module": "ContentVideoFlash"
        },
        {
            "file": "src/capabilities/ACT_contentVideoFlash.js",
            "line": 239,
            "description": "Attach action for an event",
            "itemtype": "method",
            "name": "attachAction",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "event,",
                    "description": "object event that will be attached",
                    "type": "Object"
                }
            ],
            "class": "ContentVideoFlash",
            "module": "ContentVideoFlash"
        },
        {
            "file": "src/capabilities/ACT_contentVideoFlash.js",
            "line": 255,
            "description": "Loop all video events and subscribe them",
            "itemtype": "method",
            "name": "subscribeVideoEvents",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "config,",
                    "description": "global information of the video-flash context",
                    "type": "Object"
                }
            ],
            "class": "ContentVideoFlash",
            "module": "ContentVideoFlash"
        },
        {
            "file": "src/capabilities/ACT_contentVideoFlash.js",
            "line": 272,
            "description": "Create a flashVars object",
            "itemtype": "method",
            "name": "flashVars",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "config,",
                    "description": "global information of the video-flash context",
                    "type": "Object"
                },
                {
                    "name": "videoFlashConfig,",
                    "description": "information of the video-flash context",
                    "type": "Object"
                }
            ],
            "class": "ContentVideoFlash",
            "module": "ContentVideoFlash"
        },
        {
            "file": "src/capabilities/ACT_contentVideoFlash.js",
            "line": 293,
            "description": "Create a node",
            "itemtype": "method",
            "name": "getContent",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "env",
                    "description": "Environment for rendering content such as html/flash/backup",
                    "type": "String"
                },
                {
                    "name": "orientation",
                    "description": "Orientation of current device such as landscape and portraits for mobile",
                    "type": "String"
                }
            ],
            "class": "ContentVideoFlash",
            "module": "ContentVideoFlash"
        },
        {
            "file": "src/capabilities/ACT_contentVideoFlash.js",
            "line": 323,
            "description": "Override method from class Class, auto initiate method",
            "itemtype": "method",
            "name": "initializer",
            "params": [
                {
                    "name": "config",
                    "description": "configObject which is passed to initiate the instance",
                    "type": "Object"
                }
            ],
            "class": "ContentVideoFlash",
            "module": "ContentVideoFlash"
        },
        {
            "file": "src/capabilities/ACT_contentVideoFlash.js",
            "line": 342,
            "description": "Function to initialize event listeners for this instance",
            "itemtype": "method",
            "name": "initializeListeners",
            "class": "ContentVideoFlash",
            "module": "ContentVideoFlash"
        },
        {
            "file": "src/capabilities/ACT_contentVideoFlash.js",
            "line": 382,
            "description": "Function to be called when the instance is destroyed",
            "itemtype": "method",
            "name": "destructor",
            "class": "ContentVideoFlash",
            "module": "ContentVideoFlash"
        },
        {
            "file": "src/capabilities/ACT_contentVideoFlash.js",
            "line": 401,
            "itemtype": "method",
            "name": "getContent",
            "params": [
                {
                    "name": "env",
                    "description": "Environment for rendering content such as html/flash/backup",
                    "type": "String"
                },
                {
                    "name": "orientation",
                    "description": "Orientation of current device such as landscape and portraits for mobile",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "ContentVideoFlash",
            "module": "ContentVideoFlash"
        },
        {
            "file": "src/capabilities/ACT_contentVideoFlash.js",
            "line": 420,
            "description": "Start the video",
            "itemtype": "method",
            "name": "start",
            "class": "ContentVideoFlash",
            "module": "ContentVideoFlash"
        },
        {
            "file": "src/capabilities/ACT_contentVideoFlash.js",
            "line": 429,
            "description": "Stop the video",
            "itemtype": "method",
            "name": "stop",
            "class": "ContentVideoFlash",
            "module": "ContentVideoFlash"
        },
        {
            "file": "src/capabilities/ACT_contentVideoFlash.js",
            "line": 438,
            "description": "Play the video",
            "itemtype": "method",
            "name": "play",
            "class": "ContentVideoFlash",
            "module": "ContentVideoFlash"
        },
        {
            "file": "src/capabilities/ACT_contentVideoFlash.js",
            "line": 447,
            "description": "Pause the video",
            "itemtype": "method",
            "name": "pause",
            "class": "ContentVideoFlash",
            "module": "ContentVideoFlash"
        },
        {
            "file": "src/capabilities/ACT_contentVideoFlash.js",
            "line": 456,
            "description": "Turn on the sound of the video",
            "itemtype": "method",
            "name": "soundOn",
            "class": "ContentVideoFlash",
            "module": "ContentVideoFlash"
        },
        {
            "file": "src/capabilities/ACT_contentVideoFlash.js",
            "line": 465,
            "description": "Turn off the sound of the video",
            "itemtype": "method",
            "name": "soundOff",
            "class": "ContentVideoFlash",
            "module": "ContentVideoFlash"
        },
        {
            "file": "src/capabilities/ACT_contentVideoFlash.js",
            "line": 474,
            "itemtype": "method",
            "name": "eventHandler",
            "class": "ContentVideoFlash",
            "module": "ContentVideoFlash"
        },
        {
            "file": "src/capabilities/ACT_contentVideoHtml.js",
            "line": 110,
            "description": "List of event for video",
            "class": "ContentVideoHtml",
            "module": "ContentVideoHtml"
        },
        {
            "file": "src/capabilities/ACT_contentVideoHtml.js",
            "line": 315,
            "itemtype": "attribute",
            "name": "NAME",
            "type": "String",
            "class": "ContentVideoHtml",
            "module": "ContentVideoHtml"
        },
        {
            "file": "src/capabilities/ACT_contentVideoHtml.js",
            "line": 321,
            "itemtype": "attribute",
            "name": "videoConfig",
            "class": "ContentVideoHtml",
            "module": "ContentVideoHtml"
        },
        {
            "file": "src/capabilities/ACT_contentVideoHtml.js",
            "line": 326,
            "itemtype": "attribute",
            "name": "configObject",
            "type": "Object",
            "class": "ContentVideoHtml",
            "module": "ContentVideoHtml"
        },
        {
            "file": "src/capabilities/ACT_contentVideoHtml.js",
            "line": 332,
            "itemtype": "attribute",
            "name": "videoPath",
            "class": "ContentVideoHtml",
            "module": "ContentVideoHtml"
        },
        {
            "file": "src/capabilities/ACT_contentVideoHtml.js",
            "line": 337,
            "itemtype": "attribute",
            "name": "node",
            "type": "HTMLElement",
            "class": "ContentVideoHtml",
            "module": "ContentVideoHtml"
        },
        {
            "file": "src/capabilities/ACT_contentVideoHtml.js",
            "line": 343,
            "itemtype": "attribute",
            "name": "videoId",
            "type": "String",
            "class": "ContentVideoHtml",
            "module": "ContentVideoHtml"
        },
        {
            "file": "src/capabilities/ACT_contentVideoHtml.js",
            "line": 349,
            "description": "Reference for Video Events",
            "itemtype": "attribute",
            "name": "videoEventsRef",
            "type": "Object",
            "class": "ContentVideoHtml",
            "module": "ContentVideoHtml"
        },
        {
            "file": "src/capabilities/ACT_contentVideoHtml.js",
            "line": 356,
            "description": "List custom EventType for video such as cuePoint.",
            "itemtype": "attribute",
            "name": "customEventActions",
            "class": "ContentVideoHtml",
            "module": "ContentVideoHtml"
        },
        {
            "file": "src/capabilities/ACT_contentVideoHtml.js",
            "line": 368,
            "description": "Subscribe custom execution to the video event",
            "itemtype": "method",
            "name": "subscribeToVideoEvent",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "node",
                    "description": "Node to attach event",
                    "type": "String"
                },
                {
                    "name": "actionConfig",
                    "description": "Config for actions to be fired",
                    "type": "Object"
                }
            ],
            "class": "ContentVideoHtml",
            "module": "ContentVideoHtml"
        },
        {
            "file": "src/capabilities/ACT_contentVideoHtml.js",
            "line": 411,
            "description": "Attach action for an event",
            "itemtype": "method",
            "name": "attachVideoEventActions",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "node,",
                    "description": "node to attach events",
                    "type": "String"
                },
                {
                    "name": "eventConfig,",
                    "description": "list of event",
                    "type": "String"
                },
                {
                    "name": "customEventActions",
                    "description": "List of custom video events allowd by the contentVideoInstance",
                    "type": "Object"
                }
            ],
            "class": "ContentVideoHtml",
            "module": "ContentVideoHtml"
        },
        {
            "file": "src/capabilities/ACT_contentVideoHtml.js",
            "line": 449,
            "description": "Function to applying video configuration to video node (e.g: autoplay, muted)",
            "itemtype": "method",
            "name": "applyVideoState",
            "params": [
                {
                    "name": "node",
                    "description": ""
                },
                {
                    "name": "videoConfig",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "access": "private",
            "tagname": "",
            "class": "ContentVideoHtml",
            "module": "ContentVideoHtml"
        },
        {
            "file": "src/capabilities/ACT_contentVideoHtml.js",
            "line": 475,
            "description": "Return video source nodes",
            "params": [
                {
                    "name": "configVideo",
                    "description": "Video configuration"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": "ContentVideoHtml",
            "module": "ContentVideoHtml"
        },
        {
            "file": "src/capabilities/ACT_contentVideoHtml.js",
            "line": 495,
            "description": "Function generate list of available video path from given configVideo",
            "itemtype": "method",
            "name": "initializeVideoPath",
            "params": [
                {
                    "name": "configVideo",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "list of video path",
                "type": "Array"
            },
            "class": "ContentVideoHtml",
            "module": "ContentVideoHtml"
        },
        {
            "file": "src/capabilities/ACT_contentVideoHtml.js",
            "line": 520,
            "description": "Set attributes to the node",
            "itemtype": "method",
            "name": "setAttributes",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "node",
                    "description": "",
                    "type": "HTMLElement"
                },
                {
                    "name": "attrs",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "ContentVideoHtml",
            "module": "ContentVideoHtml"
        },
        {
            "file": "src/capabilities/ACT_contentVideoHtml.js",
            "line": 557,
            "description": "Function to initialize event listeners for this instance",
            "itemtype": "method",
            "name": "initializeListeners",
            "class": "ContentVideoHtml",
            "module": "ContentVideoHtml"
        },
        {
            "file": "src/capabilities/ACT_contentVideoHtml.js",
            "line": 630,
            "description": "Function to be called when the instance is destroyed",
            "itemtype": "method",
            "name": "destructor",
            "class": "ContentVideoHtml",
            "module": "ContentVideoHtml"
        },
        {
            "file": "src/capabilities/ACT_contentVideoHtml.js",
            "line": 650,
            "description": "Render the node from given config object, environment and orientation state",
            "itemtype": "method",
            "name": "renderContent",
            "params": [
                {
                    "name": "configObject",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "env",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "orientation",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "node",
                "type": "HTMLElement"
            },
            "class": "ContentVideoHtml",
            "module": "ContentVideoHtml"
        },
        {
            "file": "src/capabilities/ACT_contentVideoHtml.js",
            "line": 703,
            "itemtype": "method",
            "name": "getContent",
            "params": [
                {
                    "name": "env",
                    "description": "Environment for rendering content such as html/flash/backup",
                    "type": "String"
                },
                {
                    "name": "orientation",
                    "description": "Orientation of current device such as landscape and portraits for mobile",
                    "type": "String"
                }
            ],
            "return": {
                "description": "node",
                "type": "HTMLElement"
            },
            "class": "ContentVideoHtml",
            "module": "ContentVideoHtml"
        },
        {
            "file": "src/capabilities/ACT_contentVideoHtml.js",
            "line": 733,
            "description": "Function to send notification to other part of the system about changes of the video instance",
            "params": [
                {
                    "name": "videoID",
                    "description": ""
                },
                {
                    "name": "progress",
                    "description": ""
                }
            ],
            "class": "ContentVideoHtml",
            "module": "ContentVideoHtml"
        },
        {
            "file": "src/capabilities/ACT_contentVideoHtml.js",
            "line": 745,
            "description": "Create video events for node",
            "params": [
                {
                    "name": "node",
                    "description": ""
                }
            ],
            "class": "ContentVideoHtml",
            "module": "ContentVideoHtml"
        },
        {
            "file": "src/capabilities/ACT_contentVideoHtml.js",
            "line": 797,
            "description": "Video Events listener",
            "params": [
                {
                    "name": "videoID",
                    "description": ""
                },
                {
                    "name": "data",
                    "description": ""
                },
                {
                    "name": "callback",
                    "description": ""
                }
            ],
            "class": "ContentVideoHtml",
            "module": "ContentVideoHtml"
        },
        {
            "file": "src/capabilities/ACT_contentVideoHtml.js",
            "line": 815,
            "description": "Play video from the very beginning",
            "itemtype": "method",
            "name": "start",
            "class": "ContentVideoHtml",
            "module": "ContentVideoHtml"
        },
        {
            "file": "src/capabilities/ACT_contentVideoHtml.js",
            "line": 823,
            "description": "Play video from start time position\nIf startTime is not set then the video will play from current position",
            "params": [
                {
                    "name": "startTime",
                    "description": ""
                }
            ],
            "class": "ContentVideoHtml",
            "module": "ContentVideoHtml"
        },
        {
            "file": "src/capabilities/ACT_contentVideoHtml.js",
            "line": 836,
            "description": "Seeking video to a particular percentage",
            "itemtype": "method",
            "name": "seek",
            "params": [
                {
                    "name": "percentage",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "ContentVideoHtml",
            "module": "ContentVideoHtml"
        },
        {
            "file": "src/capabilities/ACT_contentVideoHtml.js",
            "line": 853,
            "description": "Stop the video and set current position to the beginning",
            "itemtype": "method",
            "name": "stop",
            "class": "ContentVideoHtml",
            "module": "ContentVideoHtml"
        },
        {
            "file": "src/capabilities/ACT_contentVideoHtml.js",
            "line": 862,
            "description": "Pause the video at current positions.\nIf new time is set, then the current time of the video will be set to new time value",
            "itemtype": "method",
            "name": "pause",
            "params": [
                {
                    "name": "newTime",
                    "description": "",
                    "type": "Integer",
                    "optional": true
                }
            ],
            "class": "ContentVideoHtml",
            "module": "ContentVideoHtml"
        },
        {
            "file": "src/capabilities/ACT_contentVideoHtml.js",
            "line": 877,
            "description": "Turn on the sound of the video",
            "itemtype": "method",
            "name": "soundOn",
            "class": "ContentVideoHtml",
            "module": "ContentVideoHtml"
        },
        {
            "file": "src/capabilities/ACT_contentVideoHtml.js",
            "line": 886,
            "description": "Turn off the sound of the video",
            "itemtype": "method",
            "name": "soundOff",
            "class": "ContentVideoHtml",
            "module": "ContentVideoHtml"
        },
        {
            "file": "src/capabilities/ACT_contentVideoHtml.js",
            "line": 895,
            "description": "Request Full Screen",
            "itemtype": "method",
            "name": "fullScreen",
            "class": "ContentVideoHtml",
            "module": "ContentVideoHtml"
        },
        {
            "file": "src/capabilities/ACT_contentYoutube.js",
            "line": 87,
            "description": "Constant values",
            "class": "ContentYoutube",
            "module": "ContentYoutube"
        },
        {
            "file": "src/capabilities/ACT_contentYoutube.js",
            "line": 285,
            "is_constructor": 1,
            "class": "ContentYoutube",
            "module": "ContentYoutube"
        },
        {
            "file": "src/capabilities/ACT_contentYoutube.js",
            "line": 295,
            "itemtype": "attribute",
            "name": "NAME",
            "type": "String",
            "class": "ContentYoutube",
            "module": "ContentYoutube"
        },
        {
            "file": "src/capabilities/ACT_contentYoutube.js",
            "line": 301,
            "itemtype": "attribute",
            "name": "configObject",
            "type": "Object",
            "class": "ContentYoutube",
            "module": "ContentYoutube"
        },
        {
            "file": "src/capabilities/ACT_contentYoutube.js",
            "line": 307,
            "itemtype": "attribute",
            "name": "node",
            "type": "HTMLElement",
            "class": "ContentYoutube",
            "module": "ContentYoutube"
        },
        {
            "file": "src/capabilities/ACT_contentYoutube.js",
            "line": 313,
            "attrbite": "store",
            "type": "array",
            "class": "ContentYoutube",
            "module": "ContentYoutube"
        },
        {
            "file": "src/capabilities/ACT_contentYoutube.js",
            "line": 321,
            "description": "Create youtube instance and enclose logic",
            "itemtype": "method",
            "name": "renderYoutube",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "config",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "store",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "node",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Function"
            },
            "class": "ContentYoutube",
            "module": "ContentYoutube"
        },
        {
            "file": "src/capabilities/ACT_contentYoutube.js",
            "line": 435,
            "description": "Generate the node youtube",
            "itemtype": "method",
            "name": "renderNodeYoutube",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "config",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "HTMLElement"
            },
            "class": "ContentYoutube",
            "module": "ContentYoutube"
        },
        {
            "file": "src/capabilities/ACT_contentYoutube.js",
            "line": 478,
            "description": "Attach action for to a local store",
            "itemtype": "method",
            "name": "attachAction",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "store",
                    "description": "",
                    "type": "Array"
                }
            ],
            "class": "ContentYoutube",
            "module": "ContentYoutube"
        },
        {
            "file": "src/capabilities/ACT_contentYoutube.js",
            "line": 491,
            "description": "Loop all video events and subscribe them",
            "itemtype": "method",
            "name": "subscribeActionsToVideoEvents",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "config",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "store",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "store",
                "type": "Array"
            },
            "class": "ContentYoutube",
            "module": "ContentYoutube"
        },
        {
            "file": "src/capabilities/ACT_contentYoutube.js",
            "line": 519,
            "description": "Testing purpose only",
            "class": "ContentYoutube",
            "module": "ContentYoutube"
        },
        {
            "file": "src/capabilities/ACT_contentYoutube.js",
            "line": 525,
            "description": "Function auto initiated when the class is instantiated",
            "itemtype": "method",
            "name": "initializer",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "config",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "ContentYoutube",
            "module": "ContentYoutube"
        },
        {
            "file": "src/capabilities/ACT_contentYoutube.js",
            "line": 543,
            "description": "Function to initialize event listeners for this instance",
            "itemtype": "method",
            "name": "initializeListeners",
            "class": "ContentYoutube",
            "module": "ContentYoutube"
        },
        {
            "file": "src/capabilities/ACT_contentYoutube.js",
            "line": 588,
            "description": "Function called when the instance is destroyed",
            "itemtype": "method",
            "name": "destructor",
            "access": "public",
            "tagname": "",
            "class": "ContentYoutube",
            "module": "ContentYoutube"
        },
        {
            "file": "src/capabilities/ACT_contentYoutube.js",
            "line": 622,
            "description": "Render the node from given config object, environment and orientation state",
            "itemtype": "method",
            "name": "renderContent",
            "params": [
                {
                    "name": "configObject",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "env",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "orientation",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "node",
                "type": "HTMLElement"
            },
            "class": "ContentYoutube",
            "module": "ContentYoutube"
        },
        {
            "file": "src/capabilities/ACT_contentYoutube.js",
            "line": 638,
            "description": "Function generating the youtube node",
            "itemtype": "method",
            "name": "getContent",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "env",
                    "description": "Environment for rendering content such as html/flash/backup",
                    "type": "String"
                },
                {
                    "name": "orientation",
                    "description": "Orientation of current device such as landscape and portraits for mobile",
                    "type": "String"
                }
            ],
            "return": {
                "description": "node",
                "type": "HTMLElement"
            },
            "class": "ContentYoutube",
            "module": "ContentYoutube"
        },
        {
            "file": "src/capabilities/ACT_contentYoutube.js",
            "line": 657,
            "description": "Start the video",
            "itemtype": "method",
            "name": "start",
            "class": "ContentYoutube",
            "module": "ContentYoutube"
        },
        {
            "file": "src/capabilities/ACT_contentYoutube.js",
            "line": 676,
            "description": "Stop the video",
            "itemtype": "method",
            "name": "stop",
            "class": "ContentYoutube",
            "module": "ContentYoutube"
        },
        {
            "file": "src/capabilities/ACT_contentYoutube.js",
            "line": 695,
            "description": "Play the video",
            "itemtype": "method",
            "name": "play",
            "class": "ContentYoutube",
            "module": "ContentYoutube"
        },
        {
            "file": "src/capabilities/ACT_contentYoutube.js",
            "line": 713,
            "description": "Pause the video",
            "itemtype": "method",
            "name": "pause",
            "class": "ContentYoutube",
            "module": "ContentYoutube"
        },
        {
            "file": "src/capabilities/ACT_contentYoutube.js",
            "line": 731,
            "description": "Turn on the sound of the video",
            "itemtype": "method",
            "name": "soundOn",
            "class": "ContentYoutube",
            "module": "ContentYoutube"
        },
        {
            "file": "src/capabilities/ACT_contentYoutube.js",
            "line": 749,
            "description": "Turn off the sound of the video",
            "itemtype": "method",
            "name": "soundOff",
            "class": "ContentYoutube",
            "module": "ContentYoutube"
        },
        {
            "file": "src/core/ACT.js",
            "line": 52,
            "description": "Traverse the queue of modules, if all the requirements have been met load it in.",
            "itemtype": "method",
            "name": "checkQueue",
            "access": "private",
            "tagname": "",
            "class": "ACT",
            "module": "ACT"
        },
        {
            "file": "src/core/ACT.js",
            "line": 70,
            "description": "Given that we have no more modules to load, run through the queue of functions that need to execute and execute them",
            "itemtype": "method",
            "name": "runQueue",
            "access": "private",
            "tagname": "",
            "class": "ACT",
            "module": "ACT"
        },
        {
            "file": "src/core/ACT.js",
            "line": 92,
            "description": "Given an object '{}' return the number of properties ( elements ) it contains.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "countProperties",
            "params": [
                {
                    "name": "obj",
                    "description": "Object to return the count from",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "count Number of properties contained in the object provided.",
                "type": "Number"
            },
            "class": "ACT",
            "module": "ACT"
        },
        {
            "file": "src/core/ACT.js",
            "line": 117,
            "description": "Include module being loaded in. Make sure to only load the new version.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "includeModules",
            "params": [
                {
                    "name": "name",
                    "description": "Name of the module being loaded in",
                    "type": "String"
                },
                {
                    "name": "requires",
                    "description": "Array of the modules that this one has dependencies on.",
                    "type": "Array"
                },
                {
                    "name": "factory",
                    "description": "Function that executes to load in this modules.",
                    "type": "Function"
                }
            ],
            "class": "ACT",
            "module": "ACT"
        },
        {
            "file": "src/core/ACT.js",
            "line": 149,
            "description": "Check that the dependencies for a given module have been loaded in.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "checkDependencies",
            "params": [
                {
                    "name": "requires",
                    "description": "Array of the required dependencies for this module to function",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "true if all dependencies have been met, false otherwise.",
                "type": "Boolean"
            },
            "class": "ACT",
            "module": "ACT"
        },
        {
            "file": "src/core/ACT.js",
            "line": 166,
            "description": "Include the defined module - either into the queue or the defined module set.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "include",
            "params": [
                {
                    "name": "group",
                    "description": "Set to add the new factory / module",
                    "type": "Object"
                },
                {
                    "name": "name",
                    "description": "The name of the  module",
                    "type": "String"
                },
                {
                    "name": "requires",
                    "description": "Array of dependencies",
                    "type": "Array"
                },
                {
                    "name": "factory",
                    "description": "The function to execute once all the requirements have been met.",
                    "type": "Function"
                }
            ],
            "class": "ACT",
            "module": "ACT"
        },
        {
            "file": "src/core/ACT.js",
            "line": 195,
            "itemtype": "attribute",
            "name": "ATTRS",
            "type": "{{NAME: string, version: number}}",
            "class": "ACT",
            "module": "ACT"
        },
        {
            "file": "src/core/ACT.js",
            "line": 203,
            "description": "Define a new module to be used with ACT",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "define",
            "params": [
                {
                    "name": "name",
                    "description": "Module name",
                    "type": "String"
                },
                {
                    "name": "requires",
                    "description": "Module dependencies",
                    "type": "Array"
                },
                {
                    "name": "factory",
                    "description": "Factory method",
                    "type": "Object"
                }
            ],
            "class": "ACT",
            "module": "ACT"
        },
        {
            "file": "src/core/ACT.js",
            "line": 218,
            "description": "Checks if all modules and dependencies were loaded",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "ready",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "ACT",
            "module": "ACT"
        },
        {
            "file": "src/core/ACT.js",
            "line": 263,
            "description": "Add a required module to the set of required modules",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "addRequired",
            "params": [
                {
                    "name": "String",
                    "description": "name of the modules",
                    "type": "String"
                }
            ],
            "return": {
                "description": "true if already included, false otherwise.",
                "type": "Boolean"
            },
            "class": "ACT",
            "module": "ACT"
        },
        {
            "file": "src/core/ACT.js",
            "line": 279,
            "description": "Return the configuration ( superConf ) by name.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getConfig",
            "params": [
                {
                    "name": "name",
                    "description": "Name of the configuration object to return.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Configuration object, empty if not found.",
                "type": "Object"
            },
            "class": "ACT",
            "module": "ACT"
        },
        {
            "file": "src/core/ACT.js",
            "line": 296,
            "description": "Set the configuration object as it's loaded.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "setConfig",
            "params": [
                {
                    "name": "name",
                    "description": "Name of the configuration object that is being loaded in",
                    "type": "String"
                },
                {
                    "name": "obj",
                    "description": "Object defining the configuration that is being loaded.",
                    "type": "Object"
                }
            ],
            "class": "ACT",
            "module": "ACT"
        },
        {
            "file": "src/core/ACT.js",
            "line": 317,
            "description": "NOTE: SafeFrames forces us to define the config before we include the library, like this:\n\nTraditional approach:\n<script language='javascript' src='library/files.js'></script>\n<script>\nvar ad = ACT.base({});\n</script>\n\nBecause of the load sequence is async in some browsers due to SafeFrames, having the config queue up\nguarantees that we execute the ad after the full library loaded, and the traditional approach changes to:\n\n<script>\n\nif (!window.ACT) {\n           var ACT = {\n               adQueue:[];\n           };\n       }\nfunction MASTAD() {\n           var ad = ACT.base({});\n       }\nACT.adQueue.push( MASTAD );\n\n</script>\n<script language='javascript' src='library/files.js'></script>",
            "class": "ACT",
            "module": "ACT"
        },
        {
            "file": "src/core/ACT_Layerslist.js",
            "line": 27,
            "description": "Actions for LayersList module",
            "array": "actions",
            "access": "private",
            "tagname": "",
            "class": "LayersList",
            "module": "LayersList"
        },
        {
            "file": "src/core/ACT_Layerslist.js",
            "line": 88,
            "is_constructor": 1,
            "class": "LayersList",
            "module": "LayersList"
        },
        {
            "file": "src/core/ACT_Layerslist.js",
            "line": 113,
            "description": "Method to start off listeners",
            "itemtype": "method",
            "name": "initListeners",
            "access": "public",
            "tagname": "",
            "class": "LayersList",
            "module": "LayersList"
        },
        {
            "file": "src/core/ACT_Layerslist.js",
            "line": 165,
            "description": "Function to create layer objects based on theirs configObject\nNew layer objects will be pushed in layersList attributes",
            "itemtype": "method",
            "name": "createLayers",
            "params": [
                {
                    "name": "Object",
                    "description": "layersConfig",
                    "optional": true
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "LayersList",
            "module": "LayersList"
        },
        {
            "file": "src/core/ACT_Layerslist.js",
            "line": 193,
            "description": "Function to create new LayerStandard from config object",
            "itemtype": "method",
            "name": "makeNormalLayer",
            "params": [
                {
                    "name": "layerConfig",
                    "description": "Config Object for new layer",
                    "type": "Object"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "LayersList",
            "module": "LayersList"
        },
        {
            "file": "src/core/ACT_Layerslist.js",
            "line": 215,
            "description": "Return the required layer from the layersList array, otherwise return false if not found",
            "itemtype": "method",
            "name": "getLayer",
            "params": [
                {
                    "name": "layerName",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "layer from layersList array",
                "type": "Object"
            },
            "access": "public",
            "tagname": "",
            "class": "LayersList",
            "module": "LayersList"
        },
        {
            "file": "src/core/ACT_Layerslist.js",
            "line": 238,
            "description": "Function to check if the layer exists in the config",
            "itemtype": "method",
            "name": "checkLayerExists",
            "params": [
                {
                    "name": "layerName",
                    "description": "name of the layer",
                    "type": "String"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "LayersList",
            "module": "LayersList"
        },
        {
            "file": "src/core/ACT_Layerslist.js",
            "line": 255,
            "description": "Function to play all declared layers",
            "itemtype": "method",
            "name": "playAllLayers",
            "access": "public",
            "tagname": "",
            "class": "LayersList",
            "module": "LayersList"
        },
        {
            "file": "src/core/ACT_Layerslist.js",
            "line": 279,
            "description": "Play a layer",
            "itemtype": "method",
            "name": "playLayer",
            "params": [
                {
                    "name": "layerName",
                    "description": "Name of the layer to be played",
                    "type": "String"
                },
                {
                    "name": "actionId",
                    "description": "ID of the action sent by actionsQueue to play layer",
                    "type": "Number"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "LayersList",
            "module": "LayersList"
        },
        {
            "file": "src/core/ACT_Layerslist.js",
            "line": 299,
            "description": "Defining action to be executed when layer is played",
            "itemtype": "method",
            "name": "playLayerAction",
            "params": [
                {
                    "name": "layerObject",
                    "description": "Layer instance",
                    "type": "LayerStandard"
                },
                {
                    "name": "actionId",
                    "description": "Id of the playLayer action in the queue",
                    "type": "Number"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "LayersList",
            "module": "LayersList"
        },
        {
            "file": "src/core/ACT_Layerslist.js",
            "line": 326,
            "description": "Method to stop all the layers by creating a new close action per layers and add them into queue",
            "itemtype": "method",
            "name": "stopAllLayers",
            "access": "public",
            "tagname": "",
            "class": "LayersList",
            "module": "LayersList"
        },
        {
            "file": "src/core/ACT_Layerslist.js",
            "line": 349,
            "description": "Stop a layer",
            "itemtype": "method",
            "name": "stopLayer",
            "params": [
                {
                    "name": "attrs",
                    "description": "Object containing action data of the layer to be stopped",
                    "type": "Object"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "LayersList",
            "module": "LayersList"
        },
        {
            "file": "src/core/ACT_Layerslist.js",
            "line": 364,
            "itemtype": "method",
            "name": "stopLayerAction",
            "params": [
                {
                    "name": "savedLayer",
                    "description": "Layer to be stopped",
                    "type": "LayerStandard"
                },
                {
                    "name": "actionId",
                    "description": "Id of the stopLayer action in the queue",
                    "type": "Number"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "LayersList",
            "module": "LayersList"
        },
        {
            "file": "src/core/ACT_Layerslist.js",
            "line": 381,
            "description": "method to check if a layer is playing",
            "itemtype": "method",
            "name": "isLayerPlaying",
            "params": [
                {
                    "name": "layerName",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "true if layer is playing",
                "type": "Boolean"
            },
            "access": "public",
            "tagname": "",
            "class": "LayersList",
            "module": "LayersList"
        },
        {
            "file": "src/core/ACT_Layerslist.js",
            "line": 397,
            "itemtype": "method",
            "name": "applyingCoordinate",
            "params": [
                {
                    "name": "targetAttr",
                    "description": "coordinate to get from",
                    "type": "String"
                },
                {
                    "name": "layerPosition",
                    "description": "inline layer position",
                    "type": "NUmber"
                },
                {
                    "name": "requestLayer",
                    "description": "inline layer object",
                    "type": "Object"
                },
                {
                    "name": "targetLayer",
                    "description": "overlay layer object",
                    "type": "Object"
                },
                {
                    "name": "coordinate",
                    "description": "to use to stick layer to",
                    "type": "String"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "LayersList",
            "module": "LayersList"
        },
        {
            "file": "src/core/ACT_Layerslist.js",
            "line": 456,
            "itemtype": "method",
            "name": "calculateLayerAttributeValue",
            "params": [
                {
                    "name": "layerName",
                    "description": "Name of layer which need to calculate the position",
                    "type": "String"
                },
                {
                    "name": "attrValue",
                    "description": "to be tested",
                    "type": "String"
                },
                {
                    "name": "Coordinate",
                    "description": "for calculating (tl, tr, bl, br)",
                    "type": "String"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "LayersList",
            "module": "LayersList"
        },
        {
            "file": "src/core/ACT_Layerslist.js",
            "line": 482,
            "description": "Function to calculate position for a layer based on other layer position",
            "itemtype": "method",
            "name": "getLayerPosition",
            "params": [
                {
                    "name": "layerName",
                    "description": "Name of layer which need to calculate the position",
                    "type": "String"
                },
                {
                    "name": "coordinate",
                    "description": "Coordinate for calculating (tl, tr, bl, br)",
                    "type": "String"
                },
                {
                    "name": "attributes",
                    "description": "List of attribute need to be calculated",
                    "type": "Object"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "LayersList",
            "module": "LayersList"
        },
        {
            "file": "src/core/ACT_Layerslist.js",
            "line": 516,
            "description": "Function to stop or replay layer on resize.",
            "itemtype": "method",
            "name": "onResize",
            "params": [
                {
                    "name": "savelayer",
                    "description": "",
                    "type": "String"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "LayersList",
            "module": "LayersList"
        },
        {
            "file": "src/core/ACT_Layerslist.js",
            "line": 549,
            "description": "Destructor function",
            "itemtype": "method",
            "name": "destructor",
            "access": "public",
            "tagname": "",
            "class": "LayersList",
            "module": "LayersList"
        },
        {
            "file": "src/core/ACT_Screen.js",
            "line": 33,
            "description": "Function returns the window width in non-safeframe environment",
            "itemtype": "method",
            "name": "getStandardWindowWidth",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "windowWidth",
                "type": "Integer"
            },
            "class": "Screen",
            "module": "Screen"
        },
        {
            "file": "src/core/ACT_Screen.js",
            "line": 45,
            "description": "Function returns the window height in non-safeframe environment",
            "itemtype": "method",
            "name": "getStandardWindowHeight",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "windowHeight",
                "type": "Integer"
            },
            "class": "Screen",
            "module": "Screen"
        },
        {
            "file": "src/core/ACT_Screen.js",
            "line": 57,
            "description": "Function returns the window orientation in non-safeframe environment, P or L",
            "itemtype": "method",
            "name": "getStandardWindowOrientation",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "Orientation",
                "type": "String"
            },
            "class": "Screen",
            "module": "Screen"
        },
        {
            "file": "src/core/ACT_Screen.js",
            "line": 76,
            "description": "Function returns the window orientation inside safeframe, P or L",
            "itemtype": "method",
            "name": "getSafeFrameWindowOrientation",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "sFrameW",
                    "description": "Safeframe width",
                    "type": "Integer"
                },
                {
                    "name": "sFrameH",
                    "description": "Safeframe height",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "Orientation",
                "type": "String"
            },
            "class": "Screen",
            "module": "Screen"
        },
        {
            "file": "src/core/ACT_Screen.js",
            "line": 92,
            "is_constructor": 1,
            "class": "Screen",
            "module": "Screen"
        },
        {
            "file": "src/core/ACT_Screen.js",
            "line": 100,
            "description": "default attribute",
            "class": "Screen",
            "module": "Screen"
        },
        {
            "file": "src/core/ACT_Screen.js",
            "line": 105,
            "itemtype": "attribute",
            "name": "NAME",
            "type": "String",
            "class": "Screen",
            "module": "Screen"
        },
        {
            "file": "src/core/ACT_Screen.js",
            "line": 111,
            "itemtype": "attribute",
            "name": "sDarlaAPI",
            "type": "undefined",
            "class": "Screen",
            "module": "Screen"
        },
        {
            "file": "src/core/ACT_Screen.js",
            "line": 117,
            "itemtype": "attribute",
            "name": "status",
            "type": "Object",
            "class": "Screen",
            "module": "Screen"
        },
        {
            "file": "src/core/ACT_Screen.js",
            "line": 128,
            "description": "Public properties",
            "class": "Screen",
            "module": "Screen"
        },
        {
            "file": "src/core/ACT_Screen.js",
            "line": 133,
            "description": "Function auto initiated when the class is instantiated",
            "itemtype": "method",
            "name": "initializer",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "config",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Screen",
            "module": "Screen"
        },
        {
            "file": "src/core/ACT_Screen.js",
            "line": 150,
            "description": "Return the screen status attribute",
            "itemtype": "method",
            "name": "getStatus",
            "access": "public",
            "tagname": "",
            "return": {
                "description": "status attribute",
                "type": "Object"
            },
            "class": "Screen",
            "module": "Screen"
        },
        {
            "file": "src/core/ACT_Screen.js",
            "line": 162,
            "description": "Set the screen status depending on environment",
            "itemtype": "method",
            "name": "setStatus",
            "access": "public",
            "tagname": "",
            "class": "Screen",
            "module": "Screen"
        },
        {
            "file": "src/core/ACT_Screen.js",
            "line": 190,
            "description": "Set the screen status in a non-safeframe environment",
            "itemtype": "method",
            "name": "setStatusStandard",
            "access": "public",
            "tagname": "",
            "class": "Screen",
            "module": "Screen"
        },
        {
            "file": "src/core/ACT_Screen.js",
            "line": 205,
            "description": "Set the screen status in a safeframe environment",
            "itemtype": "method",
            "name": "setStatusSF",
            "access": "public",
            "tagname": "",
            "class": "Screen",
            "module": "Screen"
        },
        {
            "file": "src/core/ACT_Screen.js",
            "line": 222,
            "description": "Start listening to the onresize event in standard environment",
            "itemtype": "method",
            "name": "startListenScreenStandard",
            "access": "public",
            "tagname": "",
            "class": "Screen",
            "module": "Screen"
        },
        {
            "file": "src/core/ACT_Screen.js",
            "line": 247,
            "description": "Start listening to the onresize event in safeframe environment",
            "itemtype": "method",
            "name": "startListenScreenSF",
            "access": "public",
            "tagname": "",
            "class": "Screen",
            "module": "Screen"
        },
        {
            "file": "src/core/ACT_StandardAd.js",
            "line": 69,
            "itemtype": "attribute",
            "name": "activeCounters",
            "access": "private",
            "tagname": "",
            "static": 1,
            "type": "Array",
            "class": "StandardAd",
            "module": "Screen"
        },
        {
            "file": "src/core/ACT_StandardAd.js",
            "line": 86,
            "description": "Class' attribute list",
            "class": "StandardAd",
            "module": "StandardAd"
        },
        {
            "file": "src/core/ACT_StandardAd.js",
            "line": 92,
            "itemtype": "attribute",
            "name": "baseConfig",
            "class": "StandardAd",
            "module": "StandardAd"
        },
        {
            "file": "src/core/ACT_StandardAd.js",
            "line": 97,
            "itemtype": "attribute",
            "name": "trackingConfig",
            "class": "StandardAd",
            "module": "StandardAd"
        },
        {
            "file": "src/core/ACT_StandardAd.js",
            "line": 102,
            "itemtype": "attribute",
            "name": "format",
            "class": "StandardAd",
            "module": "StandardAd"
        },
        {
            "file": "src/core/ACT_StandardAd.js",
            "line": 107,
            "itemtype": "attribute",
            "name": "sDarlaAPI",
            "class": "StandardAd",
            "module": "StandardAd"
        },
        {
            "file": "src/core/ACT_StandardAd.js",
            "line": 112,
            "itemtype": "attribute",
            "name": "sDarlaKey",
            "class": "StandardAd",
            "module": "StandardAd"
        },
        {
            "file": "src/core/ACT_StandardAd.js",
            "line": 117,
            "itemtype": "attribute",
            "name": "firstPlay",
            "class": "StandardAd",
            "module": "StandardAd"
        },
        {
            "file": "src/core/ACT_StandardAd.js",
            "line": 122,
            "itemtype": "attribute",
            "name": "adEnvToPlay",
            "class": "StandardAd",
            "module": "StandardAd"
        },
        {
            "file": "src/core/ACT_StandardAd.js",
            "line": 127,
            "description": "Current screen status",
            "itemtype": "attribute",
            "name": "status",
            "class": "StandardAd",
            "module": "StandardAd"
        },
        {
            "file": "src/core/ACT_StandardAd.js",
            "line": 133,
            "itemtype": "attribute",
            "name": "states",
            "class": "StandardAd",
            "module": "StandardAd"
        },
        {
            "file": "src/core/ACT_StandardAd.js",
            "line": 138,
            "itemtype": "attribute",
            "name": "isCookieAvailable",
            "class": "StandardAd",
            "module": "StandardAd"
        },
        {
            "file": "src/core/ACT_StandardAd.js",
            "line": 145,
            "description": "Class prototypes",
            "class": "StandardAd",
            "module": "StandardAd"
        },
        {
            "file": "src/core/ACT_StandardAd.js",
            "line": 214,
            "itemtype": "method",
            "name": "initializeEvents",
            "class": "StandardAd",
            "module": "StandardAd"
        },
        {
            "file": "src/core/ACT_StandardAd.js",
            "line": 226,
            "itemtype": "method",
            "name": "startAd",
            "class": "StandardAd",
            "module": "StandardAd"
        },
        {
            "file": "src/core/ACT_StandardAd.js",
            "line": 238,
            "itemtype": "method",
            "name": "setActionTimeout",
            "class": "StandardAd",
            "module": "StandardAd"
        },
        {
            "file": "src/core/ACT_StandardAd.js",
            "line": 248,
            "itemtype": "method",
            "name": "startEnv",
            "class": "StandardAd",
            "module": "StandardAd"
        },
        {
            "file": "src/core/ACT_StandardAd.js",
            "line": 259,
            "description": "Initialize Fresco screen instance",
            "itemtype": "method",
            "name": "startScreen",
            "class": "StandardAd",
            "module": "StandardAd"
        },
        {
            "file": "src/core/ACT_StandardAd.js",
            "line": 275,
            "itemtype": "method",
            "name": "startLayers",
            "class": "StandardAd",
            "module": "StandardAd"
        },
        {
            "file": "src/core/ACT_StandardAd.js",
            "line": 291,
            "description": "Start rendering the ad after all pre-rent works have done",
            "itemtype": "method",
            "name": "onReady",
            "class": "StandardAd",
            "module": "StandardAd"
        },
        {
            "file": "src/core/ACT_StandardAd.js",
            "line": 326,
            "itemtype": "method",
            "name": "executeFlow",
            "class": "StandardAd",
            "module": "StandardAd"
        },
        {
            "file": "src/core/ACT_StandardAd.js",
            "line": 340,
            "itemtype": "method",
            "name": "executeFlowActions",
            "class": "StandardAd",
            "module": "StandardAd"
        },
        {
            "file": "src/core/ACT_StandardAd.js",
            "line": 365,
            "description": "Check the doIf conditional, also confirm that the environment we are served in is allowed to play out our action.",
            "itemtype": "method",
            "name": "isExecutable",
            "class": "StandardAd",
            "module": "StandardAd"
        },
        {
            "file": "src/core/ACT_StandardAd.js",
            "line": 404,
            "description": "Checking if given state is matched with saved state from cookie",
            "itemtype": "method",
            "name": "isStateMatch",
            "params": [
                {
                    "name": "stateCondition",
                    "description": "State to be checked, should be object with format {id: [state_id], value: [state_value]}",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "true if given state is match with saved state",
                "type": "Boolean"
            },
            "class": "StandardAd",
            "module": "StandardAd"
        },
        {
            "file": "src/core/ACT_StandardAd.js",
            "line": 432,
            "description": "Checking if cookieCondition is matching with current cookie state given by cookie module",
            "itemtype": "method",
            "name": "isCookieMatch",
            "class": "StandardAd",
            "module": "StandardAd"
        },
        {
            "file": "src/core/ACT_StandardAd.js",
            "line": 440,
            "description": "Checking dateCondition config with current date",
            "itemtype": "method",
            "name": "isDateMatch",
            "params": [
                {
                    "name": "dateCondition",
                    "description": "Config object for date condition. The object can have 'from' and 'to' attribute to set the date range",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "true of current date is in the date range",
                "type": "Boolean"
            },
            "class": "StandardAd",
            "module": "StandardAd"
        },
        {
            "file": "src/core/ACT_StandardAd.js",
            "line": 488,
            "itemtype": "method",
            "name": "addCounterTrigger",
            "class": "StandardAd",
            "module": "StandardAd"
        },
        {
            "file": "src/core/ACT_StandardAd.js",
            "line": 509,
            "itemtype": "method",
            "name": "stopCounter",
            "class": "StandardAd",
            "module": "StandardAd"
        },
        {
            "file": "src/core/ACT_TrackingFacade.js",
            "line": 16,
            "description": "event list",
            "class": "Tracking",
            "module": "StandardAd"
        },
        {
            "file": "src/core/ACT_TrackingFacade.js",
            "line": 26,
            "description": "Actions for tracking",
            "class": "Tracking",
            "module": "StandardAd"
        },
        {
            "file": "src/core/ACT_TrackingFacade.js",
            "line": 74,
            "itemtype": "method",
            "name": "getMacrosFromString",
            "access": "private",
            "tagname": "",
            "class": "Tracking",
            "module": "StandardAd"
        },
        {
            "file": "src/core/ACT_TrackingFacade.js",
            "line": 83,
            "itemtype": "method",
            "name": "replaceMacros",
            "access": "private",
            "tagname": "",
            "class": "Tracking",
            "module": "StandardAd"
        },
        {
            "file": "src/core/ACT_TrackingFacade.js",
            "line": 151,
            "itemtype": "attribute",
            "name": "ATTRS",
            "type": "{{NAME: string, version: string}}",
            "initonly": "",
            "class": "Tracking",
            "module": "Tracking"
        },
        {
            "file": "src/core/ACT_TrackingFacade.js",
            "line": 164,
            "description": "The configuration property for the Tracking instance",
            "itemtype": "property",
            "name": "config",
            "type": "Object",
            "class": "Tracking",
            "module": "Tracking"
        },
        {
            "file": "src/core/ACT_TrackingFacade.js",
            "line": 195,
            "description": "Function to initialize tracking events",
            "itemtype": "method",
            "name": "initializeEvents",
            "access": "private",
            "tagname": "",
            "class": "Tracking",
            "module": "Tracking"
        },
        {
            "file": "src/core/ACT_TrackingFacade.js",
            "line": 204,
            "description": "Event for register redirect",
            "class": "Tracking",
            "module": "Tracking"
        },
        {
            "file": "src/core/ACT_TrackingFacade.js",
            "line": 218,
            "description": "Event for interaction tracking",
            "class": "Tracking",
            "module": "Tracking"
        },
        {
            "file": "src/core/ACT_TrackingFacade.js",
            "line": 230,
            "itemtype": "method",
            "name": "saveEventLabel",
            "class": "Tracking",
            "module": "Tracking"
        },
        {
            "file": "src/core/ACT_TrackingFacade.js",
            "line": 251,
            "description": "Helper function to call overwriting or supporting tracking functions passed in via the configuration.",
            "itemtype": "method",
            "name": "overwriteTracking",
            "params": [
                {
                    "name": "overwriteSet",
                    "description": "The set of overwrite parameters passed in",
                    "type": "Object"
                },
                {
                    "name": "type",
                    "description": "The type of the function we need - either redirect OR interaction",
                    "type": "String"
                },
                {
                    "name": "args",
                    "description": "The arguments that came into the function either to redirect OR to interaction",
                    "type": "Array"
                }
            ],
            "class": "Tracking",
            "module": "Tracking"
        },
        {
            "file": "src/core/ACT_TrackingFacade.js",
            "line": 268,
            "description": "Redirect Track String Generating function",
            "params": [
                {
                    "name": "trackingString",
                    "description": "StringID of the redirect track  'backup_image_noflash'",
                    "type": "String"
                },
                {
                    "name": "trackingID",
                    "description": "Numeric id of the redirect track  '135'",
                    "type": "Integer"
                },
                {
                    "name": "redirectURL",
                    "description": "URLString to redirect to http://sports.yahoo.com",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Redirect String",
                "type": "String"
            },
            "itemtype": "method",
            "name": "redirect_track",
            "access": "public",
            "tagname": "",
            "static": 1,
            "example": [
                "\n    // Simple Example, no over write function provided:\n    var tracking = new ACT.Tracking();\n    var redirect = tracking.redirect_track(null, null, 'http://www.yahoo.com');\n    ACT.Dom.byId('exampleATag').href = redirect;\n\n    // Complex example with over write function:\n    var config = {\n        trackingFunctions: {\n            overwrite: true,\n            redirect: function(trackingString, trackingID, redirectURL) {\n                     var final_url = 'http://example.tracking.service.com/?name='+trackingString+'&id='+trackingID+'&url='+encodeURIComponent(redirectURL);\n                    return final_url;\n             },\n            interaction: function(trackingString) { ... }\n        }\n    };\n    var tracking = new ACT.tracking(config);\n      var redirect = tracking.redirect_track(\"yahooCTR\", 456, 'http://www.yahoo.com');"
            ],
            "class": "Tracking",
            "module": "Tracking"
        },
        {
            "file": "src/core/ACT_TrackingFacade.js",
            "line": 308,
            "description": "Interaction tracking function",
            "params": [
                {
                    "name": "trackingString",
                    "description": "String ID of the interaction to be tracked",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "interaction_track",
            "return": {
                "description": "an object containing the results of this function call. Specifically:\n    {\n         overwriteFired: {Boolean}, // Did the overwrite function get fired\n         trackingString: {String}, // The tracking string submitted to the function\n         trackingID: {Int}, // ACT.js generated unique ID ( generated from supplied tracking string )\n         result: {Mixed} // Result of calling the provided interaction tracking function.\n    }",
                "type": "Object"
            },
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "Tracking",
            "module": "Tracking"
        },
        {
            "file": "src/core/ACT_TrackingFacade.js",
            "line": 340,
            "itemtype": "method",
            "name": "track",
            "params": [
                {
                    "name": "trackingString",
                    "description": ""
                },
                {
                    "name": "trackingID",
                    "description": ""
                },
                {
                    "name": "redirectURL",
                    "description": ""
                },
                {
                    "name": "callback",
                    "description": ""
                }
            ],
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "Tracking",
            "module": "Tracking"
        },
        {
            "file": "src/core/ACT_actionsQueue.js",
            "line": 78,
            "is_constructor": 1,
            "params": [
                {
                    "name": "config",
                    "description": "ConfigObject to initialize ActionQueues",
                    "type": "Object"
                }
            ],
            "class": "ActionsQueue",
            "module": "actionsQueue"
        },
        {
            "file": "src/core/ACT_actionsQueue.js",
            "line": 87,
            "itemtype": "attribute",
            "name": "NAME",
            "type": "String",
            "class": "ActionsQueue",
            "module": "actionsQueue"
        },
        {
            "file": "src/core/ACT_actionsQueue.js",
            "line": 93,
            "description": "List of actions have been registered\nOnly actions in this list is executable",
            "itemtype": "attribute",
            "name": "registeredActions",
            "type": "Object",
            "class": "ActionsQueue",
            "module": "actionsQueue"
        },
        {
            "file": "src/core/ACT_actionsQueue.js",
            "line": 102,
            "description": "Queue for actions to be executed. This queue is processed with FIFO",
            "itemtype": "attribute",
            "name": "executeQueue",
            "type": "Array",
            "class": "ActionsQueue",
            "module": "actionsQueue"
        },
        {
            "file": "src/core/ACT_actionsQueue.js",
            "line": 110,
            "description": "Flag for executing action. False means no action is executed at the moment and queue can run",
            "itemtype": "attribute",
            "name": "isRunning",
            "type": "Boolean",
            "default": "false",
            "class": "ActionsQueue",
            "module": "actionsQueue"
        },
        {
            "file": "src/core/ACT_actionsQueue.js",
            "line": 119,
            "description": "Current executing action",
            "itemtype": "attribute",
            "name": "currentAction",
            "type": "Object\ndefault null",
            "class": "ActionsQueue",
            "module": "actionsQueue"
        },
        {
            "file": "src/core/ACT_actionsQueue.js",
            "line": 128,
            "description": "setTimeout function variable",
            "itemtype": "attribute",
            "name": "timer",
            "type": "Object\ndefault null",
            "class": "ActionsQueue",
            "module": "actionsQueue"
        },
        {
            "file": "src/core/ACT_actionsQueue.js",
            "line": 136,
            "description": "timeout (in seconds) for executing an action",
            "itemtype": "attribute",
            "name": "actionTimeout",
            "type": "Number\ndefault 1",
            "class": "ActionsQueue",
            "module": "actionsQueue"
        },
        {
            "file": "src/core/ACT_actionsQueue.js",
            "line": 144,
            "description": "latest queue position Id",
            "itemtype": "attribute",
            "name": "positionId",
            "type": "Number\ndefault 0",
            "class": "ActionsQueue",
            "module": "actionsQueue"
        },
        {
            "file": "src/core/ACT_actionsQueue.js",
            "line": 161,
            "itemtype": "event",
            "name": "register:Actions",
            "params": [
                {
                    "name": "List",
                    "description": "of actions' definition to be registered",
                    "type": "Array | Object"
                }
            ],
            "class": "ActionsQueue",
            "module": "actionsQueue"
        },
        {
            "file": "src/core/ACT_actionsQueue.js",
            "line": 169,
            "itemtype": "event",
            "name": "add:actions",
            "params": [
                {
                    "name": "List",
                    "description": "of actions to be execute",
                    "type": "Array | Object"
                }
            ],
            "class": "ActionsQueue",
            "module": "actionsQueue"
        },
        {
            "file": "src/core/ACT_actionsQueue.js",
            "line": 177,
            "itemtype": "event",
            "name": "complete:action",
            "class": "ActionsQueue",
            "module": "actionsQueue"
        },
        {
            "file": "src/core/ACT_actionsQueue.js",
            "line": 190,
            "description": "Register list of actions into ActionsQueue so it can be executable.",
            "itemtype": "method",
            "name": "registerActions",
            "params": [
                {
                    "name": "Array | Object",
                    "description": "actions List of actions' definition to be registered",
                    "optional": true
                }
            ],
            "class": "ActionsQueue",
            "module": "actionsQueue"
        },
        {
            "file": "src/core/ACT_actionsQueue.js",
            "line": 221,
            "description": "Adding list of actions (or single action ) into the queue.\nIf the input is Array then it's a list of action\nIf the input is Object then it's a single action",
            "itemtype": "method",
            "name": "addActions",
            "params": [
                {
                    "name": "actions",
                    "description": "List of actions or an action",
                    "type": "Array | Object"
                }
            ],
            "return": {
                "description": "true if input is valid",
                "type": "Boolean"
            },
            "class": "ActionsQueue",
            "module": "actionsQueue"
        },
        {
            "file": "src/core/ACT_actionsQueue.js",
            "line": 255,
            "description": "Checking if arguments come with the action are satisfied with action definition",
            "itemtype": "method",
            "name": "isActionArgumentsValid",
            "params": [
                {
                    "name": "action",
                    "description": "Action to be assessed",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "true if action is valid",
                "type": "Boolean"
            },
            "class": "ActionsQueue",
            "module": "actionsQueue"
        },
        {
            "file": "src/core/ACT_actionsQueue.js",
            "line": 285,
            "description": "Function to execute given action",
            "itemtype": "method",
            "name": "executeAction",
            "params": [
                {
                    "name": "action",
                    "description": "Action to be executed",
                    "type": "Object"
                }
            ],
            "class": "ActionsQueue",
            "module": "actionsQueue"
        },
        {
            "file": "src/core/ACT_actionsQueue.js",
            "line": 311,
            "description": "Checking if action is valid\naction is valid if:\n   is an object\n   has type\n   type is registered in registeredActions",
            "itemtype": "method",
            "name": "isValidAction",
            "params": [
                {
                    "name": "action",
                    "description": "Action to be verified",
                    "type": "Object"
                }
            ],
            "class": "ActionsQueue",
            "module": "actionsQueue"
        },
        {
            "file": "src/core/ACT_actionsQueue.js",
            "line": 326,
            "description": "Push item to the end of the queue",
            "itemtype": "method",
            "name": "enqueue",
            "params": [
                {
                    "name": "action",
                    "description": "Action to be push into the queue",
                    "type": "Object"
                }
            ],
            "class": "ActionsQueue",
            "module": "actionsQueue"
        },
        {
            "file": "src/core/ACT_actionsQueue.js",
            "line": 344,
            "description": "Removes the specified item (by queuePositionId) out of the queue",
            "itemtype": "method",
            "name": "dequeue",
            "return": {
                "description": "First item on the actions queue",
                "type": "Object"
            },
            "class": "ActionsQueue",
            "module": "actionsQueue"
        },
        {
            "file": "src/core/ACT_actionsQueue.js",
            "line": 362,
            "description": "Run the queue by getting the first item in the queue and execute this\nTo make sure the queue is running syncronym, a running flag will be checked before executing any action",
            "itemtype": "method",
            "name": "runQueue",
            "class": "ActionsQueue",
            "module": "actionsQueue"
        },
        {
            "file": "src/core/ACT_actionsQueue.js",
            "line": 393,
            "description": "Notify to queue that the current executing action has finished and ready for the next one",
            "itemtype": "method",
            "name": "completeAction",
            "class": "ActionsQueue",
            "module": "actionsQueue"
        },
        {
            "file": "src/core/ACT_actionsQueue.js",
            "line": 410,
            "description": "set the global timeout value",
            "itemtype": "method",
            "name": "setActionTimeout",
            "params": [
                {
                    "name": "timeoutValue",
                    "description": "global timeout value to apply to timer",
                    "type": "Number"
                }
            ],
            "class": "ActionsQueue",
            "module": "actionsQueue"
        },
        {
            "file": "src/core/ACT_actionsQueue.js",
            "line": 420,
            "description": "start the timeout",
            "itemtype": "method",
            "name": "startTimeout",
            "params": [
                {
                    "name": "actionType",
                    "description": "action Type using the timer",
                    "type": "String"
                },
                {
                    "name": "timeout",
                    "description": "timeout value to apply to timer",
                    "type": "Number"
                }
            ],
            "class": "ActionsQueue",
            "module": "actionsQueue"
        },
        {
            "file": "src/core/ACT_actionsQueue.js",
            "line": 463,
            "description": "Function to be called when the instance is destroyed",
            "itemtype": "method",
            "name": "destructor",
            "class": "ActionsQueue",
            "module": "actionsQueue"
        },
        {
            "file": "src/core/ACT_base.js",
            "line": 100,
            "itemtype": "attribute",
            "name": "ATTRS",
            "type": "{{NAME: string, version: string}}",
            "initonly": "",
            "class": "Base",
            "module": "Base"
        },
        {
            "file": "src/core/ACT_base.js",
            "line": 111,
            "description": "Basic Config - will be removed here and config will be defined as empty obj.",
            "itemtype": "property",
            "name": "config",
            "type": "Object",
            "class": "Base",
            "module": "Base"
        },
        {
            "file": "src/core/ACT_base.js",
            "line": 118,
            "description": "Start up the Standard Ad if the superConf is supplied.",
            "itemtype": "method",
            "name": "register",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Base",
            "module": "Base"
        },
        {
            "file": "src/core/ACT_base.js",
            "line": 168,
            "description": "A wrapper for StandardAd initialization. This is here to optimize the 'register' function.",
            "itemtype": "method",
            "name": "loadStandardAd",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Base",
            "module": "Base"
        },
        {
            "file": "src/core/ACT_base.js",
            "line": 200,
            "description": "Starts up the ad, instantiating all the necessary key players for an ad to work",
            "itemtype": "method",
            "name": "start",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "Base",
            "module": "Base"
        },
        {
            "file": "src/core/ACT_base.js",
            "line": 219,
            "description": "A function to fire pixels",
            "params": [
                {
                    "name": "pixels",
                    "description": ""
                }
            ],
            "class": "Base",
            "module": "Base"
        },
        {
            "file": "src/core/ACT_base.js",
            "line": 260,
            "description": "A method that places the 'ad_init' function `onload`",
            "itemtype": "method",
            "name": "loadListeners",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "Base",
            "module": "Base"
        },
        {
            "file": "src/core/ACT_base.js",
            "line": 294,
            "description": "An empty function to be overwritten via 'extend'",
            "itemtype": "method",
            "name": "init",
            "access": "public",
            "tagname": "",
            "class": "Base",
            "module": "Base"
        },
        {
            "file": "src/core/ACT_base.js",
            "line": 303,
            "description": "An empty function to be overwritten via 'extend'",
            "itemtype": "method",
            "name": "ad_init",
            "access": "public",
            "tagname": "",
            "class": "Base",
            "module": "Base"
        },
        {
            "file": "src/core/ACT_cookie.js",
            "line": 17,
            "description": "default values",
            "class": "Cookie",
            "module": "Base"
        },
        {
            "file": "src/core/ACT_cookie.js",
            "line": 44,
            "description": "EVENTS",
            "class": "Cookie",
            "module": "Base"
        },
        {
            "file": "src/core/ACT_cookie.js",
            "line": 88,
            "description": "Actions to be registered",
            "class": "Cookie",
            "module": "Base"
        },
        {
            "file": "src/core/ACT_cookie.js",
            "line": 157,
            "description": "Cookie Helper Utilities - STANDARD COOKIE",
            "access": "private",
            "tagname": "",
            "class": "Cookie",
            "module": "Base"
        },
        {
            "file": "src/core/ACT_cookie.js",
            "line": 163,
            "description": "The type of the current cookie functionality in use.",
            "itemtype": "attribute",
            "name": "standardCookie.TYPE",
            "type": "{String}",
            "initonly": "",
            "access": "private",
            "tagname": "",
            "class": "Cookie",
            "module": "Base"
        },
        {
            "file": "src/core/ACT_cookie.js",
            "line": 172,
            "description": "Test to see if user has cookies enabled.",
            "params": [
                {
                    "name": "domain",
                    "description": "The domain name of the cookie.",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "standardCookie.test",
            "return": {
                "description": "true is able to write cookies false otherwise.",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "Cookie",
            "module": "Base"
        },
        {
            "file": "src/core/ACT_cookie.js",
            "line": 191,
            "description": "Sets the cookie",
            "params": [
                {
                    "name": "cookieName",
                    "description": "The name of the cookie.",
                    "type": "String"
                },
                {
                    "name": "cookieContent",
                    "description": "The value of the cookie - string OR simple Object. Currently only supports the following character set: [a-zA-Z0-9&=_]",
                    "type": "Object"
                },
                {
                    "name": "domain",
                    "description": "Domain under which to store the cookie. Defaults to yahoo.com",
                    "type": "String"
                },
                {
                    "name": "expires",
                    "description": "How long to stay alive. Defaults to 24 hours",
                    "type": "Number"
                },
                {
                    "name": "path",
                    "description": "Path under which to store the cookie. Defaults to /",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "standardCookie.set",
            "access": "private",
            "tagname": "",
            "class": "Cookie",
            "module": "Base"
        },
        {
            "file": "src/core/ACT_cookie.js",
            "line": 212,
            "description": "Fire event in standard ad as well so we the same appoarch with Darla",
            "class": "Cookie",
            "module": "Base"
        },
        {
            "file": "src/core/ACT_cookie.js",
            "line": 218,
            "description": "Get the cookie",
            "params": [
                {
                    "name": "cookieName",
                    "description": "The name of the cookie to get.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The cookie data in an object.",
                "type": "Object"
            },
            "itemtype": "method",
            "name": "standardCookie.get",
            "access": "private",
            "tagname": "",
            "class": "Cookie",
            "module": "Base"
        },
        {
            "file": "src/core/ACT_cookie.js",
            "line": 240,
            "description": "Remove the cookie - set it to expire.",
            "params": [
                {
                    "name": "cookieName",
                    "description": "The name of the cookie",
                    "type": "String"
                },
                {
                    "name": "domain",
                    "description": "The domain name of the cookie.",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "standardCookie.remove",
            "access": "private",
            "tagname": "",
            "class": "Cookie",
            "module": "Base"
        },
        {
            "file": "src/core/ACT_cookie.js",
            "line": 255,
            "description": "Cookie Helper Utilities - SafeFrame COOKIE",
            "access": "private",
            "tagname": "",
            "class": "Cookie",
            "module": "Base"
        },
        {
            "file": "src/core/ACT_cookie.js",
            "line": 261,
            "description": "The type of the current cookie functionality in use.",
            "itemtype": "attribute",
            "name": "safeframeCookie.TYPE",
            "type": "{String}",
            "initonly": "",
            "access": "private",
            "tagname": "",
            "class": "Cookie",
            "module": "Base"
        },
        {
            "file": "src/core/ACT_cookie.js",
            "line": 270,
            "description": "SafeFrame Cookie data",
            "type": "{Object}",
            "access": "private",
            "tagname": "",
            "class": "Cookie",
            "module": "Base"
        },
        {
            "file": "src/core/ACT_cookie.js",
            "line": 277,
            "description": "A simple SafeFrame status variable. If true then we're waiting on SafeFrame cookie reply. If 'false' then we have SafeFrame cookie data\nNULL otherwise",
            "type": "{Boolean}",
            "access": "private",
            "tagname": "",
            "class": "Cookie",
            "module": "Base"
        },
        {
            "file": "src/core/ACT_cookie.js",
            "line": 285,
            "description": "Test to see if user has cookies enabled.",
            "itemtype": "method",
            "name": "safeframeCookie.test",
            "return": {
                "description": "true is able to write cookies false otherwise.",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "Cookie",
            "module": "Base"
        },
        {
            "file": "src/core/ACT_cookie.js",
            "line": 299,
            "description": "Sets the SafeFrame cookie - For consistency, the parameters it takes are the same as the StandardCookie\nHowever, the function only uses cookieName and cookieContent. 'domain', 'expires' and 'path\" are simply ignored.",
            "params": [
                {
                    "name": "cookieName",
                    "description": "The name of the cookie.",
                    "type": "String"
                },
                {
                    "name": "cookieContent",
                    "description": "The value of the cookie - string OR simple Object. Currently only supports the following character set: [a-zA-Z0-9&=_]",
                    "type": "Object"
                },
                {
                    "name": "domain",
                    "description": "Domain under which to store the cookie. Defaults to yahoo.com",
                    "type": "String"
                },
                {
                    "name": "expires",
                    "description": "How long to stay alive. Defaults to 24 hours",
                    "type": "Number"
                },
                {
                    "name": "path",
                    "description": "Path under which to store the cookie. Defaults to /",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "safeframeCookie.set",
            "access": "private",
            "tagname": "",
            "class": "Cookie",
            "module": "Base"
        },
        {
            "file": "src/core/ACT_cookie.js",
            "line": 334,
            "description": "Get the cookie",
            "params": [
                {
                    "name": "cookieName",
                    "description": "The name of the cookie to get.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The cookie data in an object.",
                "type": "Object"
            },
            "itemtype": "method",
            "name": "safeframeCookie.get",
            "access": "private",
            "tagname": "",
            "class": "Cookie",
            "module": "Base"
        },
        {
            "file": "src/core/ACT_cookie.js",
            "line": 366,
            "description": "Initializing SafeFrame helper functions.",
            "itemtype": "method",
            "name": "safeframeCookie.getSFCookie",
            "params": [
                {
                    "name": "cookieName",
                    "description": "The name of the cookie to pick up from SafeFrame.",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Cookie",
            "module": "Base"
        },
        {
            "file": "src/core/ACT_cookie.js",
            "line": 399,
            "description": "Read the SafeFrame Cookie data into a local variable.",
            "itemtype": "method",
            "name": "safeframeCookie.readSFCookie",
            "params": [
                {
                    "name": "data",
                    "description": "passed in from the SafeFrame API",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Cookie",
            "module": "Base"
        },
        {
            "file": "src/core/ACT_cookie.js",
            "line": 429,
            "description": "Remove the cookie - set it to expire.",
            "params": [
                {
                    "name": "cookieName",
                    "description": "The name of the cookie",
                    "type": "String"
                },
                {
                    "name": "domain",
                    "description": "The domain name of the cookie.",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "safeframeCookie.remove",
            "access": "private",
            "tagname": "",
            "class": "Cookie",
            "module": "Base"
        },
        {
            "file": "src/core/ACT_cookie.js",
            "line": 489,
            "itemtype": "attribute",
            "name": "ATTRS",
            "type": "{{NAME: string, version: string}}",
            "initonly": "",
            "class": "Cookie",
            "module": "Cookie"
        },
        {
            "file": "src/core/ACT_cookie.js",
            "line": 498,
            "description": "Cookie Utilities",
            "class": "Cookie",
            "module": "Cookie"
        },
        {
            "file": "src/core/ACT_cookie.js",
            "line": 508,
            "itemtype": "method",
            "name": "initializeEventListeners",
            "class": "Cookie",
            "module": "Cookie"
        },
        {
            "file": "src/core/ACT_cookie.js",
            "line": 548,
            "itemtype": "method",
            "name": "destroy",
            "class": "Cookie",
            "module": "Cookie"
        },
        {
            "file": "src/core/ACT_cookie.js",
            "line": 572,
            "description": "Check if is possible to set|read cookie. Given the `disabled` config variable, forgo the test and return false.",
            "itemtype": "method",
            "name": "test",
            "return": {
                "description": "",
                "type": "*|Boolean"
            },
            "class": "Cookie",
            "module": "Cookie"
        },
        {
            "file": "src/core/ACT_cookie.js",
            "line": 584,
            "description": "Function to register an Ad to the Cookie. <br/>\nThe method will get cookie value, then update ad information in the cookie value before saving it back to the Cookie. </br>\nWhen the whole process is done, event 'localRegister:registerAdComplete' will be fired with firstPlay (true | false) is passed as event parameter. <br />",
            "itemtype": "method",
            "name": "registerAd",
            "params": [
                {
                    "name": "adId",
                    "description": "ID of the ad which need to be registered to the cookie",
                    "type": "String"
                }
            ],
            "class": "Cookie",
            "module": "Cookie"
        },
        {
            "file": "src/core/ACT_cookie.js",
            "line": 655,
            "description": "Funtion to save a special state of the ad into cookie.",
            "itemtype": "method",
            "name": "saveState",
            "params": [
                {
                    "name": "stateId",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "stateValue",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "Cookie",
            "module": "Cookie"
        },
        {
            "file": "src/core/ACT_cookie.js",
            "line": 684,
            "description": "Read cookie data and return state value for the ad stored in this data",
            "itemtype": "method",
            "name": "getState",
            "params": [
                {
                    "name": "stateId",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "Cookie",
            "module": "Cookie"
        },
        {
            "file": "src/core/ACT_cookie.js",
            "line": 707,
            "description": "Saving event for ad in cookie.\nSearching for eventname in ad information in current cookie data.\nIf the eventname is not exist inside ad information then add it with value 0.\nIf the eventname is exist inside ad information then adding 1 to its value.\nFinally saving the cookie",
            "itemtype": "method",
            "name": "updateAdEvent",
            "params": [
                {
                    "name": "eventName",
                    "description": "name of the event to be save",
                    "type": "String"
                }
            ],
            "class": "Cookie",
            "module": "Cookie"
        },
        {
            "file": "src/core/ACT_cookie.js",
            "line": 752,
            "description": "Register cookie with SafeFrame - once the framework determines that the ad is running in a SafeFrame\nThis function will be called when 'register' or 'register-update' events are fired from the SafeFrame API\nUpon firing those events, this function will be called to attempt a cookie get.\nThis also resets the 'cookie' API to use from StandardCookie to SafeFrameCookie",
            "itemtype": "method",
            "name": "register",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "data",
                    "description": "sent from the SafeFrame API via the notify function.",
                    "type": "Object"
                }
            ],
            "class": "Cookie",
            "module": "Cookie"
        },
        {
            "file": "src/core/ACT_cookie.js",
            "line": 791,
            "description": "The getSFCookie function will fire an 'internal' event which no one needs to listen to\nSo calling it right away is fair game - also speeds things up a big.\n'get' should be called with the DEFAULT_COOKIE_NAME",
            "class": "Cookie",
            "module": "Cookie"
        },
        {
            "file": "src/core/ACT_cookie.js",
            "line": 801,
            "description": "Simple helper function to read the cookie data",
            "itemtype": "method",
            "name": "read",
            "return": {
                "description": "Set of data that was stored in the cookie.",
                "type": "Object"
            },
            "access": "public",
            "tagname": "",
            "class": "Cookie",
            "module": "Cookie"
        },
        {
            "file": "src/core/ACT_cookie.js",
            "line": 816,
            "description": "Clean the cookie data by removing stale entries",
            "itemtype": "method",
            "name": "clean",
            "access": "public",
            "tagname": "",
            "class": "Cookie",
            "module": "Cookie"
        },
        {
            "file": "src/core/ACT_cookie.js",
            "line": 851,
            "description": "Remove the current cookie from the set. Deleting it completely.",
            "itemtype": "method",
            "name": "remove",
            "access": "public",
            "tagname": "",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Cookie",
            "module": "Cookie"
        },
        {
            "file": "src/core/ACT_cookie.js",
            "line": 877,
            "description": "Set the cookie - get a cookie name (key) and the data (value)",
            "params": [
                {
                    "name": "cookieData",
                    "description": "data",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "A function to be called after cookie is saved",
                    "type": "Function"
                }
            ],
            "itemtype": "method",
            "name": "set",
            "access": "public",
            "tagname": "",
            "class": "Cookie",
            "module": "Cookie"
        },
        {
            "file": "src/core/ACT_cookie.js",
            "line": 917,
            "description": "Get Cookie Helper function - given a full cookie, pick out the cookie name required for the ad and fire off\na EVENT_COOKIE_GETDATA_COMPLETE event.",
            "itemtype": "method",
            "name": "getHelper",
            "params": [
                {
                    "name": "fullCookie",
                    "description": "Containing all the cookie data received. - { 'status': COOKIE_STATUS_OK, 'data': safeframeCookie.data });",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Cookie",
            "module": "Cookie"
        },
        {
            "file": "src/core/ACT_cookie.js",
            "line": 951,
            "description": "Get the cookie",
            "return": {
                "description": "The cookie data in an object OR 0 if no cookie has been stored",
                "type": "Object"
            },
            "itemtype": "method",
            "name": "get",
            "access": "public",
            "tagname": "",
            "class": "Cookie",
            "module": "Cookie"
        },
        {
            "file": "src/core/ACT_cookie.js",
            "line": 977,
            "description": "Expose cookie helper methods",
            "access": "private",
            "tagname": "",
            "class": "Cookie",
            "module": "Cookie"
        },
        {
            "file": "src/core/ACT_environment.js",
            "line": 94,
            "description": "Class' attribute list",
            "class": "Environment",
            "module": "environment"
        },
        {
            "file": "src/core/ACT_environment.js",
            "line": 108,
            "description": "Force browser by list of browser versions,",
            "itemtype": "method",
            "name": "forceByBrowserVersion",
            "params": [
                {
                    "name": "listBrowsers",
                    "description": "List of browser versions to be forced browser to it",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Environment",
            "module": "environment"
        },
        {
            "file": "src/core/ACT_environment.js",
            "line": 169,
            "description": "Private function which is used to check the current browser against forcedHTML5List,\nforcedFlashList and forcedBackupList lists. And returns true/false whether or not the current browser should be\nforced to play a specific build type i.e. Flash/HTML or the backup.",
            "itemtype": "method",
            "name": "forceBrowser",
            "params": [
                {
                    "name": "forcedObj",
                    "description": "This is the object (list of browser) which is passed in to check whether\nor not the current browser is on the list of browsers passed in. If it is the it returns true or false.\nIn the initializer this function is used 3 times when forcedHTML5List, forcedFlashList and forcedBackupList are passed in as forcedObj.",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "type": "Function",
            "class": "Environment",
            "module": "environment"
        },
        {
            "file": "src/core/ACT_environment.js",
            "line": 205,
            "description": "Class prototypes",
            "class": "Environment",
            "module": "environment"
        },
        {
            "file": "src/core/ACT_environment.js",
            "line": 243,
            "description": "Checks what env can be played by checking forced browsers agains current browser capabilities",
            "itemtype": "method",
            "name": "checkEnv",
            "return": {
                "description": "returns tablet, mobile, html, flash or backup",
                "type": "String"
            },
            "class": "Environment",
            "module": "environment"
        },
        {
            "file": "src/core/ACT_environment.js",
            "line": 289,
            "description": "Destructor function. Goes through the events that were attached and removes them.",
            "itemtype": "method",
            "name": "destructor",
            "access": "public",
            "tagname": "",
            "class": "Environment",
            "module": "environment"
        },
        {
            "file": "src/core/ACT_layerStandard.js",
            "line": 27,
            "constant": "TYPE",
            "class": "LayerStandard",
            "module": "LayerStandard"
        },
        {
            "file": "src/core/ACT_layerStandard.js",
            "line": 32,
            "constant": "DEFAULT_STYLE",
            "class": "LayerStandard",
            "module": "LayerStandard"
        },
        {
            "file": "src/core/ACT_layerStandard.js",
            "line": 55,
            "is_constructor": 1,
            "class": "LayerStandard",
            "module": "LayerStandard"
        },
        {
            "file": "src/core/ACT_layerStandard.js",
            "line": 63,
            "description": "Private functions",
            "class": "LayerStandard",
            "module": "LayerStandard"
        },
        {
            "file": "src/core/ACT_layerStandard.js",
            "line": 67,
            "description": "Creating Css object for centering content in horizontal coordinate",
            "itemtype": "method",
            "name": "centerHorizontal",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "config",
                    "description": "Style config for calculation",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "CSS object for applying center in horizontal coordinate",
                "type": "Object"
            },
            "class": "LayerStandard",
            "module": "LayerStandard"
        },
        {
            "file": "src/core/ACT_layerStandard.js",
            "line": 84,
            "description": "Creating Css object for centering content in vertical coordinate",
            "itemtype": "method",
            "name": "centerVertical",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "config",
                    "description": "Style config for calculation",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "CSS object for applying center in vertical coordinate",
                "type": "Object"
            },
            "class": "LayerStandard",
            "module": "LayerStandard"
        },
        {
            "file": "src/core/ACT_layerStandard.js",
            "line": 100,
            "description": "Creating Css object for centering content in both horizontal and vertical coordinates",
            "itemtype": "method",
            "name": "centerBoth",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "config",
                    "description": "Style config for calculation",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "CSS object for applying center in both coordinates (horizonal and vertical)",
                "type": "Object"
            },
            "class": "LayerStandard",
            "module": "LayerStandard"
        },
        {
            "file": "src/core/ACT_layerStandard.js",
            "line": 115,
            "description": "Collection of different styles for centering content",
            "constant": "CENTER_STYLES",
            "class": "LayerStandard",
            "module": "LayerStandard"
        },
        {
            "file": "src/core/ACT_layerStandard.js",
            "line": 125,
            "itemtype": "method",
            "name": "alignHorizontal",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "config",
                    "description": "Object for setting style",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Object style",
                "type": "Object"
            },
            "class": "LayerStandard",
            "module": "LayerStandard"
        },
        {
            "file": "src/core/ACT_layerStandard.js",
            "line": 139,
            "itemtype": "method",
            "name": "alignVertical",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "config",
                    "description": "Object for setting style",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Object style",
                "type": "Object"
            },
            "class": "LayerStandard",
            "module": "LayerStandard"
        },
        {
            "file": "src/core/ACT_layerStandard.js",
            "line": 153,
            "itemtype": "method",
            "name": "applyStyles",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "config",
                    "description": "Object for setting style",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Object style",
                "type": "Object"
            },
            "class": "LayerStandard",
            "module": "LayerStandard"
        },
        {
            "file": "src/core/ACT_layerStandard.js",
            "line": 199,
            "description": "default attribute",
            "class": "LayerStandard",
            "module": "LayerStandard"
        },
        {
            "file": "src/core/ACT_layerStandard.js",
            "line": 205,
            "description": "Config Object for initializing layer instance",
            "itemtype": "attribute",
            "name": "config",
            "type": "Object",
            "default": "null",
            "class": "LayerStandard",
            "module": "LayerStandard"
        },
        {
            "file": "src/core/ACT_layerStandard.js",
            "line": 213,
            "itemtype": "attribute",
            "name": "layerName",
            "type": "String",
            "class": "LayerStandard",
            "module": "LayerStandard"
        },
        {
            "file": "src/core/ACT_layerStandard.js",
            "line": 219,
            "itemtype": "attribute",
            "name": "container",
            "type": "HTMLElement",
            "default": "null",
            "class": "LayerStandard",
            "module": "LayerStandard"
        },
        {
            "file": "src/core/ACT_layerStandard.js",
            "line": 226,
            "description": "Position to render layer, sShould be div id/class or body tag",
            "itemtype": "attribute",
            "name": "base",
            "type": "String",
            "default": "body",
            "class": "LayerStandard",
            "module": "LayerStandard"
        },
        {
            "file": "src/core/ACT_layerStandard.js",
            "line": 234,
            "description": "Attribute for keeping playing state of the layer",
            "itemtype": "attribute",
            "name": "playing",
            "type": "Boolean",
            "default": "false",
            "class": "LayerStandard",
            "module": "LayerStandard"
        },
        {
            "file": "src/core/ACT_layerStandard.js",
            "line": 242,
            "itemtype": "attribute",
            "name": "envToPlay",
            "type": "String",
            "default": "html",
            "class": "LayerStandard",
            "module": "LayerStandard"
        },
        {
            "file": "src/core/ACT_layerStandard.js",
            "line": 249,
            "itemtype": "attribute",
            "name": "currentDevice",
            "type": "String",
            "default": "desktop",
            "class": "LayerStandard",
            "module": "LayerStandard"
        },
        {
            "file": "src/core/ACT_layerStandard.js",
            "line": 256,
            "description": "The alignV is used in anchor and overlay layers to define if posY should move the layer vertically from 'top' or 'bottom'. Default is 'top'",
            "itemtype": "attribute",
            "name": "alignV",
            "access": "public",
            "tagname": "",
            "type": "String",
            "default": "top",
            "class": "LayerStandard",
            "module": "LayerStandard"
        },
        {
            "file": "src/core/ACT_layerStandard.js",
            "line": 265,
            "description": "The alignH is used in anchor and overlay layers to define if posX should move the layer vertically from 'left' or 'right'. Default is 'left'",
            "itemtype": "attribute",
            "name": "alignH",
            "access": "public",
            "tagname": "",
            "type": "String",
            "class": "LayerStandard",
            "module": "LayerStandard"
        },
        {
            "file": "src/core/ACT_layerStandard.js",
            "line": 273,
            "description": "Only accept tl - tr - bl - br",
            "itemtype": "attribute",
            "name": "coordinate",
            "type": "String",
            "default": "tl",
            "class": "LayerStandard",
            "module": "LayerStandard"
        },
        {
            "file": "src/core/ACT_layerStandard.js",
            "line": 281,
            "itemtype": "attribute",
            "name": "contentAppended",
            "type": "Boolean",
            "default": "false",
            "class": "LayerStandard",
            "module": "LayerStandard"
        },
        {
            "file": "src/core/ACT_layerStandard.js",
            "line": 288,
            "description": "List of capability instances rendered inside this layer",
            "itemtype": "attribute",
            "name": "capabilityInstances",
            "class": "LayerStandard",
            "module": "LayerStandard"
        },
        {
            "file": "src/core/ACT_layerStandard.js",
            "line": 294,
            "description": "Flag to indicate if the layer should be tracked by dwelltime or not",
            "itemtype": "attribute",
            "name": "dwelltime",
            "default": "false",
            "class": "LayerStandard",
            "module": "LayerStandard"
        },
        {
            "file": "src/core/ACT_layerStandard.js",
            "line": 302,
            "description": "reference to dwelltime tracking instances",
            "attribte": "dwelltimeInstance",
            "class": "LayerStandard",
            "module": "LayerStandard"
        },
        {
            "file": "src/core/ACT_layerStandard.js",
            "line": 309,
            "description": "Public properties",
            "class": "LayerStandard",
            "module": "LayerStandard"
        },
        {
            "file": "src/core/ACT_layerStandard.js",
            "line": 314,
            "description": "Function auto initiated when the class is instantiated",
            "itemtype": "method",
            "name": "initializer",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "config",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "LayerStandard",
            "module": "LayerStandard"
        },
        {
            "file": "src/core/ACT_layerStandard.js",
            "line": 346,
            "description": "Method to return the type of the layer",
            "itemtype": "method",
            "name": "getType",
            "access": "public",
            "tagname": "",
            "return": {
                "description": "type of the layer",
                "type": "String"
            },
            "class": "LayerStandard",
            "module": "LayerStandard"
        },
        {
            "file": "src/core/ACT_layerStandard.js",
            "line": 357,
            "description": "Function to render layer container",
            "itemtype": "method",
            "name": "createContainer",
            "access": "public",
            "tagname": "",
            "return": {
                "description": "node container",
                "type": "Element"
            },
            "class": "LayerStandard",
            "module": "LayerStandard"
        },
        {
            "file": "src/core/ACT_layerStandard.js",
            "line": 385,
            "description": "Add content directly or from config-object to layer container",
            "itemtype": "method",
            "name": "addContent",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "content",
                    "description": "new content to add to layer container",
                    "type": "Element | String",
                    "optional": true
                }
            ],
            "class": "LayerStandard",
            "module": "LayerStandard"
        },
        {
            "file": "src/core/ACT_layerStandard.js",
            "line": 431,
            "description": "Function to play layer",
            "itemtype": "method",
            "name": "play",
            "access": "public",
            "tagname": "",
            "class": "LayerStandard",
            "module": "LayerStandard"
        },
        {
            "file": "src/core/ACT_layerStandard.js",
            "line": 467,
            "description": "Function to clean all capability instances belong to this layer",
            "itemtype": "method",
            "name": "cleanCapabilityInstance",
            "access": "public",
            "tagname": "",
            "class": "LayerStandard",
            "module": "LayerStandard"
        },
        {
            "file": "src/core/ACT_layerStandard.js",
            "line": 483,
            "description": "Function to stop layer",
            "itemtype": "method",
            "name": "stop",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "forceToDestroy",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "LayerStandard",
            "module": "LayerStandard"
        },
        {
            "file": "src/core/ACT_layerStandard.js",
            "line": 512,
            "description": "Function to update current layer position",
            "itemtype": "method",
            "name": "updateLayerPosition",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "callback",
                    "description": "Function to be executed when the update finish",
                    "type": "Function"
                }
            ],
            "class": "LayerStandard",
            "module": "LayerStandard"
        },
        {
            "file": "src/core/ACT_layerStandard.js",
            "line": 554,
            "description": "Get current position of the layer",
            "itemtype": "method",
            "name": "currentLayerPosition",
            "access": "public",
            "tagname": "",
            "return": {
                "description": "Position X and Y. E.g [x, y]",
                "type": "Array"
            },
            "class": "LayerStandard",
            "module": "LayerStandard"
        },
        {
            "file": "src/core/ACT_layerStandard.js",
            "line": 565,
            "description": "Setup dwelltime tracking for the layer",
            "itemtype": "method",
            "name": "initDwellTimeTracking",
            "class": "LayerStandard",
            "module": "LayerStandard"
        },
        {
            "file": "src/core/ACT_scaffolding.js",
            "line": 27,
            "description": "List of capabilities instances rendered, organized by layerName\n    e.g {\n       mpu: [\n           {capability1},\n           {capability2}\n       ],\n       expand: [\n           {capability1},\n           {capability2}\n       ]\n    }",
            "class": "Scaffolding",
            "module": "Scaffolding"
        },
        {
            "file": "src/core/ACT_scaffolding.js",
            "line": 42,
            "description": "temporary list for capabily instance",
            "class": "Scaffolding",
            "module": "Scaffolding"
        },
        {
            "file": "src/core/ACT_scaffolding.js",
            "line": 52,
            "is_constructor": 1,
            "class": "Scaffolding",
            "module": "Scaffolding"
        },
        {
            "file": "src/core/ACT_scaffolding.js",
            "line": 61,
            "itemtype": "attribute",
            "name": "NAME",
            "type": "String",
            "class": "Scaffolding",
            "module": "Scaffolding"
        },
        {
            "file": "src/core/ACT_scaffolding.js",
            "line": 70,
            "description": "Check screen size rules from env in config-object capabilities against current screen sizes",
            "itemtype": "method",
            "name": "checkSizes",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "screenRules,",
                    "description": "Rule to be checked again screen size",
                    "type": "Object"
                },
                {
                    "name": "status,",
                    "description": "the status object with current screen size",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Scaffolding",
            "module": "Scaffolding"
        },
        {
            "file": "src/core/ACT_scaffolding.js",
            "line": 81,
            "description": "Go through all the rules defined in config object\nif any if those rule is not satify then the size is not satisfy",
            "class": "Scaffolding",
            "module": "Scaffolding"
        },
        {
            "file": "src/core/ACT_scaffolding.js",
            "line": 111,
            "description": "Check if target screen size is suitable with current size",
            "itemtype": "method",
            "name": "isRightEnv",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "targetResolution",
                    "description": "",
                    "type": "String | Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Scaffolding",
            "module": "Scaffolding"
        },
        {
            "file": "src/core/ACT_scaffolding.js",
            "line": 154,
            "description": "Check if target environment is suitable with current envt",
            "itemtype": "method",
            "name": "isRightEnv",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "targetEnv",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "current",
                    "description": "Enviroment",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Scaffolding",
            "module": "Scaffolding"
        },
        {
            "file": "src/core/ACT_scaffolding.js",
            "line": 183,
            "description": "Function to check given config object with environment and orientation and return if it is suitabe to be rendered",
            "itemtype": "method",
            "name": "isOkToRender",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "refObj",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "env",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "status",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Scaffolding",
            "module": "Scaffolding"
        },
        {
            "file": "src/core/ACT_scaffolding.js",
            "line": 211,
            "description": "Function to normalize the capability namespace. Example 'content-container' to 'ContentContainer'",
            "itemtype": "method",
            "name": "makeCapabilyNameSpace",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "capabilityName,",
                    "description": "string to remove dash and capitalise it",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Scaffolding",
            "module": "Scaffolding"
        },
        {
            "file": "src/core/ACT_scaffolding.js",
            "line": 231,
            "description": "Function to append a children to a given node html",
            "itemtype": "method",
            "name": "renderChildren",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "container",
                    "description": "holder container",
                    "type": "Object"
                },
                {
                    "name": "childrenObj",
                    "description": "list of children config object",
                    "type": "Array"
                },
                {
                    "name": "env",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "orientation",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "container with children have been rendered inside",
                "type": "Object"
            },
            "class": "Scaffolding",
            "module": "Scaffolding"
        },
        {
            "file": "src/core/ACT_scaffolding.js",
            "line": 253,
            "description": "Function generated the child nodes content using capabilities",
            "itemtype": "method",
            "name": "parseElement",
            "access": "private",
            "tagname": "recursive function to parse elements",
            "params": [
                {
                    "name": "refObj",
                    "description": "config object.",
                    "type": "Object"
                },
                {
                    "name": "env",
                    "description": "for html element, i.e: html, flash, backup",
                    "type": "String, Null, array"
                },
                {
                    "name": "Orientation,",
                    "description": "render content capability against it",
                    "type": "String"
                }
            ],
            "class": "Scaffolding",
            "module": "Scaffolding"
        },
        {
            "file": "src/core/ACT_scaffolding.js",
            "line": 305,
            "description": "Function auto initiated when the class is instantiated",
            "itemtype": "method",
            "name": "initializer",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "config",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Scaffolding",
            "module": "Scaffolding"
        },
        {
            "file": "src/core/ACT_scaffolding.js",
            "line": 317,
            "description": "Function parsing the layer object to html",
            "itemtype": "method",
            "name": "parseHtml",
            "access": "public",
            "tagname": "",
            "return": {
                "description": "raw Html",
                "type": "String"
            },
            "class": "Scaffolding",
            "module": "Scaffolding"
        },
        {
            "file": "src/core/ACT_scaffolding.js",
            "line": 347,
            "description": "Function getter for the content html parsed",
            "itemtype": "method",
            "name": "getHtmlParsered",
            "access": "public",
            "tagname": "",
            "class": "Scaffolding",
            "module": "Scaffolding"
        },
        {
            "file": "src/core/ACT_secureDarla.js",
            "line": 22,
            "description": "EVENTS CONSTANT",
            "class": "SecureDarla",
            "module": "Scaffolding"
        },
        {
            "file": "src/core/ACT_secureDarla.js",
            "line": 43,
            "itemtype": "event",
            "name": "'sframe:darlaCheck:complete' Fires this event once the getAPI function is ready to return data.",
            "class": "SecureDarla",
            "module": "Scaffolding"
        },
        {
            "file": "src/core/ACT_secureDarla.js",
            "line": 62,
            "description": "List action for SafeFrame",
            "class": "SecureDarla",
            "module": "Scaffolding"
        },
        {
            "file": "src/core/ACT_secureDarla.js",
            "line": 254,
            "itemtype": "method",
            "name": "compareCurrentSize",
            "class": "SecureDarla",
            "module": "SecureDarla"
        },
        {
            "file": "src/core/ACT_secureDarla.js",
            "line": 264,
            "description": "Check if passing value is valid for Darla expand function",
            "itemtype": "method",
            "name": "isValidForExpand",
            "params": [
                {
                    "name": "top",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "right",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "bottom",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "left",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "trus if they are all value, else return false",
                "type": "Boolean"
            },
            "class": "SecureDarla",
            "module": "SecureDarla"
        },
        {
            "file": "src/core/ACT_secureDarla.js",
            "line": 277,
            "itemtype": "attribute",
            "name": "ATTRS",
            "type": "{{NAME: string, version: string}}",
            "initonly": "",
            "class": "SecureDarla",
            "module": "SecureDarla"
        },
        {
            "file": "src/core/ACT_secureDarla.js",
            "line": 287,
            "description": "Simple default config. Assume 300x250\n\n\tconfig: {\n\t\tname: 'act_base',\n\t\ttype: 'lrec',\n\t\tformat: 'lrec',\n\t\twidth: 300,\n\t\theight: 250\n\t}",
            "itemtype": "property",
            "name": "config",
            "type": "{{width: number, height: number}}",
            "initonly": "",
            "class": "SecureDarla",
            "module": "SecureDarla"
        },
        {
            "file": "src/core/ACT_secureDarla.js",
            "line": 307,
            "description": "secureDarla is set to 'undefined' - easy way to check if it's in a safe frame or not",
            "itemtype": "property",
            "name": "secureDarla",
            "type": "{Boolean}",
            "initonly": "",
            "class": "SecureDarla",
            "module": "SecureDarla"
        },
        {
            "file": "src/core/ACT_secureDarla.js",
            "line": 315,
            "description": "Property to save the status of sDarla expanded",
            "itemtype": "property",
            "name": "isInlineExpanded",
            "default": "false",
            "class": "SecureDarla",
            "module": "SecureDarla"
        },
        {
            "file": "src/core/ACT_secureDarla.js",
            "line": 322,
            "description": "Register the ad with SecureDarla. Bind the local instance of `notify` for SecureDarla communication.",
            "itemtype": "method",
            "name": "register",
            "class": "SecureDarla",
            "module": "SecureDarla"
        },
        {
            "file": "src/core/ACT_secureDarla.js",
            "line": 346,
            "description": "SafeFrame API / Key getter function",
            "itemtype": "method",
            "name": "getAPI",
            "return": {
                "description": "{ key: Object, yAPI: Object} An object containing the key and a reference to the SafeFrame API",
                "type": "Object"
            },
            "access": "public",
            "tagname": "",
            "class": "SecureDarla",
            "module": "SecureDarla"
        },
        {
            "file": "src/core/ACT_secureDarla.js",
            "line": 367,
            "description": "Initialize all events",
            "itemtype": "method",
            "name": "initializeEvents",
            "access": "private",
            "tagname": "",
            "class": "SecureDarla",
            "module": "SecureDarla"
        },
        {
            "file": "src/core/ACT_secureDarla.js",
            "line": 392,
            "params": [
                {
                    "name": "data",
                    "description": "Contains msg field with the message for safeFrame",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "msg",
            "class": "SecureDarla",
            "module": "SecureDarla"
        },
        {
            "file": "src/core/ACT_secureDarla.js",
            "line": 408,
            "description": "Resize SafeFrames",
            "itemtype": "method",
            "name": "resizeTo",
            "params": [
                {
                    "name": "data",
                    "description": "Information for resize safeFrame including:\n\t- width: new width for safeFrame\n\t- height: new height for safeFrame\n\t- animationLength: animation length",
                    "type": "Object"
                }
            ],
            "class": "SecureDarla",
            "module": "SecureDarla"
        },
        {
            "file": "src/core/ACT_secureDarla.js",
            "line": 459,
            "description": "Expand sframe holder to new size",
            "itemtype": "method",
            "name": "expand",
            "params": [
                {
                    "name": "data",
                    "description": "Information for expanding safeFrame including: (please note that all number must be positive)\n\t- top (number): amount of pixel to expand to the top\n\t- right (number): amount of pixel to expand to the right\n\t- bottom (number): amount of pixel to expand to the bottom\n\t- left (number): amount of pixel to expand to the left\n - push (boolean): using expand push or not (default to false)",
                    "type": "Object"
                }
            ],
            "class": "SecureDarla",
            "module": "SecureDarla"
        },
        {
            "file": "src/core/ACT_secureDarla.js",
            "line": 528,
            "description": "Function to collapse safeFrame holder",
            "itemtype": "method",
            "name": "collapse",
            "class": "SecureDarla",
            "module": "SecureDarla"
        },
        {
            "file": "src/core/ACT_secureDarla.js",
            "line": 558,
            "description": "Simple wrapper to pick up the SD Key",
            "itemtype": "method",
            "name": "key",
            "return": {
                "description": "SecureDARLA Key that is necessary for communication with restricted SD components",
                "type": "Object"
            },
            "class": "SecureDarla",
            "module": "SecureDarla"
        },
        {
            "file": "src/core/ACT_secureDarla.js",
            "line": 567,
            "description": "A simple check to help ads figure out if they are in a SafeFrame or not.",
            "itemtype": "method",
            "name": "isSafeFrame",
            "return": {
                "description": "true if in a SafeFrame false otherwise.",
                "type": "Boolean"
            },
            "class": "SecureDarla",
            "module": "SecureDarla"
        },
        {
            "file": "src/core/ACT_secureDarla.js",
            "line": 580,
            "description": "Generic notify function - this is where all SD communications come into.",
            "itemtype": "event",
            "name": "secureDarla:[type of cmd]",
            "params": [
                {
                    "name": "cmd",
                    "description": "Command coming from SecureDarla",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "Data coming in from SecureDarla",
                    "type": "Object"
                }
            ],
            "class": "SecureDarla",
            "module": "SecureDarla"
        },
        {
            "file": "src/library/ACT_AdobeEdgeBridge.js",
            "line": 30,
            "itemtype": "attribute",
            "name": "ATTRS",
            "initonly": "",
            "class": "DwellTime",
            "module": "SecureDarla"
        },
        {
            "file": "src/library/ACT_AdobeEdgeBridge.js",
            "line": 36,
            "itemtype": "attribute",
            "name": "NAME",
            "type": "String",
            "class": "DwellTime",
            "module": "SecureDarla"
        },
        {
            "file": "src/library/ACT_AdobeEdgeBridge.js",
            "line": 87,
            "description": "This is the function that you call to send and call redirect tracks. It sends, calls and catalogues the interaction\ntracks for AutoEvent and yFPAD to read when creating the footprint. This complies with adinterax redirect tracking.\nThis also uses the \"cap\" flashvar to decide on \"how\" to call the redirect. This fixes the pop up blocking issues in\ninternet explorer.",
            "example": [
                "\n\tACT.AdobeEdgeBridge.trackR(compId, \"clickTAG\", \"gereral\");"
            ],
            "itemtype": "method",
            "name": "trackR",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "compId",
                    "description": "This is the name of the composition.",
                    "type": "String"
                },
                {
                    "name": "action_name",
                    "description": "This is the name of the common label that will be output in the post execution stats.",
                    "type": "String"
                },
                {
                    "name": "action",
                    "description": "This is the \"action\" or short name of the redirect",
                    "type": "Object"
                },
                {
                    "name": "special",
                    "description": "This is used when you need to pass in a \"special\" param to the url such as, \"&zipcode=94587\"",
                    "type": "String"
                }
            ],
            "required": 1,
            "class": "DwellTime",
            "module": "SecureDarla"
        },
        {
            "file": "src/library/ACT_AdobeEdgeBridge.js",
            "line": 107,
            "description": "This is the function that you call to send interaction tracks. It sends and catalogues the interaction\ntracks for AutoEvent and yFPAD to read when creating the footprint.",
            "example": [
                "\n\tACT.AdobeEdgeBridge.trackR(compId, \"action_name\", \"action\");"
            ],
            "itemtype": "method",
            "name": "N",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "compId",
                    "description": "This is the name of the composition.",
                    "type": "Object"
                },
                {
                    "name": "action_name",
                    "description": "This is the name of the action.",
                    "type": "String"
                },
                {
                    "name": "action",
                    "description": "This is the name of the track.",
                    "type": "String"
                }
            ],
            "required": 1,
            "class": "DwellTime",
            "module": "SecureDarla"
        },
        {
            "file": "src/library/ACT_DwellTime.js",
            "line": 66,
            "itemtype": "method",
            "name": "DwellTime",
            "contructor": "",
            "params": [
                {
                    "name": "config",
                    "description": "Configuration for dwell time tracking",
                    "type": "Object"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "DwellTime",
            "module": "DwellTime"
        },
        {
            "file": "src/library/ACT_DwellTime.js",
            "line": 76,
            "itemtype": "attribute",
            "name": "ATTRS",
            "initonly": "",
            "class": "DwellTime",
            "module": "DwellTime"
        },
        {
            "file": "src/library/ACT_DwellTime.js",
            "line": 83,
            "itemtype": "attribute",
            "name": "targetElement",
            "class": "DwellTime",
            "module": "DwellTime"
        },
        {
            "file": "src/library/ACT_DwellTime.js",
            "line": 88,
            "description": "This name will be used in tracking label.\ne.g if targetName = 'mpu', tracking label will be mpu_view_dwell_10",
            "itemtype": "attribute",
            "name": "targetName",
            "class": "DwellTime",
            "module": "DwellTime"
        },
        {
            "file": "src/library/ACT_DwellTime.js",
            "line": 95,
            "itemtype": "attribute",
            "name": "begin",
            "type": "Number",
            "class": "DwellTime",
            "module": "DwellTime"
        },
        {
            "file": "src/library/ACT_DwellTime.js",
            "line": 101,
            "itemtype": "attribute",
            "name": "start",
            "type": "Number",
            "class": "DwellTime",
            "module": "DwellTime"
        },
        {
            "file": "src/library/ACT_DwellTime.js",
            "line": 107,
            "itemtype": "attribute",
            "name": "stop",
            "type": "Number",
            "class": "DwellTime",
            "module": "DwellTime"
        },
        {
            "file": "src/library/ACT_DwellTime.js",
            "line": 113,
            "itemtype": "attribute",
            "name": "fire",
            "type": "Number",
            "class": "DwellTime",
            "module": "DwellTime"
        },
        {
            "file": "src/library/ACT_DwellTime.js",
            "line": 121,
            "description": "List of public function for DwellTime instance",
            "class": "DwellTime",
            "module": "DwellTime"
        },
        {
            "file": "src/library/ACT_DwellTime.js",
            "line": 126,
            "itemtype": "method",
            "name": "initializer",
            "class": "DwellTime",
            "module": "DwellTime"
        },
        {
            "file": "src/library/ACT_DwellTime.js",
            "line": 150,
            "description": "Start counting dwelltime for target element if it's not started.\nIf dwelltime counting is already started and it's still in buffer time then clear out the buffer time",
            "itemtype": "method",
            "name": "startCounting",
            "class": "DwellTime",
            "module": "DwellTime"
        },
        {
            "file": "src/library/ACT_DwellTime.js",
            "line": 175,
            "description": "Stop counting dwelltime for target element",
            "itemtype": "method",
            "name": "stopCounting",
            "class": "DwellTime",
            "module": "DwellTime"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 32,
            "description": "ADTECH wrapper for Enabler.exit. Opens a new window with the URL as identified by the given exit ID.",
            "itemtype": "method",
            "name": "EnablerADTECH.click",
            "params": [
                {
                    "name": "id",
                    "description": "The exit ID.",
                    "type": "String"
                },
                {
                    "name": "opt_url",
                    "description": "The URL to navigate to.",
                    "type": "String"
                }
            ],
            "example": [
                "\n              EnablerADTECH.click('Twitter', 'http://twitter.com/twittername');"
            ],
            "class": "EnablerADTECH",
            "module": "EnablerADTECH"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 44,
            "description": "ADTECH wrapper for Enabler.exit. Opens a new window with the URL as identified by the given exit ID.",
            "itemtype": "method",
            "name": "EnablerADTECH.dynamicClick",
            "params": [
                {
                    "name": "id",
                    "description": "The exit ID.",
                    "type": "String"
                },
                {
                    "name": "opt_url",
                    "description": "The URL to navigate to.",
                    "type": "String"
                }
            ],
            "example": [
                "\n              EnablerADTECH.dynamicClick(\"Product page\", \"http://www.mysite.com/products?id=\" + product_id );"
            ],
            "class": "EnablerADTECH",
            "module": "EnablerADTECH"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 56,
            "description": "ADTECH Wrapper for Enabler.counter. Tracks a counter event.",
            "itemtype": "method",
            "name": "EnablerADTECH.counter",
            "params": [
                {
                    "name": "eventId",
                    "description": "The string ID of the event to count.",
                    "type": "String"
                },
                {
                    "name": "opt_isCumulative",
                    "description": "Optional parameter that indicates whether or not the counter event should\nbe counted cumulatively. Defaults to true.",
                    "type": "Boolean"
                }
            ],
            "example": [
                "\n             EnablerADTECH.event('Play Game');"
            ],
            "class": "EnablerADTECH",
            "module": "EnablerADTECH"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 69,
            "description": "ADTECH wrapper for studio.video.Reporter.attach. Observes a video element for reporting",
            "itemtype": "method",
            "name": "EnablerADTECH.registerVideoPlayer",
            "params": [
                {
                    "name": "videoElement",
                    "description": "The video element to report on.",
                    "type": "HTMLVideoElement"
                },
                {
                    "name": "videoReportingIdentifier",
                    "description": "The name the video should report as.",
                    "type": "String"
                }
            ],
            "example": [
                "\n            EnablerADTECH.registerVideoPlayer(myVideoElement, \"Video 1\");\nfor autoplay videos (the play event will always get tracked). This defaults to true."
            ],
            "class": "EnablerADTECH",
            "module": "EnablerADTECH"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 84,
            "description": "ADTECH Wrapper for Event.ready and Enabler.callAfterInitialized.",
            "itemtype": "method",
            "name": "EnablerADTECH.ready",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to invoke when the Enabler is initialized AND dom is ready\nThe 'ready' function is a modified version of the JQuery 'ready' functionality found at http://api.jquery.com/ready/\nThe code below is modified according to the JQuery MIT License https://github.com/jquery/jquery",
                    "type": "Function"
                }
            ],
            "class": "EnablerADTECH",
            "module": "EnablerADTECH"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 98,
            "description": "ADTECH Wrapper to Subscribe to events",
            "itemtype": "method",
            "name": "EnablerADTECH.addEventListener",
            "params": [
                {
                    "name": "event",
                    "description": "event string",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "method",
                    "type": "Object"
                },
                {
                    "name": "element",
                    "description": "DOM element listening for event (optional)",
                    "type": "Object"
                },
                {
                    "name": "scope",
                    "description": "event scope - default to this",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "obj.remove A simple wrapper to remove this event listener.",
                "type": "Object"
            },
            "access": "public",
            "tagname": "",
            "example": [
                "\n             EnablerADTECH.addEventListener(\"click\", function( eventData ) { ... do something ...}, byId(\"el\"));\n"
            ],
            "class": "EnablerADTECH",
            "module": "EnablerADTECH"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 114,
            "description": "ADTECH Wrapper to remove event listeners from objects.",
            "params": [
                {
                    "name": "event",
                    "description": "Event to remove",
                    "type": "String"
                },
                {
                    "name": "fn",
                    "description": "Function to remove from the object",
                    "type": "Function"
                },
                {
                    "name": "element",
                    "description": "Element to remove the event from",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "EnablerADTECH.removeListener",
            "class": "EnablerADTECH",
            "module": "EnablerADTECH"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 123,
            "description": "ADTECH Wrapper for Enabler.requestExpand.\nInitiates the expand lifecycle. This begins by calling requestExpand(), waiting for EXPAND_START\nevent, animating your expand, then calling finishExpand() when the creative has fully expanded.\nPlease use event listeners to invoke the expanded state of the ad as the expand may be dispatched\nby the environment independently of calling `studio.Enabler#requestExpand()`. Typical usage will\nlook like:",
            "itemtype": "method",
            "name": "EnablerADTECH.expand",
            "example": [
                "\n            EnablerADTECH.expand();"
            ],
            "class": "EnablerADTECH",
            "module": "EnablerADTECH"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 139,
            "description": "ADTECH Wrapper for Enabler.requestCollapse\nInitiates the collapse lifecycle. This begins by calling requestCollapse(), waiting for the\nCOLLAPSE_START event, animating your collapse, then calling finishCollapse() when the\ncreative has fully collapsed. Please use event listeners to invoke the collapsed state of\nthe ad as the collapse event may be dispatched by the environment independently of calling\nstudio.Enabler#requestCollapse().",
            "itemtype": "method",
            "name": "EnablerADTECH.contract",
            "example": [
                "\n            EnablerADTECH.contract();"
            ],
            "class": "EnablerADTECH",
            "module": "EnablerADTECH"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 155,
            "description": "ADTECh Wrapper for the reload functionality. This function has not been implemented yet.\n - Ideally, it would fire replay event to the parent container.",
            "itemtype": "method",
            "name": "EnablerADTECH.reload",
            "class": "EnablerADTECH",
            "module": "EnablerADTECH"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 164,
            "description": "ADTECH Wrapper for Enabler.close. Closes floating and popup creative types. If it is an expanding creative,\nclose acts as a proxy to collapse.",
            "itemtype": "method",
            "name": "EnablerADTECH.close",
            "example": [
                "\n            EnablerADTECH.close();"
            ],
            "class": "EnablerADTECH",
            "module": "EnablerADTECH"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 291,
            "description": "Listen to parent frame post message and convert it to event",
            "class": "Enabler",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 307,
            "itemtype": "method",
            "name": "containValue",
            "access": "private",
            "tagname": "",
            "class": "Enabler",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 323,
            "description": "Send data to parent of this iframe",
            "itemtype": "method",
            "name": "sendToParent",
            "access": "private",
            "tagname": "",
            "class": "Enabler",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 359,
            "description": "Helper method to compose urls with queries",
            "itemtype": "method",
            "name": "getFullUrl",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Enabler",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 393,
            "description": "Notifies of issues / missing things inside Enabler. For Internal Use Only.",
            "itemtype": "method",
            "name": "enablerLogger",
            "params": [
                {
                    "name": "A",
                    "description": "mixed message to display to the user",
                    "type": "Mixed"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Enabler",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 405,
            "itemtype": "method",
            "name": "fireEvent",
            "params": [
                {
                    "name": "id",
                    "description": "The id given from the user's calls. E.g: Enabler.exit(\"Something\"); \"Something\" is this id",
                    "type": "String"
                },
                {
                    "name": "eventType",
                    "description": "Comes from studio.events.StudioEvent Object - this should exist.",
                    "type": "String"
                },
                {
                    "name": "actionName",
                    "description": "More of the generic event/action ('track', 'redirect', etc)",
                    "type": "String"
                },
                {
                    "name": "url",
                    "description": "If you have a redirect, you can pass in the URL to redirect to.",
                    "type": "String"
                },
                {
                    "name": "special",
                    "description": "Extra parameter. For URL can have the queries, for others, can be an object with the desired key: value pairs.",
                    "type": "Mix"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Enabler",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 483,
            "description": "Propagate Event - figure out if our user wants all or only some events to propagate to the parent frame.",
            "itemtype": "method",
            "name": "propagateEvent",
            "params": [
                {
                    "name": "actionName",
                    "description": "- either 'redirect' or 'track'",
                    "type": "String"
                },
                {
                    "name": "dataToSend",
                    "description": "Data object that we send over to the parent.",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Enabler",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 498,
            "description": "Adding new url and it's key into the exitUrls list",
            "itemtype": "method",
            "name": "setExit",
            "params": [
                {
                    "name": "id",
                    "description": "Exit Url id",
                    "type": "String"
                },
                {
                    "name": "String",
                    "description": "opt_url New URL to be added",
                    "optional": true
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Enabler",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 514,
            "itemtype": "method",
            "name": "setCounter",
            "access": "private",
            "tagname": "",
            "class": "Enabler",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 532,
            "itemtype": "method",
            "name": "getCounter",
            "access": "private",
            "tagname": "",
            "class": "Enabler",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 545,
            "itemtype": "method",
            "name": "calculateValue",
            "access": "private",
            "tagname": "",
            "class": "Enabler",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 553,
            "itemtype": "method",
            "name": "mapValue",
            "access": "private",
            "tagname": "",
            "class": "Enabler",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 566,
            "itemtype": "method",
            "name": "runCallbacks",
            "access": "private",
            "tagname": "Runs through the registered callbacks and executes them one by one. In reverse order. ( FILO )\nBefore executing a callback, sets it's reference to null in our queue.\nOn Error: logs the failed attempt - runtime error message, callback iterator and the callback function itself.",
            "class": "Enabler",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 666,
            "itemtype": "attribute",
            "name": "ATTRS",
            "initonly": "",
            "class": "Enabler",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 671,
            "itemtype": "attribute",
            "name": "NAME",
            "type": "String",
            "class": "Enabler",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 707,
            "description": "Handle message from parent frame",
            "itemtype": "method",
            "name": "parentMessageHandle",
            "params": [
                {
                    "name": "data",
                    "description": "Data sent from parent",
                    "type": "Object"
                }
            ],
            "class": "Enabler",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 722,
            "description": "Returns the full config object if no parameter passed in, an element from config object or null if requested element doesn't exist.",
            "itemtype": "method",
            "name": "getConfigObject",
            "params": [
                {
                    "name": "opt_element",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Enabler",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 737,
            "description": "Returns the config object values",
            "itemtype": "method",
            "name": "getConfig",
            "params": [
                {
                    "name": "opt_element",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The stringified config object",
                "type": "String"
            },
            "class": "Enabler",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 748,
            "description": "You can set new values to config using setConfig.\nJust use the same config structure.",
            "itemtype": "method",
            "name": "setConfig",
            "params": [
                {
                    "name": "encoded",
                    "description": ""
                }
            ],
            "return": {
                "description": "The stringified resulting config object",
                "type": "String"
            },
            "class": "Enabler",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 782,
            "description": "Adds an event listener to the event target. The same handler can only be added once per the type.\nEven if you add the same handler multiple times using the same type then it will only be called once\nWhen the event is dispatched.",
            "itemtype": "method",
            "name": "addEventListener",
            "params": [
                {
                    "name": "type",
                    "description": "The type of the event to listen for.",
                    "type": "String"
                },
                {
                    "name": "fn",
                    "description": "event callback",
                    "type": "Function"
                },
                {
                    "name": "opt_capture",
                    "description": "In DOM-compliant browsers, this determines whether the listener is fired\nduring the capture or bubble phase of the event.",
                    "type": "Boolean"
                },
                {
                    "name": "opt_handlerScope",
                    "description": "Object in whose scope to call the listener",
                    "type": "Object"
                }
            ],
            "class": "Enabler",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 812,
            "description": "Wrapper for Event remove listener (gets values from EVENT QUEUE)",
            "itemtype": "method",
            "name": "removeEventListener",
            "params": [
                {
                    "name": "event_type",
                    "description": "the id used in config.eventQueue",
                    "type": "String"
                }
            ],
            "class": "Enabler",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 827,
            "description": "Wrapper for Event.fire",
            "itemtype": "method",
            "name": "dispatchEvent",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Enabler",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 840,
            "description": "Opens a new window with the URL as identified by the given exit ID.",
            "itemtype": "method",
            "name": "exit",
            "params": [
                {
                    "name": "id",
                    "description": "The exit ID.",
                    "type": "String"
                },
                {
                    "name": "opt_url",
                    "description": "The URL to navigate to.",
                    "type": "String"
                }
            ],
            "class": "Enabler",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 860,
            "description": "Opens a new window with the URL as identified by the given exit ID. This differs from normal exit() as the\nURL value will always override the value modified in Studio or elsewhere.",
            "itemtype": "method",
            "name": "exitOverride",
            "params": [
                {
                    "name": "id",
                    "description": "The exit ID.",
                    "type": "String"
                },
                {
                    "name": "url",
                    "description": "The URL to navigate to regardless of what has been set before.",
                    "type": "String"
                }
            ],
            "class": "Enabler",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 875,
            "description": "Opens a new window with the URL as identified by the given exit ID with an optional queryString appended.",
            "itemtype": "method",
            "name": "exitQueryString",
            "params": [
                {
                    "name": "id",
                    "description": "The exit ID.",
                    "type": "String"
                },
                {
                    "name": "opt_queryString",
                    "description": "Desired query string value(s) to append to the end of the exit URL.",
                    "type": "String"
                }
            ],
            "class": "Enabler",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 889,
            "description": "Tracks a counter event.",
            "itemtype": "method",
            "name": "counter",
            "params": [
                {
                    "name": "eventId",
                    "description": "The string ID of the event to count.",
                    "type": "String"
                },
                {
                    "name": "opt_isCumulative",
                    "description": "Optional parameter that indicates whether or not the counter event should\nbe counted cumulatively. Defaults to true.",
                    "type": "Boolean"
                }
            ],
            "class": "Enabler",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 904,
            "description": "Starts an event timer",
            "itemtype": "method",
            "name": "startTimer",
            "params": [
                {
                    "name": "timerId",
                    "description": "The string ID of the timer to start",
                    "type": "String"
                }
            ],
            "class": "Enabler",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 920,
            "description": "Stops an event timer",
            "itemtype": "method",
            "name": "stopTimer",
            "params": [
                {
                    "name": "timerId",
                    "description": "The string ID of the timer to stop",
                    "type": "String"
                }
            ],
            "class": "Enabler",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 933,
            "class": "Enabler",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 941,
            "description": "Gets the runtime URL given the original compile-time filename.",
            "itemtype": "method",
            "name": "getUrl",
            "params": [
                {
                    "name": "filepath",
                    "description": "The oritinal full path of the asset",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The URL to be used at runtime when served through Studio and DART.",
                "type": "String"
            },
            "class": "Enabler",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 968,
            "description": "Force setting htmlRoot value that is returned from getURL. getURL will use window.location.href\notherwise.",
            "itemtype": "method",
            "name": "setUrl",
            "params": [
                {
                    "name": "htmlRoot",
                    "description": "The HTML path URL value",
                    "type": "String"
                }
            ],
            "class": "Enabler",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 978,
            "class": "Enabler",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 981,
            "description": "Dispatches the PAGE LOADED event and sets the config parameter",
            "itemtype": "method",
            "name": "dispatchPageLoaded",
            "class": "Enabler",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 990,
            "description": "Returns whether the parent page has loaded. The iframe is notified when the page has loaded and dispatches\nthe StudioEvent.PAGE_LOADED event.",
            "itemtype": "method",
            "name": "isPageLoaded",
            "return": {
                "description": "Whether the parent page has loaded or not.",
                "type": "Boolean"
            },
            "class": "Enabler",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 1000,
            "description": "Returns whether the Enabler is initialized.",
            "itemtype": "method",
            "name": "isInitialized",
            "return": {
                "description": "Whether the Enabler is initialized.",
                "type": "Boolean"
            },
            "class": "Enabler",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 1009,
            "description": "Calls the callback when the enabler is initialized or after",
            "itemtype": "method",
            "name": "callAfterInitialized",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to invoke when the Enabler is initialized or if it has already\ninitialized, call immediately.",
                    "type": "Function"
                }
            ],
            "class": "Enabler",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 1023,
            "class": "Enabler",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 1027,
            "description": "Closes floating and popup creative types. If it is an expanding creative, close acts\nas a proxy to collapse.",
            "itemtype": "method",
            "name": "close",
            "class": "Enabler",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 1039,
            "description": "Sets useCustomClose. This is primarily of use in mobile environments using MRAID. When this flag\nis set, it means that the creative will provide its own close button, so MRAID doesn't have to\nprovide one.",
            "itemtype": "method",
            "name": "setUseCustomClose",
            "params": [
                {
                    "name": "useCustomClose",
                    "description": "Value of the flag.",
                    "type": "Boolean"
                }
            ],
            "class": "Enabler",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 1051,
            "description": "Returns the current state of the container.",
            "itemtype": "method",
            "name": "getContainerState",
            "return": {
                "description": "The container state from studio.sdk.ContainerState",
                "type": "String"
            },
            "class": "Enabler",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 1063,
            "description": "Returns the expand direction.",
            "itemtype": "method",
            "name": "getExpandDirection",
            "return": {
                "description": "The direction to expand in from studio.common.mde.Direction",
                "type": "String"
            },
            "class": "Enabler",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 1072,
            "description": "Records a manual closing of a floating, pop-up, expanding, in-page with pop-up, or in-page with floating ad.",
            "itemtype": "method",
            "name": "reportManualClose",
            "class": "Enabler",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 1080,
            "description": "Sets the pixel offsets for the collapsed portion of the ad. This does not affect the local testing\nenvironment but when the ad is live the collapsed portion will be shown at 0x0. This method works\nby setting the marginLeft and marginTop of the body element which is set to relative positioning.",
            "itemtype": "method",
            "name": "setExpandingPixelOffsets",
            "params": [
                {
                    "name": "left",
                    "description": "The left offset to the collapsed portion of the ad.",
                    "type": "Number"
                },
                {
                    "name": "top",
                    "description": "The top offset to the collapsed portion of the ad.",
                    "type": "Number"
                },
                {
                    "name": "opt_expandWidth",
                    "description": "The expanded width of this asset.",
                    "type": "Number"
                },
                {
                    "name": "opt_expandedHeight",
                    "description": "The expanded height of this asset.",
                    "type": "Number"
                }
            ],
            "class": "Enabler",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 1100,
            "description": "Prepopulates the width and height of a floating or peeldown creative.",
            "itemtype": "method",
            "name": "setFloatingPixelDimensions",
            "params": [
                {
                    "name": "width",
                    "description": "The width of this asset.",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "The height of this asset.",
                    "type": "Number"
                }
            ],
            "class": "Enabler",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 1114,
            "description": "Sets the isMultiDirectional flag.",
            "itemtype": "method",
            "name": "setIsMultiDirectional",
            "params": [
                {
                    "name": "isMultiDirectional",
                    "description": "Whether the ad is configured as multidirectional.",
                    "type": "Boolean"
                }
            ],
            "class": "Enabler",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 1124,
            "description": "Sets the startExpanded flag, which controls whether the asset starts in the expanded state or not.\nIf true, then when the initial requestExpand call will not be tracked or logged and will not\ntrigger an expansion timer.",
            "itemtype": "method",
            "name": "setStartExpanded",
            "params": [
                {
                    "name": "startExpanded",
                    "description": "Value of the flag.",
                    "type": "Boolean"
                }
            ],
            "class": "Enabler",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 1136,
            "description": "Expanding flow:\n    1. Register event listeners.\n    2. When you want to expand call Enabler.requestExpand().\n    3. When the environment is ready to expand the studio.events.StudioEvent.EXPAND_START is dispatched.\n    4. The Ad optionally performs an animated expansion.\n    5. Ad then calls Enabler.finishExpand() to complete expansion. This makes sure pushdowns are syncronized.\n\nInitiates the expand lifecycle. This begins by calling requestExpand(), waiting for EXPAND_START\nevent, animating your expand, then calling finishExpand() when the creative has fully expanded.\nPlease use event listeners to invoke the expanded state of the ad as the expand may be dispatched\nby the environment independently of calling `studio.Enabler#requestExpand()`. Typical usage will\nlook like:",
            "itemtype": "method",
            "name": "requestExpand",
            "example": [
                "\n        Enabler.addEventListener(\n            studio.events.StudioEvent.EXPAND_START,\n            function(event) {\n                // For multi directional expands, direction to expand in can be obtained by\n                // calling Enabler.getExpandingDirection() (or from event.direction).\n                // Do expand action then...\n                Enabler.finishExpand();\n            });\n        Enabler.requestExpand();"
            ],
            "class": "Enabler",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 1170,
            "description": "Finalizes the expand call via the rendering code.",
            "itemtype": "method",
            "name": "finishExpand",
            "class": "Enabler",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 1183,
            "description": "Collapsing flow:\n   1. Register event listeners.\n   2. When you want to collapse call Enabler.requestCollapse().\n   3. When the environment is ready to collapse the studio.events.StudioEvent.COLLAPSE_START is dispatched.\n       This can get dispatched independently of Enabler.requestCollapse() as sometimes the environment provides a close button outside of the creative.\n   4. The Ad optionally performs an animated collapse.\n   5. Ad then calls Enabler.finishCollapse() to complete collapse and close div.\n\nInitiates the collapse lifecycle. This begins by calling requestCollapse(), waiting for the\nCOLLAPSE_START event, animating your collapse, then calling finishCollapse() when the\ncreative has fully collapsed. Please use event listeners to invoke the collapsed state of\nthe ad as the collapse event may be dispatched by the environment independently of calling\nstudio.Enabler#requestCollapse().",
            "itemtype": "method",
            "name": "requestCollapse",
            "example": [
                "\n\n       Enabler.addEventListener(\n           studio.events.StudioEvent.COLLAPSE_START,\n           function () {\n               // Do collapse action then...\n               Enabler.finishCollapse();\n           });\n       Enabler.requestCollapse();"
            ],
            "class": "Enabler",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 1216,
            "description": "Clips the container or the html asset from the expanded dimensions to the collapsed dimensions.\nPlease use event listeners to invoke the collapsed state of the ad as the collapse event may\nbe dispatched by the environment independently of calling studio.Enabler#requestCollapse().",
            "itemtype": "method",
            "name": "finishCollapse",
            "example": [
                "\n        Enabler.addEventListener(\n            studio.events.StudioEvent.COLLAPSE_START,\n            function () {\n                // collapse action\n                Enabler.finishCollapse();\n            });\n        Enabler.requestCollapse();"
            ],
            "class": "Enabler",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 1237,
            "description": "Requests fullscreen collapse. Please listen for the studio.event.StudioEvent.FULLSCREEN_COLLAPSE_START\nevent to start collapse.",
            "itemtype": "method",
            "name": "requestFullscreenCollapse",
            "class": "Enabler",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 1248,
            "description": "Requests fullscreen expand. If width and height are provided, expands to a rectangle of that width\nand height centered in the middle of the display (or browser window, if the browser is not\nfullscreen). Otherwise expands to the full size of the browser window/display. Note that on\nmobile devices the browser window typically takes up the entire display.",
            "itemtype": "method",
            "name": "requestFullscreenExpand",
            "params": [
                {
                    "name": "opt_width",
                    "description": "Width we would like to expand to in pixels",
                    "type": "Number"
                },
                {
                    "name": "opt_height",
                    "description": "Height we would like to expand to in pixels",
                    "type": "Number"
                }
            ],
            "class": "Enabler",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 1266,
            "description": "Finishes fullscreen collapse.",
            "itemtype": "method",
            "name": "finishFullscreenCollapse",
            "class": "Enabler",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 1276,
            "description": "Finishes fullscreen expand.",
            "itemtype": "method",
            "name": "finishFullscreenExpand",
            "class": "Enabler",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 1287,
            "description": "Returns whether the ad is visible. The Enabler dispatches the StudioEvent.VISIBLE event.",
            "itemtype": "method",
            "name": "isVisible",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Enabler",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 1297,
            "description": "Retrieves a creative parameter that the user can pass via queryString URL. This is also used internally to access ad configuration data.",
            "itemtype": "method",
            "name": "getParameter",
            "params": [
                {
                    "name": "name",
                    "description": "Name of the variable to get from the URL",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Enabler",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 1310,
            "description": "Retrieves a creative parameter as an integer.",
            "itemtype": "method",
            "name": "getParameterAsInteger",
            "params": [
                {
                    "name": "name",
                    "description": "Name of the variable to get from the URL",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Integer"
            },
            "class": "Enabler",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 1325,
            "description": "Retrieves a creative parameter as a nullable string.",
            "itemtype": "method",
            "name": "getParameter",
            "params": [
                {
                    "name": "name",
                    "description": "Name of the variable to get from the URL",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Enabler",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 1338,
            "description": "Get studio object",
            "itemtype": "method",
            "name": "getStudio",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Enabler",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 1352,
            "description": "Returns the instance of the enabler singleton.",
            "itemtype": "method",
            "name": "getInstance",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Enabler",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 1361,
            "description": "Closes the companion asset for floating, reminder, and pop-up creative types.",
            "itemtype": "method",
            "name": "closeCompanion",
            "class": "Enabler",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 1369,
            "description": "Triggers the display of the companion asset for floating, reminder, and pop-up advert types.",
            "itemtype": "method",
            "name": "displayCompanion",
            "class": "Enabler",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 1382,
            "description": "Adds a new handler for an otherwise unknown message.",
            "itemtype": "method",
            "name": "addMessageHandler",
            "params": [
                {
                    "name": "messageName",
                    "description": "The name of the message, which cannot match an exported method on studio.Enabler.",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "The handler function",
                    "type": "Function"
                }
            ],
            "class": "Enabler",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 1392,
            "description": "Removes a new handler for an otherwise unknown message.",
            "itemtype": "method",
            "name": "removeMessageHandler",
            "params": [
                {
                    "name": "messageName",
                    "description": "The name of the message, which cannot match an exported method on studio.Enabler.",
                    "type": "String"
                }
            ],
            "class": "Enabler",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 1401,
            "description": "Returns an object representing the orientation of the device.",
            "itemtype": "method",
            "name": "getOrientation",
            "return": {
                "description": "An object representing the orientation of the device.",
                "type": "Object"
            },
            "class": "Enabler",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 1411,
            "description": "Returns the user's bandwidth according to DART bandwidth codes.",
            "itemtype": "method",
            "name": "getUserBandwidth",
            "return": {
                "description": "An integer representing the user's bandwidth. Bandwidth values are:\n 1. Unknown = 0\n 2. Dialup = 1\n 3. DSL = 2\n 4. Cable = 3\n 5. Broadband = 4\n 6. T1 = 5",
                "type": "Number"
            },
            "class": "Enabler",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 1427,
            "description": "Returns the two-letter string representation of the user's country.",
            "itemtype": "method",
            "name": "getUserCountry",
            "return": {
                "description": "Two-letter string representation of the user's country.",
                "type": "String"
            },
            "class": "Enabler",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 1437,
            "description": "Returns the DART representation of the user's Nielsen Designated Market Area.",
            "itemtype": "method",
            "name": "getUserDMACode",
            "return": {
                "description": "A DART representation of the user's Nielson Designated Market Area.",
                "type": "Number"
            },
            "class": "Enabler",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 1447,
            "description": "Returns the two-letter string representation of the user's state or province.",
            "itemtype": "method",
            "name": "getUserState",
            "return": {
                "description": "Two-letter string representation of the user's state or province.",
                "type": "String"
            },
            "class": "Enabler",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 1457,
            "description": "Returns the user's zip code (for users in the United States, U.S. territories, and Canada).",
            "itemtype": "method",
            "name": "getUserZipCode",
            "return": {
                "description": "The user's zip code as supplied by the ad server.",
                "type": "String"
            },
            "class": "Enabler",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 1467,
            "description": "Checks if a user has interacted with the document.",
            "itemtype": "method",
            "name": "hasUserInteracted",
            "return": {
                "description": "Whether the user has interacted with the document.",
                "type": "Boolean"
            },
            "class": "Enabler",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 1477,
            "description": "Invoke a function in the parent container. This could be the top frame if served via a adj (script) tag, the serving iframe if served via and adi (iframe) tag.",
            "itemtype": "method",
            "name": "invokeExternalJsFunction",
            "params": [
                {
                    "name": "functionName",
                    "description": "The function name to invoke.",
                    "type": "String"
                }
            ],
            "class": "Enabler",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 1486,
            "description": "Invoke a function on the mraid api. This is different from invokeExternalJsFunction as you are given the results of the function in a callback.",
            "itemtype": "method",
            "name": "invokeMraidMethod",
            "params": [
                {
                    "name": "methodName",
                    "description": "The method name to invoke on the mraid object. You can also use dot accessors to access subobjects if they are ever introduced. For instance, 'package.method', would call window.mraid.package.method().",
                    "type": "String"
                },
                {
                    "name": "opt_args",
                    "description": "The arguments to invoke the method with.",
                    "type": "Array"
                },
                {
                    "name": "opt_callback",
                    "description": "A callback that gets invoked with the results of the function call.",
                    "type": "Function"
                }
            ],
            "class": "Enabler",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 1497,
            "description": "Returns whether the ad is serving in the live environment or not.",
            "itemtype": "method",
            "name": "isServingInLiveEnvironment",
            "return": {
                "description": "Whether the ad is serving in the live environment or not.",
                "type": "Boolean"
            },
            "class": "Enabler",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 1507,
            "description": "Initiates a query for the maximum allowable fullscreen dimensions. A studio.event.StudioEvent.FULLSCREEN_DIMENSIONS event will be dispatched with the maximum allowed width and height as properties.\nSome publishers may pad the fullscreen window for a lightbox-like experience. Because of this the maximum allowable dimensions may not take up the entire browser window or screen.",
            "itemtype": "method",
            "name": "queryFullscreenDimensions",
            "class": "Enabler",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 1516,
            "description": "Initiates a query to find out whether mock fullscreen expansion mode is supported. Please listen for the studio.event.StudioEvent.FULLSCREEN_SUPPORT event. This event will contain the support status.",
            "itemtype": "method",
            "name": "queryFullscreenSupport",
            "class": "Enabler",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 1524,
            "description": "Provide a method that allows the creative to define a chargeable event.",
            "itemtype": "method",
            "name": "registerChargeableEventName",
            "params": [
                {
                    "name": "eventName",
                    "description": "String name for which a counter or timer event will be will be will be triggered in the creative execution.",
                    "type": "String"
                }
            ],
            "class": "Enabler",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 1533,
            "description": "Counts instances of the string parameter, aggregated as Custom Variable Count 1 in reports. The string must meet the following criteria:\n * The string cannot exceed 100 characters\n * The string must only contain Latin characters (0-9, Aa-Zz)\n * The String must NOT contain any personally identifiable information such as name, email address, phone number, health info, financial info, etc.\nAdditionally, all question marks (?) and anything after the first question mark in a string will be truncated.",
            "itemtype": "method",
            "name": "reportCustomVariableCount1",
            "params": [
                {
                    "name": "customString",
                    "description": "Value to record against custom variable count 1.",
                    "type": "String"
                }
            ],
            "class": "Enabler",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 1546,
            "description": "Counts instances of the string parameter, aggregated as Custom Variable Count 2 in reports. The string must meet the following criteria:\n * The string cannot exceed 100 characters\n * The string must only contain Latin characters (0-9, Aa-Zz)\n * The String must NOT contain any personally identifiable information such as name, email address, phone number, health info, financial info, etc.\nAdditionally, all question marks (?) and anything after the first question mark in a string will be truncated.",
            "itemtype": "method",
            "name": "reportCustomVariableCount2",
            "params": [
                {
                    "name": "customString",
                    "description": "Value to record against custom variable count 2.",
                    "type": "String"
                }
            ],
            "class": "Enabler",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 1559,
            "description": "Set the dynamic content development values.",
            "itemtype": "method",
            "name": "setDevDynamicContent",
            "params": [
                {
                    "name": "value",
                    "description": "The Dynamic Content development values.",
                    "type": "Object"
                }
            ],
            "class": "Enabler",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 1568,
            "description": "Adds a Hint to this creative.",
            "itemtype": "method",
            "name": "setHint",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the hint we want to add.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The value of the hint we want to add.",
                    "type": "String"
                }
            ],
            "class": "Enabler",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 1578,
            "description": "Get the dynamic creative profile id.",
            "itemtype": "method",
            "name": "getProfileId",
            "return": {
                "description": "Returns the dynamic creative profile id.",
                "type": "Number"
            },
            "class": "Enabler",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 1588,
            "description": "Set the dynamic creative profile id.",
            "itemtype": "method",
            "name": "setProfileId",
            "params": [
                {
                    "name": "value",
                    "description": "Profile id.",
                    "type": "Number"
                }
            ],
            "class": "Enabler",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 1597,
            "description": "Returns the DART ad ID.",
            "itemtype": "method",
            "name": "getDartAdId",
            "return": {
                "description": "Integer value of the ID number (generated by DART) that identifies the ad.",
                "type": "Number"
            },
            "class": "Enabler",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 1607,
            "description": "Returns the DART asset ID.",
            "itemtype": "method",
            "name": "getDartAssetId",
            "return": {
                "description": "The ID (generated by DART) that identifies the creative.",
                "type": "String"
            },
            "class": "Enabler",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 1617,
            "description": "Returns the DART creative ID.",
            "itemtype": "method",
            "name": "getDartCreativeId",
            "return": {
                "description": "The ID number (generated by DART) that identifies the creative.",
                "type": "Number"
            },
            "class": "Enabler",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 1627,
            "description": "Returns the DART page ID.",
            "itemtype": "method",
            "name": "getDartPageId",
            "return": {
                "description": "The ID number (generated by DART) that identifies the zone where the creative is served.",
                "type": "Number"
            },
            "class": "Enabler",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 1637,
            "description": "Returns the DART rendering ID.",
            "itemtype": "method",
            "name": "getDartRenderingId",
            "return": {
                "description": "The ID (generated by DART) that identifies the rendering version of the creative.",
                "type": "String"
            },
            "class": "Enabler",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 1647,
            "description": "Returns the DART site ID.",
            "itemtype": "method",
            "name": "getDartSiteId",
            "return": {
                "description": "Integer value of the ID number that identifies the site where the creative is served, as defined in DART.",
                "type": "Number"
            },
            "class": "Enabler",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 1657,
            "description": "Returns the DART site name.",
            "itemtype": "method",
            "name": "getDartSiteName",
            "return": {
                "description": "The name of the site where the creative is served, as defined in DART.",
                "type": "String"
            },
            "class": "Enabler",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 1667,
            "description": "Notifies of issues / missing things inside Enabler. For Internal Use Only.",
            "itemtype": "method",
            "name": "enablerLogger",
            "params": [
                {
                    "name": "A",
                    "description": "mixed message to display to the user",
                    "type": "Mixed"
                }
            ],
            "class": "Enabler",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 1674,
            "description": "Loads an additional script file",
            "itemtype": "method",
            "name": "loadScript",
            "params": [
                {
                    "name": "scriptUrl",
                    "description": "The url of the script to load",
                    "type": "String"
                },
                {
                    "name": "opt_loadedCallback",
                    "description": "The callback to invoke when the script is loaded",
                    "type": "Function"
                }
            ],
            "class": "Enabler",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 1699,
            "description": "Loads an additional module",
            "itemtype": "method",
            "name": "loadModule",
            "params": [
                {
                    "name": "moduleType",
                    "description": "The name of the module to load.",
                    "type": "studio.module.ModuleId"
                },
                {
                    "name": "opt_loadedCallback",
                    "description": "The callback to invoke when the module is loaded",
                    "type": "Function"
                }
            ],
            "class": "Enabler",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 1750,
            "description": "Adds a dynamic property to the event.",
            "params": [
                {
                    "name": "key",
                    "description": "The key to add.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The value of the property.",
                    "type": "*"
                }
            ],
            "return": {
                "description": "Returns this event for convenience."
            },
            "class": "Enabler",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 1891,
            "description": "Observes a video element for reporting",
            "itemtype": "method",
            "name": "attach",
            "params": [
                {
                    "name": "videoReportingIdentifier",
                    "description": "The name the video should report as.",
                    "type": "String"
                },
                {
                    "name": "videoElement",
                    "description": "The video element to report on.",
                    "type": "HTMLVideoElement"
                },
                {
                    "name": "opt_trackAsAutoPlay",
                    "description": "Used to indicate whether to track the initial play as a \"video interaction\" OR a set of which elements to track.",
                    "type": "Boolean|Object"
                }
            ],
            "example": [
                "\n                    // Track AutoPlay - start / 50 / end\n                    studio.video.Reporter.attach(\"video_id\", videoNode, true);\n\n                    // Track Everything ( start / 25 / 50/ 75 / ended / pause / volume / seeked / replay )\n                   studio.video.Reporter.attach(\"video_id\", videoNode, false);\n\n                   // Track Optional ( start / ended )\n                   var vidTrackConf = {\n                       start: true,\n                       25: false,\n                       50: false,\n                       75: false,\n                       ended: true,\n                       pause: false,\n                       volumechange: false,\n                       seeked: false\n                   };\n                   studio.video.Reporter.attach('video_id', videoNode, vidTrackConf);\n\nfor autoplay videos (the play event will always get tracked). This defaults to true."
            ],
            "class": "Enabler",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 1974,
            "description": "Stops a video reporting identifier from reporting.",
            "itemtype": "method",
            "name": "detach",
            "params": [
                {
                    "name": "videoReportingIdentifier",
                    "description": ""
                }
            ],
            "class": "Enabler",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 2049,
            "description": "enableConsole Pass through true to enable consoles from Enabler, false otherwise.",
            "itemtype": "property",
            "name": "enableConsole",
            "type": "Boolean",
            "default": "false",
            "class": "EnablerConfig",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 2056,
            "description": "exposeADTECH Enabler replacement for AOL 1's ADTECH Library - Wraps Enabler calls in ADTECH function API",
            "itemtype": "property",
            "name": "exposeADTECH",
            "type": "Boolean",
            "default": "false",
            "class": "EnablerConfig",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 2062,
            "description": "htmlRoot URI Of the HTML Root Assets.",
            "itemtype": "property",
            "name": "htmlRoot",
            "type": "String",
            "default": "Empty String",
            "class": "EnablerConfig",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 2068,
            "description": "tracking if set to an object that defines the tracking for this ad will setup a tracking system within Enabler.",
            "itemtype": "property",
            "name": "tracking",
            "type": "Object",
            "default": "Empty Object",
            "class": "EnablerConfig",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 2074,
            "description": "eventPropagation Set to true will propagate both `redirect` and `track` requests from within the ad. Set to\n`track` will only propagate the tracking redirects.\n`redirect` will only propage when a redirect will get called",
            "itemtype": "property",
            "name": "eventPropagation",
            "type": "Mixed",
            "default": "false",
            "class": "EnablerConfig",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 2082,
            "description": "enablerTarget CDN Location of the Enabler to load and use in the ad.",
            "itemtype": "property",
            "name": "enablerTarget",
            "type": "String",
            "default": "null",
            "class": "EnablerConfig",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 2088,
            "description": "exitUrls List of exit URLs.",
            "example": [
                "\n```\n    exitUrls: {\n        clickTAG: 'http://www.example.com/siteOne',\n        clickTAG1: 'http://www.example.com/siteTwo',\n        clickTAG2: 'http://www.example.com/siteThree',\n    }\n```"
            ],
            "itemtype": "property",
            "name": "exitUrls",
            "type": "Object",
            "default": "Empty Object",
            "class": "EnablerConfig",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 2102,
            "description": "enablerInteractionTracking Given this config param, once set to `true` will execute interaction tracks within Enabler.",
            "itemtype": "property",
            "name": "enablerInteractionTracking",
            "type": "Boolean",
            "default": "false",
            "class": "EnablerConfig",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 2108,
            "description": "trackingLabels provided this set, a label will be applied to simple key / value replacement",
            "example": [
                "\n```\n    trackingLabels: {\n        video1:25 : 'billboard_view_video1_25percent',\n        video1:50 : 'billboard_view_video1_50percent',\n        video1:75 : 'billboard_view_video1_75percent'\n    }\n```"
            ],
            "itemtype": "property",
            "name": "trackingLabels",
            "type": "Object",
            "default": "Empty Object",
            "class": "EnablerConfig",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 2125,
            "description": "currentEnv Keeps the current environment that this ad was rendered in.",
            "itemtype": "property",
            "name": "currentEnv!~YUIDOC_LINE~!default 'generic'",
            "type": "String",
            "access": "private",
            "tagname": "",
            "class": "EnablerConfig",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 2132,
            "description": "countersList List of counters that have been started.",
            "itemtype": "property",
            "name": "countersList",
            "type": "Object",
            "default": "Empty Object",
            "access": "private",
            "tagname": "",
            "class": "EnablerConfig",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 2139,
            "description": "callbacks Queue of callbacks to execute after initialized is called.",
            "itemtype": "property",
            "name": "callbacks",
            "type": "Array",
            "default": "Empty Array",
            "access": "private",
            "tagname": "",
            "class": "EnablerConfig",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 2146,
            "description": "initialized Internal flag that signifies that Enabler has been initialized or not",
            "itemtype": "property",
            "name": "initialized",
            "type": "Boolean",
            "default": "false",
            "access": "private",
            "tagname": "",
            "class": "EnablerConfig",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 2153,
            "description": "timerCollection Collection of timers used inside this Enabler instance.",
            "itemtype": "property",
            "name": "timerCollection",
            "type": "Object",
            "default": "Empty Object",
            "access": "private",
            "tagname": "",
            "class": "EnablerConfig",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 2160,
            "description": "pageLoaded Internal flag that signifies that the Page `(on)load` event has fired",
            "itemtype": "property",
            "name": "pageLoaded",
            "type": "Boolean",
            "default": "false",
            "access": "private",
            "tagname": "",
            "class": "EnablerConfig",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 2167,
            "description": "videoListener Internal flag that keeps track of video listeners applied to videos.",
            "itemtype": "property",
            "name": "videoListener",
            "type": "OBject",
            "default": "null",
            "access": "private",
            "tagname": "",
            "class": "EnablerConfig",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_Enabler.js",
            "line": 2174,
            "description": "videoTracking Internal set of video tracking references.",
            "itemtype": "property",
            "name": "videoTracking",
            "type": "OBject",
            "default": "null",
            "access": "private",
            "tagname": "",
            "class": "EnablerConfig",
            "module": "Enabler"
        },
        {
            "file": "src/library/ACT_IO.js",
            "line": 27,
            "description": "EVENTS",
            "class": "IO",
            "module": "IO"
        },
        {
            "file": "src/library/ACT_IO.js",
            "line": 37,
            "is_constructor": 1,
            "class": "IO",
            "module": "IO"
        },
        {
            "file": "src/library/ACT_IO.js",
            "line": 45,
            "description": "default attribute",
            "class": "IO",
            "module": "IO"
        },
        {
            "file": "src/library/ACT_IO.js",
            "line": 49,
            "itemtype": "attribute",
            "name": "NAME",
            "type": "String",
            "class": "IO",
            "module": "IO"
        },
        {
            "file": "src/library/ACT_IO.js",
            "line": 54,
            "itemtype": "attribute",
            "name": "inputPath",
            "type": "String",
            "class": "IO",
            "module": "IO"
        },
        {
            "file": "src/library/ACT_IO.js",
            "line": 61,
            "description": "Public properties",
            "class": "IO",
            "module": "IO"
        },
        {
            "file": "src/library/ACT_IO.js",
            "line": 65,
            "description": "Method auto initiated when the class is instantiated",
            "itemtype": "method",
            "name": "initializer",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "config",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "IO",
            "module": "IO"
        },
        {
            "file": "src/library/ACT_IO.js",
            "line": 76,
            "description": "Method load initiated when the class is instantiated",
            "itemtype": "method",
            "name": "load",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "path",
                    "description": ", Path to file to load",
                    "type": "String"
                }
            ],
            "class": "IO",
            "module": "IO"
        },
        {
            "file": "src/library/ACT_SWFBridge.js",
            "line": 27,
            "itemtype": "attribute",
            "name": "ATTRS",
            "initonly": "",
            "class": "UA",
            "module": "IO"
        },
        {
            "file": "src/library/ACT_SWFBridge.js",
            "line": 33,
            "itemtype": "attribute",
            "name": "NAME",
            "type": "String",
            "class": "UA",
            "module": "IO"
        },
        {
            "file": "src/library/ACT_UA.js",
            "line": 27,
            "description": "Detect current OS",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "}",
                "type": "Name: string, version: number"
            },
            "class": "UA",
            "module": "IO"
        },
        {
            "file": "src/library/ACT_UA.js",
            "line": 75,
            "description": "Detect Mobiles",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "}",
                "type": "Boolean"
            },
            "class": "UA",
            "module": "IO"
        },
        {
            "file": "src/library/ACT_UA.js",
            "line": 87,
            "description": "Detect Tablets",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "}",
                "type": "Boolean"
            },
            "class": "UA",
            "module": "IO"
        },
        {
            "file": "src/library/ACT_UA.js",
            "line": 99,
            "description": "Detect if current browser supports Flash, and if so, returns the version which is installed",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "UA",
            "module": "IO"
        },
        {
            "file": "src/library/ACT_UA.js",
            "line": 146,
            "description": "Identifies the browser in use.\nIn case the browser is being used, returns the browser version, it returns 0 otherwise.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "str",
                    "description": "navigator.userAgent.toString()",
                    "type": "String"
                },
                {
                    "name": "regex",
                    "description": "Regex used to identify a specific browser version",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Browser version or 0",
                "type": "Number"
            },
            "class": "UA",
            "module": "IO"
        },
        {
            "file": "src/library/ACT_UA.js",
            "line": 169,
            "description": "Detects if Canvas is supported by browser",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "UA",
            "module": "IO"
        },
        {
            "file": "src/library/ACT_UA.js",
            "line": 180,
            "description": "Detects if Drag and Drop is supported by browser",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "UA",
            "module": "IO"
        },
        {
            "file": "src/library/ACT_UA.js",
            "line": 191,
            "description": "Detects if canvas and text on canvas is supported by browser",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "UA",
            "module": "IO"
        },
        {
            "file": "src/library/ACT_UA.js",
            "line": 203,
            "description": "Detects if playing audio is supported by browser",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "UA",
            "module": "IO"
        },
        {
            "file": "src/library/ACT_UA.js",
            "line": 236,
            "description": "Detects if native video playing is supported by browser",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "UA",
            "module": "IO"
        },
        {
            "file": "src/library/ACT_UA.js",
            "line": 294,
            "description": "Detects browser",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "}",
                "type": "Name: string, version: number"
            },
            "class": "UA",
            "module": "IO"
        },
        {
            "file": "src/library/ACT_UA.js",
            "line": 345,
            "description": "Helper reference to document.documentElement",
            "itemtype": "method",
            "name": "doc",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "UA",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_UA.js",
            "line": 355,
            "description": "Identifies the browser in use. In case the browser is being used, returns the browser version, it returns 0 otherwise.",
            "itemtype": "method",
            "name": "checkBrowser",
            "params": [
                {
                    "name": "str",
                    "description": "navigator.userAgent.toString()",
                    "type": "String"
                },
                {
                    "name": "regex",
                    "description": "Regex used to identify a specific browser version",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Browser version or 0*",
                "type": "Number"
            },
            "class": "UA",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_UA.js",
            "line": 364,
            "description": "Detect current OS",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "userAgent",
                    "description": "navigator.userAgent.toString()",
                    "type": "String"
                }
            ],
            "return": {
                "description": "}",
                "type": "Name: string, version: number"
            },
            "class": "UA",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_UA.js",
            "line": 372,
            "description": "Test to figure out which OS is in use",
            "itemtype": "method",
            "name": "os",
            "return": {
                "description": "OS in use.",
                "type": "String"
            },
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "UA",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_UA.js",
            "line": 381,
            "description": "Return the current browser",
            "itemtype": "method",
            "name": "browser",
            "return": {
                "description": "}.",
                "type": "Name: string, version: number"
            },
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "UA",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_UA.js",
            "line": 390,
            "description": "Test to see if the browser in use is Internet Explorer",
            "itemtype": "method",
            "name": "isIE",
            "return": {
                "description": "version of the IE browser in use.",
                "type": "Number"
            },
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "UA",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_UA.js",
            "line": 399,
            "description": "Test to see if the browser in use is FireFox",
            "itemtype": "method",
            "name": "isFireFox",
            "return": {
                "description": "version of the FireFox browser in use.",
                "type": "Number"
            },
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "UA",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_UA.js",
            "line": 408,
            "description": "Test to see if the browser in use is Safari",
            "itemtype": "method",
            "name": "isSafari",
            "return": {
                "description": "version of the Safari browser in use.",
                "type": "Number"
            },
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "UA",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_UA.js",
            "line": 417,
            "description": "Test to see if the browser in use is Chrome",
            "itemtype": "method",
            "name": "isChrome",
            "return": {
                "description": "major version of the Chrome browser in use.",
                "type": "Number"
            },
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "UA",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_UA.js",
            "line": 426,
            "description": "Test to see if the browser is WebKit compatible",
            "itemtype": "method",
            "name": "isWebKit",
            "return": {
                "description": "WebKit version",
                "type": "Number"
            },
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "UA",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_UA.js",
            "line": 435,
            "description": "Determine the flash version the user has",
            "itemtype": "method",
            "name": "isFlash",
            "return": {
                "description": "version of Flash on the users computer or 0 if no flash.",
                "type": "Number"
            },
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "UA",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_UA.js",
            "line": 445,
            "description": "Checks if the current browser supports the drag and drop feature",
            "itemtype": "method",
            "name": "dragDropSupport",
            "access": "private",
            "tagname": "",
            "type": "Function",
            "class": "UA",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_UA.js",
            "line": 453,
            "description": "Check HTML5 text canvas element supports",
            "itemtype": "method",
            "name": "canvasTextSupport",
            "access": "private",
            "tagname": "",
            "type": "Function",
            "class": "UA",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_UA.js",
            "line": 461,
            "description": "Checks HTML5 canvas supports",
            "itemtype": "method",
            "name": "canvasSupport",
            "access": "private",
            "tagname": "",
            "type": "Function",
            "class": "UA",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_UA.js",
            "line": 469,
            "description": "Checks HTML5 audio support",
            "itemtype": "method",
            "name": "audioSupport",
            "access": "private",
            "tagname": "",
            "type": "Function",
            "class": "UA",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_UA.js",
            "line": 477,
            "description": "Checks HTML5 video support",
            "itemtype": "method",
            "name": "videoSupport",
            "access": "private",
            "tagname": "",
            "type": "Function",
            "class": "UA",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_UA.js",
            "line": 485,
            "description": "Checks HTML5 support",
            "itemtype": "method",
            "name": "isHtml5Supported",
            "access": "public",
            "tagname": "",
            "static": 1,
            "return": {
                "description": "true if have HTML5, false if not",
                "type": "Boolean"
            },
            "class": "UA",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_UA.js",
            "line": 494,
            "description": "Check for mobiles",
            "itemtype": "method",
            "name": "checkMobile",
            "class": "UA",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_UA.js",
            "line": 500,
            "description": "Check for tablet",
            "itemtype": "method",
            "name": "checkTablet",
            "class": "UA",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_UA.js",
            "line": 506,
            "description": "Is a Mobile",
            "itemtype": "method",
            "name": "isMobile",
            "class": "UA",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_UA.js",
            "line": 512,
            "description": "Is a Tablet",
            "itemtype": "method",
            "name": "isTablet",
            "class": "UA",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_VideoEvents.js",
            "line": 33,
            "description": "Fired when video starts playing",
            "itemtype": "event",
            "name": "'video:start'",
            "class": "VideoEvents",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_VideoEvents.js",
            "line": 39,
            "description": "Fired when video stops playing",
            "itemtype": "event",
            "name": "'video:stop'",
            "class": "VideoEvents",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_VideoEvents.js",
            "line": 45,
            "description": "Fired when video playing is resumed ( from pause state )",
            "itemtype": "event",
            "name": "'video:resume'",
            "class": "VideoEvents",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_VideoEvents.js",
            "line": 51,
            "description": "Fired when video is replayed.",
            "itemtype": "event",
            "name": "'video:replay'",
            "class": "VideoEvents",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_VideoEvents.js",
            "line": 57,
            "description": "Fired when video is paused",
            "itemtype": "event",
            "name": "'video:pause'",
            "class": "VideoEvents",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_VideoEvents.js",
            "line": 63,
            "description": "Fired when video sound is turned on",
            "itemtype": "event",
            "name": "'video:soundOn'",
            "class": "VideoEvents",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_VideoEvents.js",
            "line": 69,
            "description": "Fired when video sound is turned off ( mute )",
            "itemtype": "event",
            "name": "'video:soundOff'",
            "class": "VideoEvents",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_VideoEvents.js",
            "line": 75,
            "description": "Fired when video is being seeked/scrubbed by the user.",
            "itemtype": "event",
            "name": "'video:seeked'",
            "class": "VideoEvents",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_VideoEvents.js",
            "line": 81,
            "description": "Fired when video has played 25%",
            "itemtype": "event",
            "name": "'video:25percent'",
            "class": "VideoEvents",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_VideoEvents.js",
            "line": 87,
            "description": "Fired when video has played 50%",
            "itemtype": "event",
            "name": "'video:50percent'",
            "class": "VideoEvents",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_VideoEvents.js",
            "line": 93,
            "description": "Fired when video has played 75%",
            "itemtype": "event",
            "name": "'video:75percent'",
            "class": "VideoEvents",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_VideoEvents.js",
            "line": 99,
            "description": "Fired when video has finished playing",
            "itemtype": "event",
            "name": "'video:complete'",
            "class": "VideoEvents",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_VideoEvents.js",
            "line": 105,
            "description": "Fired when video has being clicked",
            "itemtype": "event",
            "name": "'video:clicked'",
            "class": "VideoEvents",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_VideoEvents.js",
            "line": 134,
            "description": "Get if screen has been clicked or not",
            "params": [
                {
                    "name": "node",
                    "description": ""
                },
                {
                    "name": "offset",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "VideoEvents",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_VideoEvents.js",
            "line": 158,
            "itemtype": "method",
            "name": "VideoEvent",
            "params": [
                {
                    "name": "videoNode",
                    "description": "DOM Node of the video to track OR ID of the video node",
                    "type": "Object"
                },
                {
                    "name": "videoID",
                    "description": "Identifier of the video for tracking.",
                    "type": "String"
                },
                {
                    "name": "config",
                    "description": "Optional configuration for tracking.",
                    "type": "Object"
                }
            ],
            "access": "public",
            "tagname": "",
            "example": [
                "\n```\n // This example will track start, 25percent, 50percent, 75percent, complete, pause.\n // Will NOTE track: volume change ( sound on / sound off ) and seek.\n var config = {\n     resumeThreshold: 0.05,\n     tracking : {\n         start : true,\n         25: true,\n         50: true,\n         75: true,\n         ended: true,\n         pause: true,\n         volumechange: false,\n         seeked: false,\n         clicked: false\n     }\n }\n var videoNode = Dom.ById(\"videoNodeId\");\n var videoEvents = new ACT.VideoEvents( videoNode, \"video1\", config);\n\n // Now to attach to these events.\n var Event = ACT.Event;\n Event.on( 'video:action', function( event_data ){ event.event == 'video:<type>'; \"..do something with data ...\"; }, null, this );\n```"
            ],
            "class": "VideoEvents",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_VideoEvents.js",
            "line": 230,
            "itemtype": "attribute",
            "name": "ATTRS",
            "initonly": "",
            "class": "VideoEvents",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_VideoEvents.js",
            "line": 235,
            "itemtype": "attribute",
            "name": "NAME",
            "type": "String",
            "class": "VideoEvents",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_VideoEvents.js",
            "line": 244,
            "description": "Function that broadcasts the events to the world. Checks that we want to broadcast the event.",
            "itemtype": "method",
            "name": "broadcast",
            "access": "private",
            "tagname": "",
            "class": "VideoEvents",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_VideoEvents.js",
            "line": 283,
            "description": "Function that confirms that the node that was passed in is in fact a VIDEO node.",
            "itemtype": "method",
            "name": "validateVideoNode",
            "access": "private",
            "tagname": "",
            "class": "VideoEvents",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_VideoEvents.js",
            "line": 305,
            "description": "Function that initialized the events that will fire for the video node.",
            "itemtype": "method",
            "name": "initializeVideoTracking",
            "access": "private",
            "tagname": "",
            "class": "VideoEvents",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_VideoEvents.js",
            "line": 330,
            "description": "Function to calculate video percentage",
            "itemtype": "method",
            "name": "calculateVideoPercentage",
            "access": "private",
            "tagname": "",
            "class": "VideoEvents",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_VideoEvents.js",
            "line": 372,
            "description": "Function to fire a seeked event",
            "itemtype": "method",
            "name": "onSeeked",
            "params": [
                {
                    "name": "event",
                    "description": "data",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "VideoEvents",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_VideoEvents.js",
            "line": 383,
            "description": "Function to fire a pause event. Only fires the pause if we're 5% ~ 95% of video play time.\nNOTE: The 5%/95% is based on the VIDEO_START_THRESHOLD which can be redefined to be more or less than the 5% used as default.",
            "itemtype": "method",
            "name": "onPause",
            "params": [
                {
                    "name": "event",
                    "description": "data",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "VideoEvents",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_VideoEvents.js",
            "line": 408,
            "description": "Function to fire a onTimeUpdate event",
            "itemtype": "method",
            "name": "onTimeUpdate",
            "params": [
                {
                    "name": "event",
                    "description": "data",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "VideoEvents",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_VideoEvents.js",
            "line": 450,
            "description": "Function to be called when the sound of the video has been changed",
            "itemtype": "method",
            "name": "onVolumeChange",
            "params": [
                {
                    "name": "event",
                    "description": "data",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "VideoEvents",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_VideoEvents.js",
            "line": 478,
            "description": "Function to be called when we have reached our quartile milestones.",
            "itemtype": "method",
            "name": "progressTrack",
            "params": [
                {
                    "name": "time",
                    "description": "video time."
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "VideoEvents",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_VideoEvents.js",
            "line": 497,
            "description": "Function to be called when 'play' is fired. Fires off a \"start\", \"resume\" or \"replay\"\nDepending on the following logic:\n     IF firstPlay then we have a \"start\"\n     ELSE IF currentTime is between 5% and 95% then we have a \"resume\"\n     ELSE IF videoEnded then we have a \"replay\"",
            "itemtype": "method",
            "name": "onPlay",
            "params": [
                {
                    "name": "event",
                    "description": "data",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "VideoEvents",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_VideoEvents.js",
            "line": 532,
            "description": "Function to be called when the video is playing at 1 percent - and we missed our onPlay / start track",
            "itemtype": "method",
            "name": "on1Percent",
            "access": "private",
            "tagname": "",
            "class": "VideoEvents",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_VideoEvents.js",
            "line": 545,
            "description": "Function to be called when the video is playing at 25 percent",
            "itemtype": "method",
            "name": "on25Percent",
            "access": "private",
            "tagname": "",
            "class": "VideoEvents",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_VideoEvents.js",
            "line": 555,
            "description": "Function to be called when the video is playing at 50 percent",
            "itemtype": "method",
            "name": "on50Percent",
            "access": "private",
            "tagname": "",
            "class": "VideoEvents",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_VideoEvents.js",
            "line": 565,
            "description": "Function to be called when the video is playing at 75 percent",
            "itemtype": "method",
            "name": "on75Percent",
            "access": "private",
            "tagname": "",
            "class": "VideoEvents",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_VideoEvents.js",
            "line": 575,
            "description": "Function to be called when the video is complete.",
            "itemtype": "method",
            "name": "onEnded",
            "params": [
                {
                    "name": "event",
                    "description": "data",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "VideoEvents",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_VideoEvents.js",
            "line": 591,
            "description": "Function to be called when the video is clicked.",
            "itemtype": "method",
            "name": "onClicked",
            "params": [
                {
                    "name": "event",
                    "description": "data",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "VideoEvents",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_VideoEvents.js",
            "line": 620,
            "description": "Function to be called when the video flags need to be reset. Called after onEnded event",
            "itemtype": "method",
            "name": "resetParts",
            "access": "private",
            "tagname": "",
            "class": "VideoEvents",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_VideoEvents.js",
            "line": 637,
            "description": "Function to be called when we need to disconnect tracking from the video.",
            "itemtype": "method",
            "name": "destroy",
            "access": "public",
            "tagname": "",
            "class": "VideoEvents",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_animation.js",
            "line": 14,
            "description": "Post-fix for css style attributes",
            "class": "Capability",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_animation.js",
            "line": 39,
            "is_constructor": 1,
            "class": "Capability",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_animation.js",
            "line": 52,
            "itemtype": "attribute",
            "name": "NAME",
            "type": "String",
            "class": "Capability",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_animation.js",
            "line": 59,
            "description": "Core of the animation, containing setInterval loop",
            "params": [
                {
                    "name": "opts",
                    "description": "",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Capability",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_animation.js",
            "line": 90,
            "description": "Isolated context to execute an animation for only one css style attribute",
            "params": [
                {
                    "name": "element",
                    "description": "",
                    "type": "HTMLElement"
                },
                {
                    "name": "attr",
                    "description": "",
                    "type": "Sring"
                },
                {
                    "name": "from",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "to",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "duration",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "delay",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "length",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "loop",
                    "description": "",
                    "type": "Number"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Capability",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_animation.js",
            "line": 116,
            "description": "Check this tutorial to implement animation type\nhttp://javascript.info/tutorial/animation",
            "class": "Capability",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_animation.js",
            "line": 140,
            "description": "Filter method for the core animation, able to receive a group animation",
            "params": [
                {
                    "name": "element",
                    "description": "can be a string",
                    "type": "HTMLElement"
                },
                {
                    "name": "from",
                    "description": "or to",
                    "type": "Object"
                },
                {
                    "name": "to",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "duration",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "delay",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "onStart",
                    "description": "callback executed when the group of anim starts",
                    "type": "Function"
                },
                {
                    "name": "onComplete",
                    "description": "callback executed when the group of anim complete",
                    "type": "Function"
                }
            ],
            "itemtype": "method",
            "name": "anim",
            "access": "public",
            "tagname": "",
            "class": "Capability",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_capability.js",
            "line": 25,
            "itemtype": "attribute",
            "name": "ATTRS",
            "type": "{{NAME: string, version: string}}",
            "initonly": "",
            "class": "Capability",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_capability.js",
            "line": 38,
            "itemtype": "method",
            "name": "applyConfig",
            "class": "Capability",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_capability.js",
            "line": 58,
            "itemtype": "method",
            "name": "resize",
            "class": "Capability",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_class.js",
            "line": 30,
            "itemtype": "attribute",
            "name": "ATTRS",
            "type": "{{NAME: string, version: string}}",
            "initonly": "",
            "class": "Class",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_class.js",
            "line": 37,
            "description": "An array to keep references to all events created in the runtime of this class.\nAll events registered in this array will be removed when the instance is removed",
            "itemtype": "attribute",
            "name": "eventList",
            "type": "Array",
            "class": "Class",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_class.js",
            "line": 61,
            "itemtype": "method",
            "name": "initializer",
            "class": "Class",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_class.js",
            "line": 66,
            "itemtype": "method",
            "name": "destructor",
            "class": "Class",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_class.js",
            "line": 71,
            "itemtype": "method",
            "name": "get",
            "class": "Class",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_class.js",
            "line": 78,
            "itemtype": "method",
            "name": "set",
            "class": "Class",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_class.js",
            "line": 85,
            "itemtype": "method",
            "name": "destroy",
            "class": "Class",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_class.js",
            "line": 96,
            "itemtype": "method",
            "name": "setAttrs",
            "class": "Class",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_class.js",
            "line": 106,
            "description": "Using this funciton register all event listener created on the run time of the instance so they can be cleared when the instance is destroyed",
            "itemtype": "method",
            "name": "addEventListeners",
            "params": [
                {
                    "name": "eventListeners",
                    "description": "List of event listeners to be removed when the instance is destroyed\n\nexample:",
                    "type": "Objects",
                    "multiple": true
                }
            ],
            "example": [
                "\n   this.addEventListeners(eventListener1, eventListener2, eventListener3) // single elemenents"
            ],
            "class": "Class",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_class.js",
            "line": 125,
            "description": "Clean all event listeners registed",
            "itemtype": "method",
            "name": "removeEventListners",
            "class": "Class",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_customData.js",
            "line": 19,
            "description": "default configuration objec sections and API",
            "class": "CustomData",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_customData.js",
            "line": 26,
            "description": "Transforms a string with dot dotation ('myObject.subObject') into an object and maps that reference in a given object",
            "itemtype": "method",
            "name": "locate",
            "params": [
                {
                    "name": "obj",
                    "description": "- Object to map string against to.",
                    "type": "Object"
                },
                {
                    "name": "path",
                    "description": "- String with dot notation to be used as reference to map data in the obj",
                    "type": "String"
                }
            ],
            "return": {
                "description": "} Returns object value related with the reference",
                "type": "String || Object || Array"
            },
            "access": "private",
            "tagname": "",
            "class": "CustomData",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_customData.js",
            "line": 58,
            "description": "findEvents Finds events actions in configuration object and replaces their attributes.",
            "itemtype": "method",
            "name": "findEvents",
            "params": [
                {
                    "name": "data.id",
                    "description": "- Event id to look for.",
                    "type": "String"
                },
                {
                    "name": "data.partialObjectRef",
                    "description": "- Partial area of the configuration object that belongs to this events.",
                    "type": "Object"
                },
                {
                    "name": "data.groupToChange",
                    "description": "- Event action attribute to change data or create.",
                    "type": "String"
                },
                {
                    "name": "data.attrToChange",
                    "description": "- Value to change.",
                    "type": "String"
                },
                {
                    "name": "data.extraLevelToChange",
                    "description": "- Extra Value to change",
                    "type": "String"
                },
                {
                    "name": "data.newValue",
                    "description": "- New value to add or change to matched event action",
                    "type": "String || Array"
                }
            ],
            "return": {
                "description": "Partial of superConfiguration object with updated event action from newData object",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "CustomData",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_customData.js",
            "line": 105,
            "description": "findNode recursively finds nodes in configuration object by id and replaces their attributes.",
            "itemtype": "method",
            "name": "findNode",
            "params": [
                {
                    "name": "data.id",
                    "description": "- Node id to look for.",
                    "type": "String"
                },
                {
                    "name": "data.partialObjectRef",
                    "description": "- Partial area of the configuration object that belongs to this node.",
                    "type": "Object"
                },
                {
                    "name": "data.GroupToChange",
                    "description": "- Node attribute to change data or create.",
                    "type": "String"
                },
                {
                    "name": "data.attrToChange",
                    "description": "- Value to change",
                    "type": "String"
                },
                {
                    "name": "data.newValue",
                    "description": "- New value to add or change to matched event action",
                    "type": "String || Array"
                }
            ],
            "return": {
                "description": "Partial of superConfiguration object with updated node attribute.",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "CustomData",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_customData.js",
            "line": 165,
            "description": "overWriteEnv Change enviroment attributes\n Some examples:",
            "example": [
                "\n       \"forceEnv.forcedHTML5List.Chrome\" : \"*\" // Forced Chrome to play in any other\n       // overwrite all the object\n       \"forceEnv.forcedHTML5List\" :{\n           \"Manolo\": \"31\",\n           \"Chrome\": \"31\"\n       }"
            ],
            "itemtype": "method",
            "name": "overWriteEnv",
            "params": [
                {
                    "name": "data.listToForce",
                    "description": "List to force",
                    "type": "Object"
                },
                {
                    "name": "data.groupAttrib",
                    "description": "Group of attribute",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "data.config Original configuration object",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "CustomData",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_customData.js",
            "line": 263,
            "itemtype": "attribute",
            "name": "ATTRS",
            "type": "{{NAME: string, version: string}}",
            "initonly": "",
            "class": "CustomData",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_customData.js",
            "line": 274,
            "description": "map Change superConfig attributes from base object\n Some examples:",
            "example": [
                "\n       \"layers.mpu.width\" : \"500px\" // Change width attribute of mpu layer.\n       \"layers.mpu.container_1_1.css.height\" : \"500px\" // Change css attribute height of a content capability with id 'container_1_1'.\n       \"layers.mpu.mpu_flash.swfConfig.flashvars\" : { \"clickTAG\": \"test\"} // Adding a flashVars object into swf object."
            ],
            "itemtype": "method",
            "name": "mapCustomData",
            "params": [
                {
                    "name": "newData",
                    "description": "Custom data object",
                    "type": "Object"
                },
                {
                    "name": "superConf",
                    "description": "Super Configuration object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "superConfiguration object with updated attributes from newData object.",
                "type": "Object"
            },
            "class": "CustomData",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_customData.js",
            "line": 347,
            "description": "inputOntoCustomDataJSON Maps shortcuts in custom Data object against input data object for JSON inputs",
            "itemtype": "method",
            "name": "inputOntoCustomDataJSON",
            "params": [
                {
                    "name": "dataID",
                    "description": "- Id reference to the input data.",
                    "type": "String"
                },
                {
                    "name": "customData",
                    "description": "- Custom data object with all the shortcuts.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "callback",
                            "description": "- Callback for extra manipulation of custom data",
                            "type": "Function"
                        }
                    ]
                },
                {
                    "name": "inputData",
                    "description": "- Input data from external file.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Custom data object with merged data from custom Data.",
                "type": "Object"
            },
            "class": "CustomData",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_debug.js",
            "line": 33,
            "itemtype": "attribute",
            "name": "ATTRS",
            "type": "{{NAME: string, version: string}}",
            "initonly": "",
            "class": "Debug",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_debug.js",
            "line": 44,
            "description": "Simple wrapper for console.log",
            "itemtype": "method",
            "name": "log",
            "access": "public",
            "tagname": "",
            "class": "Debug",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_debug.js",
            "line": 62,
            "description": "Simple wrapper for console.error",
            "itemtype": "method",
            "name": "error",
            "access": "public",
            "tagname": "",
            "class": "Debug",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_debug.js",
            "line": 80,
            "description": "Simple wrapper for console.warn",
            "itemtype": "method",
            "name": "warn",
            "access": "public",
            "tagname": "",
            "class": "Debug",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_debug.js",
            "line": 98,
            "description": "Simple wrapper for console.info",
            "itemtype": "method",
            "name": "info",
            "access": "public",
            "tagname": "",
            "class": "Debug",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_dom.js",
            "line": 33,
            "itemtype": "attribute",
            "name": "ATTRS",
            "type": "{{NAME: string, version: string}}",
            "initonly": "",
            "class": "Dom",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_dom.js",
            "line": 44,
            "description": "Wrapper for document.getElementById",
            "params": [
                {
                    "name": "obj",
                    "description": "ID of the element on the page",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Reference to the embeded object",
                "type": "Object"
            },
            "itemtype": "method",
            "name": "byId",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "Dom",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_dom.js",
            "line": 56,
            "description": "Determine viewport offset for an element",
            "params": [
                {
                    "name": "forElement",
                    "description": "Element id to get the offset info for",
                    "type": "String | Object"
                }
            ],
            "itemtype": "method",
            "name": "viewportOffset",
            "return": {
                "description": "set of two values, left and top wich are offset in pixels.",
                "type": "Object"
            },
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "Dom",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_dom.js",
            "line": 81,
            "description": "Helper function to dtermine if a given element has the given class name",
            "params": [
                {
                    "name": "element",
                    "description": "Element to test against",
                    "type": "Object"
                },
                {
                    "name": "className",
                    "description": "Classname to test for",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "hasClass",
            "return": {
                "description": "true if the classname exists false otherwise",
                "type": "Boolean"
            },
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "Dom",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_dom.js",
            "line": 101,
            "description": "Wrapper function to get elements by Class Name",
            "params": [
                {
                    "name": "className",
                    "description": "that the elements contain",
                    "type": "String"
                },
                {
                    "name": "refObj",
                    "description": "node or null to search the entire document",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "elements with the given class name - empty array if none",
                "type": "Array"
            },
            "itemtype": "method",
            "name": "byClassName",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "Dom",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_dom.js",
            "line": 134,
            "description": "Adds a new class to a DOM element's classList",
            "params": [
                {
                    "name": "element",
                    "description": ""
                },
                {
                    "name": "className",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Dom",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_dom.js",
            "line": 154,
            "description": "Removes one existing class name from the element's class list",
            "params": [
                {
                    "name": "DOM",
                    "description": "element",
                    "type": "Object"
                },
                {
                    "name": "className",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Success",
                "type": "Boolean"
            },
            "access": "public",
            "tagname": "",
            "class": "Dom",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_dom.js",
            "line": 179,
            "description": "Given HTML in text form returns a documentFragment reference",
            "params": [
                {
                    "name": "html",
                    "description": "The HTML to convert to documentFragment",
                    "type": "String"
                }
            ],
            "return": {
                "description": "documentFragment Node reference.",
                "type": "Object"
            },
            "itemtype": "method",
            "name": "nodeCreate",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "Dom",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_dom.js",
            "line": 199,
            "description": "Given an element and a selector (className) returns the first parentNode with that className",
            "params": [
                {
                    "name": "selector",
                    "description": "ClassName of the parent we're looking for",
                    "type": "String"
                },
                {
                    "name": "element",
                    "description": "Element to start from",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "returns the object reference to the node or null if none found",
                "type": "Object"
            },
            "itemtype": "method",
            "name": "getParent",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "Dom",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_dom.js",
            "line": 220,
            "description": "Helper function to empty nodes innerHTML",
            "params": [
                {
                    "name": "element",
                    "description": "Element to empty",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "clear",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "Dom",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_dom.js",
            "line": 234,
            "description": "Helper function to set the nodes visibility to hidden or visible",
            "params": [
                {
                    "name": "element",
                    "description": "Element to hide",
                    "type": "Object"
                },
                {
                    "name": "true",
                    "description": "to set to visible false to hidden",
                    "type": "Boolean"
                }
            ],
            "itemtype": "method",
            "name": "visible",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "Dom",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_dom.js",
            "line": 254,
            "description": "Helper function to change the display style of a nodes to block",
            "params": [
                {
                    "name": "element",
                    "description": "Element to display",
                    "type": "Object"
                },
                {
                    "name": "\"block\",",
                    "description": "\"inline\", \"none\" or null to revert to default",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "display",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "Dom",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_dom.js",
            "line": 274,
            "description": "Allows to register CSS rules within the stylesheet",
            "params": [
                {
                    "name": "sheet",
                    "description": "- StyleSheet.sheet",
                    "type": "Object"
                },
                {
                    "name": "selector",
                    "description": "- CSS selector",
                    "type": "String"
                },
                {
                    "name": "rules",
                    "description": "- CSS rules (don't forget to end all lines with \";\" )",
                    "type": "String"
                },
                {
                    "name": "index",
                    "description": "",
                    "type": "Number"
                }
            ],
            "itemtype": "method",
            "name": "addCSSRule",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "Dom",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_dom.js",
            "line": 293,
            "description": "Creates a new style tag and returns its stylesheet",
            "itemtype": "method",
            "name": "createStylesheet",
            "return": {
                "description": "StyleSheet.sheet"
            },
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "Dom",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_dom.js",
            "line": 318,
            "description": "Calculates browser window size returning its width and height",
            "itemtype": "method",
            "name": "getWindowSize",
            "return": {
                "description": "}",
                "type": "Width: (Number), height: (Number)"
            },
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "Dom",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_dom.js",
            "line": 354,
            "description": "Get current position of given dom elment",
            "itemtype": "method",
            "name": "getElementPosition",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "element",
                    "description": "Element to get position",
                    "type": "DomElement"
                }
            ],
            "return": {
                "description": "Position X and Y. E.g [x, y]",
                "type": "Array"
            },
            "class": "Dom",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_dom.js",
            "line": 374,
            "description": "Applies a set of styles to an element",
            "itemtype": "method",
            "name": "applyStyles",
            "params": [
                {
                    "name": "el",
                    "description": "Element upon which to apply the styles defined",
                    "type": "Object"
                },
                {
                    "name": "styles",
                    "description": "Object of styles to apply",
                    "type": "Object"
                }
            ],
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "Dom",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_dom.js",
            "line": 392,
            "description": "Set attributes to given node",
            "itemtype": "method",
            "name": "setAttributes",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "node",
                    "description": "",
                    "type": "HTMLElement"
                },
                {
                    "name": "attrs",
                    "description": "a key->value set where key is the attribute name and value is the value to be set.",
                    "type": "Object"
                }
            ],
            "class": "Dom",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_dom.js",
            "line": 410,
            "description": "Checks if parameter is a DOM element",
            "params": [
                {
                    "name": "o",
                    "description": "DOM element",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "true for DOM element",
                "type": "Boolean"
            },
            "class": "Dom",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_dom.js",
            "line": 420,
            "description": "Calculates the right proportion based on maximum width and height when\nbrowser window is smaller than image.",
            "params": [
                {
                    "name": "width",
                    "description": "- image width",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "- image height",
                    "type": "Number"
                }
            ],
            "itemtype": "method",
            "name": "getMinProportion",
            "return": {
                "description": "proportion value",
                "type": "Number"
            },
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "Dom",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_dom.js",
            "line": 444,
            "description": "Return the current url of the window\nThe main reason for this method is to help us with the testing",
            "itemtype": "method",
            "name": "getCurrentLocation",
            "class": "Dom",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_event.js",
            "line": 16,
            "description": "Pair of events and HTML tags used for testing event support for current browser.",
            "readonly": "",
            "type": "{{select: string, change: string, submit: string, reset: string, error: string, load: string, abort: string}}",
            "class": "Event",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_event.js",
            "line": 31,
            "description": "Object containing all events being listened",
            "access": "private",
            "tagname": "",
            "type": "{{}}",
            "class": "Event",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_event.js",
            "line": 38,
            "description": "Simple integer to keep generate a 'random index' for added events.",
            "access": "private",
            "tagname": "",
            "type": "{Number}",
            "class": "Event",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_event.js",
            "line": 59,
            "itemtype": "attribute",
            "name": "ATTRS",
            "type": "{{NAME: string, version: string}}",
            "initonly": "",
            "class": "Event",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_event.js",
            "line": 69,
            "description": "Checks event string against events supported by current browser.\nUsed to decide if it's custom event or not.",
            "params": [
                {
                    "name": "eventName",
                    "description": "event string"
                },
                {
                    "name": "element",
                    "description": "element to test"
                }
            ],
            "return": {
                "description": "is a native browser event",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "Event",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_event.js",
            "line": 105,
            "description": "Wrapper to add event listeners to objects.",
            "params": [
                {
                    "name": "event",
                    "description": "Event to trigger on",
                    "type": "String"
                },
                {
                    "name": "fn",
                    "description": "Function to call when the event is fired",
                    "type": "Function"
                },
                {
                    "name": "element",
                    "description": "Element to attach the event to",
                    "type": "Object"
                },
                {
                    "name": "scope",
                    "description": "Scope Object to trigger the function with",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "addListener",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Event",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_event.js",
            "line": 163,
            "description": "Subscribe to listen to event",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "event",
                    "description": "event string",
                    "type": "String"
                },
                {
                    "name": "fn",
                    "description": "callback method",
                    "type": "Object"
                },
                {
                    "name": "element",
                    "description": "DOM element listening for event (optional)",
                    "type": "Object"
                },
                {
                    "name": "scope",
                    "description": "event scope - default to this",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "obj.remove A simple wrapper to remove this event listener.",
                "type": "Object"
            },
            "access": "public",
            "tagname": "",
            "example": [
                "\n   var Event = ACT.Event;\n   var Dom = ACT.Dom;\n   // custom event\n   Event.on( \"customEventString\", function( eventData ) { ...do something based on this event...}, null, this);\n   // 'vanilla' event\n   Event.on(\"click\", function( eventData ) { Event.preventDefault(eventData); ... do something ...}, Dom.byId(\"some_node_id\"), this);\n"
            ],
            "class": "Event",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_event.js",
            "line": 227,
            "description": "Wrapper to add event listeners to CSS.",
            "params": [
                {
                    "name": "event",
                    "description": "Event to trigger on",
                    "type": "String"
                },
                {
                    "name": "fn",
                    "description": "Function to call when the event is fired",
                    "type": "Function"
                },
                {
                    "name": "element",
                    "description": "Element to attach the event to",
                    "type": "Object"
                },
                {
                    "name": "scope",
                    "description": "Scope Object to trigger the function with",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "addCSSListener",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "Event",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_event.js",
            "line": 245,
            "description": "Helper Function to remove event listeners from objects.",
            "params": [
                {
                    "name": "event",
                    "description": "Event to remove",
                    "type": "String"
                },
                {
                    "name": "fn",
                    "description": "Function to remove from the object",
                    "type": "Function"
                },
                {
                    "name": "element",
                    "description": "Element to remove the event from",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "removeListenerHelper",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Event",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_event.js",
            "line": 263,
            "description": "Wrapper to remove event listeners from objects.",
            "params": [
                {
                    "name": "event",
                    "description": "Event to remove",
                    "type": "String"
                },
                {
                    "name": "fn",
                    "description": "Function to remove from the object",
                    "type": "Function"
                },
                {
                    "name": "element",
                    "description": "Element to remove the event from",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "removeListener",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "Event",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_event.js",
            "line": 288,
            "description": "The 'ready' function is a modified version of the JQuery 'ready' functionality found at http://api.jquery.com/ready/\nThe code below is modified according to the JQuery MIT License https://github.com/jquery/jquery",
            "class": "Event",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_event.js",
            "line": 386,
            "description": "Removes all listeners from the given element.",
            "params": [
                {
                    "name": "object",
                    "description": "to have purged",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "purgeListeners",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "Event",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_event.js",
            "line": 413,
            "description": "Publish event for listeners to execute",
            "itemtype": "method",
            "name": "fire",
            "params": [
                {
                    "name": "event",
                    "description": "Name of the event that is being fired",
                    "type": "String"
                },
                {
                    "name": "info",
                    "description": "Meta data that is being fired with the event",
                    "type": "Object"
                }
            ],
            "access": "public",
            "tagname": "",
            "example": [
                "\n```\n   // Now anyone can subscribe to the custom event.\n   var Event = ACT.Event;\n   var Dom = ACT.Dom;\n   // Example of listener\n   function listenForCustomEvent( event ) {\n       if( event.hasOwnProperty(\"node\")){\n            if(event.node.id === \"node1\"){\n                // got this event from node1\n            } else if( event.node.id === \"node2\" ){\n                // got this event from node2\n         }\n       } else if ( event.hasOwnProperty(\"meta\") ){\n         // heard first event.\n       }\n   }\n   Event.on( \"customEventString\", listenForCustomEvent, null, this);\n\n   Event.fire( \"customEventString\", { meta:\"data\" });\n   // Event.fire example with the same event fired for two different elements.\n   Event.fire( \"customEventString\", { \"node\": Dom.byId(\"node1\"); });\n   Event.fire( \"customEventString\", { \"node\": Dom.byId(\"node2\"); });\n```"
            ],
            "class": "Event",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_event.js",
            "line": 476,
            "description": "Wrapper to prevent default behaviour on an event",
            "params": [
                {
                    "name": "event",
                    "description": "Event that was triggered",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "preventDefault",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "Event",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_event.js",
            "line": 491,
            "description": "constructor",
            "access": "public",
            "tagname": "",
            "class": "Event",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_flash.js",
            "line": 43,
            "description": "Generate the set of parameters for the <object> or the <embed> tags",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "type",
                    "description": "Helpes determine which parameter types to return. Default OBJECT style.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "params The set of parameters that are defined for this embed",
                "type": "Array"
            },
            "itemtype": "method",
            "name": "params",
            "class": "Flash",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_flash.js",
            "line": 67,
            "description": "Helper of objectEmbed embeds the SWF Object into a given div with the given variables, parameters and location.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "conf",
                    "description": "Array of embed instructions / parameters.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "swf_el Reference to the embeded object",
                "type": "Object"
            },
            "itemtype": "method",
            "name": "ad_embedObj",
            "class": "Flash",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_flash.js",
            "line": 107,
            "itemtype": "attribute",
            "name": "ATTRS",
            "type": "{{NAME: string, version: string}}",
            "initonly": "",
            "class": "Flash",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_flash.js",
            "line": 118,
            "description": "Embed the SWF Object into a given div with the given variables, parameters and location.",
            "params": [
                {
                    "name": "conf",
                    "description": "Configuration object.",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "objectEmbed",
            "access": "public",
            "tagname": "",
            "static": 1,
            "example": [
                "\n```\n   // Simple Example\n   var conf = {\n       src: \"https://s.yimg.com/cv/ae/global/actjs/ACTPlayer1435242612.swf\",\n       position: \"adive\" // ID of the parent div - doc.byId(conf.position).innerHTML = html_code;\n   };\n   var node = ACT.Flash.objectEmbed(conf);\n```",
                "\n```\n   // A more Advanced Example\n   var conf = {\n       src: \"https://s.yimg.com/cv/ae/global/actjs/ACTPlayer1435242612.swf\", // src of the swf\n       width: 50,\n       height:150,\n       id: \"mySWFId\", // element ( swf element ) ID\n       wmode: \"opaque\",\n       menu: \"true\",\n       flashvars: {\n           \"clickTAG\": \"http://www.yahoo.com\",\n           \"callback\": \"someFunction\",\n           \"random_var\": \"value\"\n       },\n       allowScriptAccess: \"always\",\n       position: \"adive\" // ID of the parent div - doc.byId(conf.position).innerHTML = html_code;\n   };\n```"
            ],
            "class": "Flash",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_flash.js",
            "line": 190,
            "description": "Add class names to the documentElement signifying which flash version ( if any ) are available.",
            "itemtype": "method",
            "name": "injectFlashVersion",
            "access": "public",
            "tagname": "",
            "static": 1,
            "example": [
                "\n```\n    // flash-9 implies the user has flash 9 installed.\n    // flash-gt# implies the user has flash greater than # version installed.\n    // flash-0 implies no flash\n    // jsenabled is always injected, implies javascript is enabled.\n    document.documentElement.className === \"jsenabled flash-9 flash-gt8 flash-gt7 flash-gt6 flash-gt5 flash-gt4\"\n```"
            ],
            "class": "Flash",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_json.js",
            "line": 15,
            "description": "JSON encode functionality.",
            "type": "Mixed",
            "access": "private",
            "tagname": "",
            "final": 1,
            "static": 1,
            "class": "Json",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_json.js",
            "line": 34,
            "itemtype": "method",
            "name": "quote",
            "params": [
                {
                    "name": "string",
                    "description": "",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Json",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_json.js",
            "line": 48,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "str",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "holder",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Json",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_json.js",
            "line": 125,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "stringify",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "replacer",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "space",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "Json",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_json.js",
            "line": 430,
            "itemtype": "attribute",
            "name": "ATTRS",
            "type": "{{NAME: string, version: string}}",
            "initonly": "",
            "class": "Json",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_json.js",
            "line": 440,
            "itemtype": "method",
            "name": "stringify",
            "return": {
                "description": "object in JSON String Notation",
                "type": "String"
            },
            "params": [
                {
                    "name": "object",
                    "description": "Given a mixed object/element",
                    "type": "Mixed"
                }
            ],
            "class": "Json",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_json.js",
            "line": 447,
            "itemtype": "method",
            "name": "parse",
            "return": {
                "description": "object",
                "type": "Object"
            },
            "params": [
                {
                    "name": "string",
                    "description": "Given a string parses it into a proper JavaScript structure",
                    "type": "String"
                }
            ],
            "class": "Json",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_lang.js",
            "line": 35,
            "itemtype": "attribute",
            "name": "ATTRS",
            "type": "{{NAME: string, version: string}}",
            "initonly": "",
            "class": "Lang",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_lang.js",
            "line": 46,
            "description": "Date.now() - Polyfill for now method for ie8",
            "itemtype": "method",
            "name": "dateNow",
            "return": {
                "description": "timestamp millisecond"
            },
            "access": "public",
            "tagname": "",
            "author": "Mozilla",
            "class": "Lang",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_lang.js",
            "line": 57,
            "description": "Bind - binds the function to a scope",
            "params": [
                {
                    "name": "obj",
                    "description": "the Scope object",
                    "type": "Object"
                },
                {
                    "name": "args",
                    "description": "Arguments to pass in to the function",
                    "type": "Object"
                },
                {
                    "name": "func",
                    "description": "Function to call in the scope",
                    "type": "Function"
                }
            ],
            "itemtype": "method",
            "name": "bind",
            "return": {
                "description": "to the bound function"
            },
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "Lang",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_lang.js",
            "line": 83,
            "description": "Mixing properties of 2 objects. Properties in 'from' will overide the same properies in 'to'.\nThe 'to' object will also be overrided after the mix",
            "params": [
                {
                    "name": "to",
                    "description": "tagert object to be mixed in",
                    "type": "Object"
                },
                {
                    "name": "from",
                    "description": "The source object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Mixed object.",
                "type": "Object"
            },
            "class": "Lang",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_lang.js",
            "line": 102,
            "description": "Get length of an Object",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "size",
            "return": {
                "description": "length"
            },
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "Lang",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_lang.js",
            "line": 122,
            "description": "Merge the two objects together recursively",
            "params": [
                {
                    "name": "target",
                    "description": "Element to merge into",
                    "type": "Object"
                },
                {
                    "name": "from",
                    "description": "Element to merge properties out of",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "merge",
            "return": {
                "description": "to the newly merged element"
            },
            "access": "public",
            "tagname": "",
            "static": "Author : jQuery",
            "class": "Lang",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_lang.js",
            "line": 174,
            "description": "Wrapper for setTimeout to help trigger the function with a context.",
            "params": [
                {
                    "name": "func",
                    "description": "Function to call",
                    "type": "Function"
                },
                {
                    "name": "time",
                    "description": "Time in milliseconds after which to execute the function",
                    "type": "Number"
                },
                {
                    "name": "scope",
                    "description": "The scope to trigger the function in.",
                    "type": "Object"
                },
                {
                    "name": "args",
                    "description": "Arguments to apss to the function *deprecated for now*",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the reference to the setTimeout so it can be cancelled",
                "type": "Number"
            },
            "itemtype": "method",
            "name": "delay",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "Lang",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_lang.js",
            "line": 191,
            "description": "Formats a cookie value for an object containing multiple values.",
            "params": [
                {
                    "name": "hash",
                    "description": "An object of key-value pairs to create a string for.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A string suitable for use as a cookie value.",
                "type": "String"
            },
            "itemtype": "method",
            "name": "createHash",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "Lang",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_lang.js",
            "line": 213,
            "description": "Parses a cookie hash string into an object.",
            "params": [
                {
                    "name": "text",
                    "description": "The cookie hash string to parse (format: n1=v1&n2=v2).",
                    "type": "String"
                }
            ],
            "return": {
                "description": "An object containing entries for each cookie value.",
                "type": "Object"
            },
            "itemtype": "method",
            "name": "parseHash",
            "access": "public",
            "tagname": "",
            "static": 1,
            "author": "YUI3 - cookie.js",
            "class": "Lang",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_lang.js",
            "line": 242,
            "description": "Returns true if value is an Object or Function",
            "itemtype": "method",
            "name": "isObject",
            "params": [
                {
                    "name": "value",
                    "description": "Element to be checked",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns true in case it is an Object or a Function",
                "type": "Boolean"
            },
            "class": "Lang",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_lang.js",
            "line": 255,
            "description": "Return true if object is null or has no property",
            "params": [
                {
                    "name": "obj",
                    "description": "Target object to be checked again",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Return true if object is empty",
                "type": "Boolean"
            },
            "class": "Lang",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_lang.js",
            "line": 288,
            "description": "Returns true if value is a Function",
            "itemtype": "method",
            "name": "isFunction",
            "params": [
                {
                    "name": "value",
                    "description": "Element to be checked",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns true in case it is a Function",
                "type": "Boolean"
            },
            "class": "Lang",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_lang.js",
            "line": 298,
            "description": "Returns true if Object has the key",
            "itemtype": "method",
            "name": "objHasKey",
            "params": [
                {
                    "name": "obj",
                    "description": "Object to be checked",
                    "type": "Object"
                },
                {
                    "name": "key",
                    "description": "Key value to be checked against Object",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean|*"
            },
            "class": "Lang",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_lang.js",
            "line": 309,
            "description": "Checks if element is an Array",
            "itemtype": "method",
            "name": "isArray",
            "params": [
                {
                    "name": "value",
                    "description": "Element to be tested",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns true if element is an array",
                "type": "Boolean"
            },
            "class": "Lang",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_lang.js",
            "line": 319,
            "description": "Checks if element is a String",
            "itemtype": "method",
            "name": "isString",
            "params": [
                {
                    "name": "value",
                    "description": "Element to be evaluated",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns true if element is a String",
                "type": "Boolean"
            },
            "class": "Lang",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_lang.js",
            "line": 329,
            "description": "Checks if element value is a Number",
            "itemtype": "method",
            "name": "isNumber",
            "params": [
                {
                    "name": "value",
                    "description": "Element to be evaluated",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns true if element value is a Number",
                "type": "Boolean"
            },
            "class": "Lang",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_lang.js",
            "line": 343,
            "description": "isUndefined returns true is value is undefined.",
            "itemtype": "method",
            "name": "isUndefined",
            "params": [
                {
                    "name": "value",
                    "description": "To test",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "true if value is undefined.",
                "type": "Boolean"
            },
            "class": "Lang",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_lang.js",
            "line": 353,
            "description": "Checks if element value and type is a Number",
            "itemtype": "method",
            "name": "isStrictNumber",
            "params": [
                {
                    "name": "value",
                    "description": "Element to be evaluated",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns true if element value and type is a Number",
                "type": "Boolean"
            },
            "class": "Lang",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_lang.js",
            "line": 363,
            "description": "Clones Object",
            "itemtype": "method",
            "name": "clone",
            "params": [
                {
                    "name": "obj",
                    "description": "Object to be cloned",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns a cloned instance of the input Object",
                "type": "*"
            },
            "class": "Lang",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_lang.js",
            "line": 387,
            "description": "Returns the index of the first item in the array that's equal (using a strict\nequality check) to the specified _value_, or `-1` if the value isn't found.\n\nThis method wraps the native `Array.indexOf()` method if available.",
            "itemtype": "method",
            "name": "arrayIndexOf",
            "params": [
                {
                    "name": "array",
                    "description": "Array to search.",
                    "type": "Array"
                },
                {
                    "name": "value",
                    "description": "Value to search for.",
                    "type": "*"
                },
                {
                    "name": "from",
                    "description": "The index at which to begin the search.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "return": {
                "description": "Index of the item strictly equal to _value_, or `-1` if not found.",
                "type": "Number"
            },
            "class": "Lang",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_lang.js",
            "line": 426,
            "description": "Check if an element exists in an array",
            "params": [
                {
                    "name": "array",
                    "description": "Target Array"
                },
                {
                    "name": "el",
                    "description": "Element to be checked"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Lang",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_lang.js",
            "line": 436,
            "description": "Dedupes an array of strings, returning an array that's guaranteed to contain\nonly one copy of a given string.",
            "itemtype": "method",
            "name": "arrayDedupe",
            "params": [
                {
                    "name": "array",
                    "description": "Array of strings or numbers to dedupe.",
                    "type": "String[]|Number[]"
                }
            ],
            "return": {
                "description": "Copy of _array_ containing no duplicate values.",
                "type": "Array"
            },
            "class": "Lang",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_lang.js",
            "line": 463,
            "description": "Utility function to determine if string \"A\" contains string \"B\".",
            "params": [
                {
                    "name": "haystack",
                    "description": "String to search in",
                    "type": "String"
                },
                {
                    "name": "needle",
                    "description": "The string to search for",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "inString",
            "return": {
                "description": "true if found false otherwise",
                "type": "Boolean"
            },
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "Lang",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_lang.js",
            "line": 476,
            "description": "Parses out a Number out of a string 3.0.2 return 3.0",
            "itemtype": "method",
            "name": "numberific",
            "return": {
                "description": "Number out of a string",
                "type": "Float"
            },
            "params": [
                {
                    "name": "string",
                    "description": "",
                    "type": "String"
                }
            ],
            "author": "Igor Zingerman ( igorz@yahoo-inc.com )",
            "access": "private",
            "tagname": "",
            "class": "Lang",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_lang.js",
            "line": 492,
            "description": "Capitalise firt letter",
            "itemtype": "method",
            "name": "capitaliseFirstLetter",
            "params": [
                {
                    "name": "string,",
                    "description": "value to change",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Lang",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_lang.js",
            "line": 502,
            "description": "Check if the reference is a singleton and merge accordingly",
            "itemtype": "method",
            "name": "mixin",
            "params": [
                {
                    "name": "receiver",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "supplier",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Lang",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_lang.js",
            "line": 516,
            "description": "Alternative solution of Object.create()",
            "itemtype": "method",
            "name": "create",
            "params": [
                {
                    "name": "prototype,",
                    "description": "list of prototype methods",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Create, fresh instance",
                "type": "Object"
            },
            "class": "Lang",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_lang.js",
            "line": 528,
            "description": "Extend a class from another and define its prototype",
            "itemtype": "method",
            "name": "extend",
            "params": [
                {
                    "name": "receiver",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "supplier",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "prototypes",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "receiver",
                "type": "Object"
            },
            "class": "Lang",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_lang.js",
            "line": 567,
            "description": "Looping through the object and execute func for each item.\nIf func return false then stop the loop immediately",
            "itemtype": "method",
            "name": "forEach",
            "params": [
                {
                    "name": "obj",
                    "description": "Object to be looped through",
                    "type": "Object"
                },
                {
                    "name": "func",
                    "description": "Function to be executed for each item. Func will take 2 args, the index and the value of item respectively",
                    "type": "Function"
                }
            ],
            "class": "Lang",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_lang.js",
            "line": 586,
            "description": "Polyfill for requestAnimationFrame",
            "itemtype": "method",
            "name": "requestAnimFrame",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "id",
                "type": "Number"
            },
            "author": "Darius Bacon",
            "class": "Lang",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_lang.js",
            "line": 601,
            "description": "Polyfill for cancelAnimationFrame",
            "itemtype": "method",
            "name": "cancelAnimFrame",
            "params": [
                {
                    "name": "id",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "Lang",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_lang.js",
            "line": 610,
            "description": "Url sanitizer to prevent xss injection",
            "itemtype": "method",
            "name": "urlSanitize",
            "params": [
                {
                    "name": "str",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "Lang",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_lang.js",
            "line": 627,
            "description": "Check if string is containing invalid cararters",
            "itemtype": "method",
            "name": "isInvalidChars",
            "params": [
                {
                    "name": "str",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "Lang",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_lang.js",
            "line": 636,
            "description": "Check if the given url is hosted at the same origin",
            "itemtype": "method",
            "name": "isSameOrigin",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "Lang",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_util.js",
            "line": 30,
            "itemtype": "attribute",
            "name": "ATTRS",
            "type": "{{NAME: string, version: string}}",
            "initonly": "",
            "class": "Util",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_util.js",
            "line": 41,
            "description": "Wrapper function for ad_takeover call.",
            "params": [
                {
                    "name": "takeover",
                    "description": "True to set takeover or false to turn it off",
                    "type": "Boolean"
                }
            ],
            "itemtype": "method",
            "name": "toggleTakeover",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "Util",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_util.js",
            "line": 54,
            "description": "Wrapper for the function ad_running to pause or play the Today module",
            "params": [
                {
                    "name": "running",
                    "description": "True to let the page know the ad is running, false otherwise",
                    "type": "Boolean"
                }
            ],
            "itemtype": "method",
            "name": "adRunning",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "Util",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_util.js",
            "line": 67,
            "description": "Object keeping references to function that need to be called on ad_action",
            "access": "private",
            "tagname": "",
            "type": "Object",
            "itemtype": "property",
            "name": "adAction",
            "deprecated": true,
            "deprecationMessage": "DEPRECATED",
            "class": "Util",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_util.js",
            "line": 76,
            "description": "Registration function to callback when ad_action is called",
            "params": [
                {
                    "name": "conf",
                    "description": "params: callback:function, args:arguments, context: ad_context, ad: placement_name",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "registerAdAction",
            "access": "public",
            "tagname": "",
            "static": 1,
            "deprecated": true,
            "deprecationMessage": "DEPRECATED",
            "class": "Util",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_util.js",
            "line": 90,
            "description": "Search for all the numbers in a string and return them.",
            "params": [
                {
                    "name": "haystack",
                    "description": "String to search for numbers in",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "getInt",
            "return": {
                "description": "all the numbers in Number format or zero if none found",
                "type": "Number"
            },
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "Util",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_util.js",
            "line": 106,
            "description": "Calls the 1x1 pixel in javascript",
            "params": [
                {
                    "name": "pixel",
                    "description": "source of the image to request",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "pixelTrack",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "Util",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_util.js",
            "line": 124,
            "description": "Given a date returns true if it's today false otherwise. Today or after today.",
            "params": [
                {
                    "name": "date",
                    "description": "in the \"2012/10/23\" : YYYY/mm/dd format",
                    "type": "String"
                }
            ],
            "return": {
                "description": "true if the date is equal or greater than the passed in date. False otherwise",
                "type": "Boolean"
            },
            "itemtype": "method",
            "name": "adDate",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "Util",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_util.js",
            "line": 138,
            "description": "Given a string returns a numeric value (hash) of it",
            "params": [
                {
                    "name": "string",
                    "description": "(any length) to hash",
                    "type": "String"
                }
            ],
            "return": {
                "description": "hash number of the string.",
                "type": "Number"
            },
            "itemtype": "method",
            "name": "hashString",
            "access": "public",
            "tagname": "",
            "static": 1,
            "author": "FRESCO EMEA Team",
            "class": "Util",
            "module": "ACT"
        },
        {
            "file": "src/library/ACT_util.js",
            "line": 169,
            "description": "Given a variable name, returns value of a first matched variable from URL's query string if found",
            "params": [
                {
                    "name": "name,",
                    "description": "variable name to be matched",
                    "type": "String"
                }
            ],
            "return": {
                "description": "results, string value of first matched variable if found, \"\" otherwise",
                "type": "String"
            },
            "itemtype": "method",
            "name": "getQStrVal",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "Util",
            "module": "ACT"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: attributes",
            "line": " src/capabilities/ACT_contentAdobeEdge.js:82"
        },
        {
            "message": "unknown tag: attribte",
            "line": " src/capabilities/ACT_contentProgressBar.js:331"
        },
        {
            "message": "unknown tag: retun",
            "line": " src/capabilities/ACT_contentThirdParty.js:224"
        },
        {
            "message": "unknown tag: attrbite",
            "line": " src/capabilities/ACT_contentYoutube.js:313"
        },
        {
            "message": "unknown tag: array",
            "line": " src/core/ACT_Layerslist.js:27"
        },
        {
            "message": "unknown tag: constant",
            "line": " src/core/ACT_layerStandard.js:27"
        },
        {
            "message": "unknown tag: constant",
            "line": " src/core/ACT_layerStandard.js:32"
        },
        {
            "message": "unknown tag: constant",
            "line": " src/core/ACT_layerStandard.js:115"
        },
        {
            "message": "unknown tag: attribte",
            "line": " src/core/ACT_layerStandard.js:302"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/core/ACT_secureDarla.js:346"
        },
        {
            "message": "unknown tag: contructor",
            "line": " src/library/ACT_DwellTime.js:66"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/library/ACT_Enabler.js:722"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/library/ACT_Enabler.js:737"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/library/ACT_Enabler.js:748"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/library/ACT_Enabler.js:941"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/library/ACT_Enabler.js:990"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/library/ACT_Enabler.js:1000"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/library/ACT_Enabler.js:1051"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/library/ACT_Enabler.js:1063"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/library/ACT_Enabler.js:1287"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/library/ACT_Enabler.js:1297"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/library/ACT_Enabler.js:1310"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/library/ACT_Enabler.js:1325"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/library/ACT_Enabler.js:1338"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/library/ACT_Enabler.js:1352"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/library/ACT_Enabler.js:1401"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/library/ACT_Enabler.js:1411"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/library/ACT_Enabler.js:1427"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/library/ACT_Enabler.js:1437"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/library/ACT_Enabler.js:1447"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/library/ACT_Enabler.js:1457"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/library/ACT_Enabler.js:1467"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/library/ACT_Enabler.js:1497"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/library/ACT_Enabler.js:1578"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/library/ACT_Enabler.js:1597"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/library/ACT_Enabler.js:1607"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/library/ACT_Enabler.js:1617"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/library/ACT_Enabler.js:1627"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/library/ACT_Enabler.js:1637"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/library/ACT_Enabler.js:1647"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/library/ACT_Enabler.js:1657"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/library/ACT_Enabler.js:1750"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/library/ACT_dom.js:134"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/library/ACT_dom.js:154"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/library/ACT_dom.js:318"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/library/ACT_dom.js:410"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/library/ACT_event.js:69"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/library/ACT_lang.js:242"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/library/ACT_lang.js:288"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/library/ACT_lang.js:298"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/library/ACT_lang.js:309"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/library/ACT_lang.js:319"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/library/ACT_lang.js:329"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/library/ACT_lang.js:353"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/library/ACT_lang.js:363"
        },
        {
            "message": "Missing item type\nThis is a custom event name call by the queue\nwhen the related action has been fired",
            "line": " src/capabilities/ACT_capability-skeleton.js:25"
        },
        {
            "message": "Missing item type\nThis is a custom global event name call by the\ncapability when the code has been processed",
            "line": " src/capabilities/ACT_capability-skeleton.js:31"
        },
        {
            "message": "Missing item type\nThis test is passed by the queue in order to\ncheck the input data",
            "line": " src/capabilities/ACT_capability-skeleton.js:44"
        },
        {
            "message": "Missing item type\nThis test is passed by the queue in order to\ncheck the input data",
            "line": " src/capabilities/ACT_capability-skeleton.js:54"
        },
        {
            "message": "Missing item type\nThis test is passed by the queue in order to\ncheck the input data",
            "line": " src/capabilities/ACT_capability-skeleton.js:64"
        },
        {
            "message": "Missing item type\nThis is a callback executed at the end of the\nprocess to inform the queue that the next\naction is ready to go",
            "line": " src/capabilities/ACT_capability-skeleton.js:77"
        },
        {
            "message": "Missing item type\nAll the listeners are declared and stored here\nin order to be unsuscribe is the node is\ndestroyed.",
            "line": " src/capabilities/ACT_capability-skeleton.js:129"
        },
        {
            "message": "Missing item type\nThis is a custom global event name call by the\nqueue when the Ad has to be stop",
            "line": " src/capabilities/ACT_capability-skeleton.js:136"
        },
        {
            "message": "Missing item type\nThis is a custom global event name call by the\nqueue when the Ad has to be resize accordingly\nto the screen if the resize has been set in\nthe config object",
            "line": " src/capabilities/ACT_capability-skeleton.js:144"
        },
        {
            "message": "Missing item type\nEvent trigger by the queue in order to execute\nthe logic inside the capability",
            "line": " src/capabilities/ACT_capability-skeleton.js:156"
        },
        {
            "message": "Missing item type",
            "line": " src/capabilities/ACT_contentAdobeEdge.js:82"
        },
        {
            "message": "Missing item type\nListener for openURL event\nthis listen cannot be put inside container instance because it will be fired everytime a new container is created",
            "line": " src/capabilities/ACT_contentContainer.js:373"
        },
        {
            "message": "Missing item type\nfor testing purpose only",
            "line": " src/capabilities/ACT_contentContainer.js:592"
        },
        {
            "message": "Missing item type\nPost Message Handler",
            "line": " src/capabilities/ACT_contentHtml5.js:102"
        },
        {
            "message": "Missing item type",
            "line": " src/capabilities/ACT_contentHtml5.js:119"
        },
        {
            "message": "Missing item type\nSet to true if you want to track things that are not defined in tracking labels.\nset to False by default.",
            "line": " src/capabilities/ACT_contentHtml5.js:158"
        },
        {
            "message": "Missing item type",
            "line": " src/capabilities/ACT_contentImage.js:50"
        },
        {
            "message": "Missing item type",
            "line": " src/capabilities/ACT_contentProgressBar.js:56"
        },
        {
            "message": "Missing item type",
            "line": " src/capabilities/ACT_contentSwf.js:56"
        },
        {
            "message": "Missing item type",
            "line": " src/capabilities/ACT_contentThirdParty.js:179"
        },
        {
            "message": "Missing item type\nConstant values",
            "line": " src/capabilities/ACT_contentVideoFlash.js:26"
        },
        {
            "message": "Missing item type\nList of event for video",
            "line": " src/capabilities/ACT_contentVideoHtml.js:110"
        },
        {
            "message": "Missing item type\nReturn video source nodes",
            "line": " src/capabilities/ACT_contentVideoHtml.js:475"
        },
        {
            "message": "Missing item type\nFunction to send notification to other part of the system about changes of the video instance",
            "line": " src/capabilities/ACT_contentVideoHtml.js:733"
        },
        {
            "message": "Missing item type\nCreate video events for node",
            "line": " src/capabilities/ACT_contentVideoHtml.js:745"
        },
        {
            "message": "Missing item type\nVideo Events listener",
            "line": " src/capabilities/ACT_contentVideoHtml.js:797"
        },
        {
            "message": "Missing item type\nPlay video from start time position\nIf startTime is not set then the video will play from current position",
            "line": " src/capabilities/ACT_contentVideoHtml.js:823"
        },
        {
            "message": "Missing item type\nConstant values",
            "line": " src/capabilities/ACT_contentYoutube.js:87"
        },
        {
            "message": "Missing item type",
            "line": " src/capabilities/ACT_contentYoutube.js:285"
        },
        {
            "message": "Missing item type",
            "line": " src/capabilities/ACT_contentYoutube.js:313"
        },
        {
            "message": "Missing item type\nTesting purpose only",
            "line": " src/capabilities/ACT_contentYoutube.js:519"
        },
        {
            "message": "Missing item type\nNOTE: SafeFrames forces us to define the config before we include the library, like this:\n\nTraditional approach:\n<script language='javascript' src='library/files.js'></script>\n<script>\nvar ad = ACT.base({});\n</script>\n\nBecause of the load sequence is async in some browsers due to SafeFrames, having the config queue up\nguarantees that we execute the ad after the full library loaded, and the traditional approach changes to:\n\n<script>\n\nif (!window.ACT) {\n           var ACT = {\n               adQueue:[];\n           };\n       }\nfunction MASTAD() {\n           var ad = ACT.base({});\n       }\nACT.adQueue.push( MASTAD );\n\n</script>\n<script language='javascript' src='library/files.js'></script>",
            "line": " src/core/ACT.js:317"
        },
        {
            "message": "Missing item type\nActions for LayersList module",
            "line": " src/core/ACT_Layerslist.js:27"
        },
        {
            "message": "Missing item type",
            "line": " src/core/ACT_Layerslist.js:88"
        },
        {
            "message": "Missing item type",
            "line": " src/core/ACT_Screen.js:92"
        },
        {
            "message": "Missing item type\ndefault attribute",
            "line": " src/core/ACT_Screen.js:100"
        },
        {
            "message": "Missing item type\nPublic properties",
            "line": " src/core/ACT_Screen.js:128"
        },
        {
            "message": "Missing item type\nClass' attribute list",
            "line": " src/core/ACT_StandardAd.js:86"
        },
        {
            "message": "Missing item type\nClass prototypes",
            "line": " src/core/ACT_StandardAd.js:145"
        },
        {
            "message": "Missing item type\nevent list",
            "line": " src/core/ACT_TrackingFacade.js:16"
        },
        {
            "message": "Missing item type\nActions for tracking",
            "line": " src/core/ACT_TrackingFacade.js:26"
        },
        {
            "message": "Missing item type\nEvent for register redirect",
            "line": " src/core/ACT_TrackingFacade.js:204"
        },
        {
            "message": "Missing item type\nEvent for interaction tracking",
            "line": " src/core/ACT_TrackingFacade.js:218"
        },
        {
            "message": "Missing item type",
            "line": " src/core/ACT_actionsQueue.js:78"
        },
        {
            "message": "Missing item type\nA function to fire pixels",
            "line": " src/core/ACT_base.js:219"
        },
        {
            "message": "Missing item type\ndefault values",
            "line": " src/core/ACT_cookie.js:17"
        },
        {
            "message": "Missing item type\nEVENTS",
            "line": " src/core/ACT_cookie.js:44"
        },
        {
            "message": "Missing item type\nActions to be registered",
            "line": " src/core/ACT_cookie.js:88"
        },
        {
            "message": "Missing item type\nCookie Helper Utilities - STANDARD COOKIE",
            "line": " src/core/ACT_cookie.js:157"
        },
        {
            "message": "Missing item type\nFire event in standard ad as well so we the same appoarch with Darla",
            "line": " src/core/ACT_cookie.js:212"
        },
        {
            "message": "Missing item type\nCookie Helper Utilities - SafeFrame COOKIE",
            "line": " src/core/ACT_cookie.js:255"
        },
        {
            "message": "Missing item type\nSafeFrame Cookie data",
            "line": " src/core/ACT_cookie.js:270"
        },
        {
            "message": "Missing item type\nA simple SafeFrame status variable. If true then we're waiting on SafeFrame cookie reply. If 'false' then we have SafeFrame cookie data\nNULL otherwise",
            "line": " src/core/ACT_cookie.js:277"
        },
        {
            "message": "Missing item type\nCookie Utilities",
            "line": " src/core/ACT_cookie.js:498"
        },
        {
            "message": "Missing item type\nThe getSFCookie function will fire an 'internal' event which no one needs to listen to\nSo calling it right away is fair game - also speeds things up a big.\n'get' should be called with the DEFAULT_COOKIE_NAME",
            "line": " src/core/ACT_cookie.js:791"
        },
        {
            "message": "Missing item type\nExpose cookie helper methods",
            "line": " src/core/ACT_cookie.js:977"
        },
        {
            "message": "Missing item type\nClass' attribute list",
            "line": " src/core/ACT_environment.js:94"
        },
        {
            "message": "Missing item type\nClass prototypes",
            "line": " src/core/ACT_environment.js:205"
        },
        {
            "message": "Missing item type",
            "line": " src/core/ACT_layerStandard.js:27"
        },
        {
            "message": "Missing item type",
            "line": " src/core/ACT_layerStandard.js:32"
        },
        {
            "message": "Missing item type",
            "line": " src/core/ACT_layerStandard.js:55"
        },
        {
            "message": "Missing item type\nPrivate functions",
            "line": " src/core/ACT_layerStandard.js:63"
        },
        {
            "message": "Missing item type\nCollection of different styles for centering content",
            "line": " src/core/ACT_layerStandard.js:115"
        },
        {
            "message": "Missing item type\ndefault attribute",
            "line": " src/core/ACT_layerStandard.js:199"
        },
        {
            "message": "Missing item type\nreference to dwelltime tracking instances",
            "line": " src/core/ACT_layerStandard.js:302"
        },
        {
            "message": "Missing item type\nPublic properties",
            "line": " src/core/ACT_layerStandard.js:309"
        },
        {
            "message": "Missing item type\nList of capabilities instances rendered, organized by layerName\n    e.g {\n       mpu: [\n           {capability1},\n           {capability2}\n       ],\n       expand: [\n           {capability1},\n           {capability2}\n       ]\n    }",
            "line": " src/core/ACT_scaffolding.js:27"
        },
        {
            "message": "Missing item type\ntemporary list for capabily instance",
            "line": " src/core/ACT_scaffolding.js:42"
        },
        {
            "message": "Missing item type",
            "line": " src/core/ACT_scaffolding.js:52"
        },
        {
            "message": "Missing item type\nGo through all the rules defined in config object\nif any if those rule is not satify then the size is not satisfy",
            "line": " src/core/ACT_scaffolding.js:81"
        },
        {
            "message": "Missing item type\nEVENTS CONSTANT",
            "line": " src/core/ACT_secureDarla.js:22"
        },
        {
            "message": "Missing item type\nList action for SafeFrame",
            "line": " src/core/ACT_secureDarla.js:62"
        },
        {
            "message": "Missing item type\nList of public function for DwellTime instance",
            "line": " src/library/ACT_DwellTime.js:121"
        },
        {
            "message": "Missing item type\nListen to parent frame post message and convert it to event",
            "line": " src/library/ACT_Enabler.js:291"
        },
        {
            "message": "Missing item type",
            "line": " src/library/ACT_Enabler.js:933"
        },
        {
            "message": "Missing item type",
            "line": " src/library/ACT_Enabler.js:978"
        },
        {
            "message": "Missing item type",
            "line": " src/library/ACT_Enabler.js:1023"
        },
        {
            "message": "Missing item type\nAdds a dynamic property to the event.",
            "line": " src/library/ACT_Enabler.js:1750"
        },
        {
            "message": "Missing item type\nEVENTS",
            "line": " src/library/ACT_IO.js:27"
        },
        {
            "message": "Missing item type",
            "line": " src/library/ACT_IO.js:37"
        },
        {
            "message": "Missing item type\ndefault attribute",
            "line": " src/library/ACT_IO.js:45"
        },
        {
            "message": "Missing item type\nPublic properties",
            "line": " src/library/ACT_IO.js:61"
        },
        {
            "message": "Missing item type\nDetect current OS",
            "line": " src/library/ACT_UA.js:27"
        },
        {
            "message": "Missing item type\nDetect Mobiles",
            "line": " src/library/ACT_UA.js:75"
        },
        {
            "message": "Missing item type\nDetect Tablets",
            "line": " src/library/ACT_UA.js:87"
        },
        {
            "message": "Missing item type\nDetect if current browser supports Flash, and if so, returns the version which is installed",
            "line": " src/library/ACT_UA.js:99"
        },
        {
            "message": "Missing item type\nIdentifies the browser in use.\nIn case the browser is being used, returns the browser version, it returns 0 otherwise.",
            "line": " src/library/ACT_UA.js:146"
        },
        {
            "message": "Missing item type\nDetects if Canvas is supported by browser",
            "line": " src/library/ACT_UA.js:169"
        },
        {
            "message": "Missing item type\nDetects if Drag and Drop is supported by browser",
            "line": " src/library/ACT_UA.js:180"
        },
        {
            "message": "Missing item type\nDetects if canvas and text on canvas is supported by browser",
            "line": " src/library/ACT_UA.js:191"
        },
        {
            "message": "Missing item type\nDetects if playing audio is supported by browser",
            "line": " src/library/ACT_UA.js:203"
        },
        {
            "message": "Missing item type\nDetects if native video playing is supported by browser",
            "line": " src/library/ACT_UA.js:236"
        },
        {
            "message": "Missing item type\nDetects browser",
            "line": " src/library/ACT_UA.js:294"
        },
        {
            "message": "Missing item type\nDetect current OS",
            "line": " src/library/ACT_UA.js:364"
        },
        {
            "message": "Missing item type\nGet if screen has been clicked or not",
            "line": " src/library/ACT_VideoEvents.js:134"
        },
        {
            "message": "Missing item type\nPost-fix for css style attributes",
            "line": " src/library/ACT_animation.js:14"
        },
        {
            "message": "Missing item type",
            "line": " src/library/ACT_animation.js:39"
        },
        {
            "message": "Missing item type\nCore of the animation, containing setInterval loop",
            "line": " src/library/ACT_animation.js:59"
        },
        {
            "message": "Missing item type\nIsolated context to execute an animation for only one css style attribute",
            "line": " src/library/ACT_animation.js:90"
        },
        {
            "message": "Missing item type\nCheck this tutorial to implement animation type\nhttp://javascript.info/tutorial/animation",
            "line": " src/library/ACT_animation.js:116"
        },
        {
            "message": "Missing item type\ndefault configuration objec sections and API",
            "line": " src/library/ACT_customData.js:19"
        },
        {
            "message": "Missing item type\nAdds a new class to a DOM element's classList",
            "line": " src/library/ACT_dom.js:134"
        },
        {
            "message": "Missing item type\nRemoves one existing class name from the element's class list",
            "line": " src/library/ACT_dom.js:154"
        },
        {
            "message": "Missing item type\nChecks if parameter is a DOM element",
            "line": " src/library/ACT_dom.js:410"
        },
        {
            "message": "Missing item type\nPair of events and HTML tags used for testing event support for current browser.",
            "line": " src/library/ACT_event.js:16"
        },
        {
            "message": "Missing item type\nObject containing all events being listened",
            "line": " src/library/ACT_event.js:31"
        },
        {
            "message": "Missing item type\nSimple integer to keep generate a 'random index' for added events.",
            "line": " src/library/ACT_event.js:38"
        },
        {
            "message": "Missing item type\nChecks event string against events supported by current browser.\nUsed to decide if it's custom event or not.",
            "line": " src/library/ACT_event.js:69"
        },
        {
            "message": "Missing item type\nThe 'ready' function is a modified version of the JQuery 'ready' functionality found at http://api.jquery.com/ready/\nThe code below is modified according to the JQuery MIT License https://github.com/jquery/jquery",
            "line": " src/library/ACT_event.js:288"
        },
        {
            "message": "Missing item type\nconstructor",
            "line": " src/library/ACT_event.js:491"
        },
        {
            "message": "Missing item type\nJSON encode functionality.",
            "line": " src/library/ACT_json.js:15"
        },
        {
            "message": "Missing item type\nMixing properties of 2 objects. Properties in 'from' will overide the same properies in 'to'.\nThe 'to' object will also be overrided after the mix",
            "line": " src/library/ACT_lang.js:83"
        },
        {
            "message": "Missing item type\nReturn true if object is null or has no property",
            "line": " src/library/ACT_lang.js:255"
        },
        {
            "message": "Missing item type\nCheck if an element exists in an array",
            "line": " src/library/ACT_lang.js:426"
        }
    ]
}